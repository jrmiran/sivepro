/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef } from '@angular/core';
import { ColorService } from './color.service';
export class BackgroundColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setBackgroundColor(color, this.condition, this.property, this.prefix);
    }
}
BackgroundColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkColor]',
                providers: [ColorService]
            },] },
];
BackgroundColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
BackgroundColorDirective.propDecorators = {
    condition: [{ type: Input, args: ['mkColorCondition',] }],
    prefix: [{ type: Input, args: ['mkColorPrefix',] }],
    property: [{ type: Input, args: ['mkColorProperty',] }],
    color: [{ type: Input, args: ['mkColor',] }]
};
if (false) {
    /** @type {?} */
    BackgroundColorDirective.prototype.condition;
    /** @type {?} */
    BackgroundColorDirective.prototype.prefix;
    /** @type {?} */
    BackgroundColorDirective.prototype.property;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.colorService;
}
export class ColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setFontColor(color);
    }
}
ColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkFontColor]',
                providers: [ColorService]
            },] },
];
ColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
ColorDirective.propDecorators = {
    color: [{ type: Input, args: ['mkFontColor',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.colorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvY29sb3IvY29sb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0vQyxNQUFNOzs7Ozs7O0lBT0osWUFDVSxVQUFzQixFQUN0QixTQUFvQixFQUNwQixZQUEwQjtRQUYxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFHVCxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRnpDLENBQUM7Ozs7O0lBS0osSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRixDQUFDOzs7WUF0QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDMUI7OztZQVBxQyxVQUFVO1lBQXJCLFNBQVM7WUFFM0IsWUFBWTs7O3dCQW1CbEIsS0FBSyxTQUFDLGtCQUFrQjtxQkFDeEIsS0FBSyxTQUFDLGVBQWU7dUJBQ3JCLEtBQUssU0FBQyxpQkFBaUI7b0JBQ3ZCLEtBQUssU0FBQyxTQUFTOzs7O0lBSGhCLDZDQUE0Qzs7SUFDNUMsMENBQXVDOztJQUN2Qyw0Q0FBMkM7Ozs7O0lBUHpDLDhDQUE4Qjs7Ozs7SUFDOUIsNkNBQTRCOzs7OztJQUM1QixnREFBa0M7O0FBZXRDLE1BQU07Ozs7Ozs7SUFPSixZQUNVLFVBQXNCLEVBQ3RCLFNBQW9CLEVBQ3BCLFlBQTBCO1FBRjFCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUNqQyxDQUFDOzs7OztJQUVKLElBQTBCLEtBQUssQ0FBQyxLQUFhO1FBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OztZQW5CRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQzthQUMxQjs7O1lBaENxQyxVQUFVO1lBQXJCLFNBQVM7WUFFM0IsWUFBWTs7O29CQTRDbEIsS0FBSyxTQUFDLGFBQWE7Ozs7Ozs7SUFMbEIsb0NBQThCOzs7OztJQUM5QixtQ0FBNEI7Ozs7O0lBQzVCLHNDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb2xvclNlcnZpY2UgfSBmcm9tICcuL2NvbG9yLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtDb2xvcl0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRDb2xvckRpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlXG4gICkge31cblxuICBASW5wdXQoJ21rQ29sb3JDb25kaXRpb24nKSBjb25kaXRpb24gPSB0cnVlO1xuICBASW5wdXQoJ21rQ29sb3JQcmVmaXgnKSBwcmVmaXg6IHN0cmluZztcbiAgQElucHV0KCdta0NvbG9yUHJvcGVydHknKSBwcm9wZXJ0eTogc3RyaW5nO1xuICBASW5wdXQoJ21rQ29sb3InKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcihjb2xvciwgdGhpcy5jb25kaXRpb24sIHRoaXMucHJvcGVydHksIHRoaXMucHJlZml4KTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtGb250Q29sb3JdJyxcbiAgcHJvdmlkZXJzOiBbQ29sb3JTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckRpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlXG4gICkge31cblxuICBASW5wdXQoJ21rRm9udENvbG9yJykgc2V0IGNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRGb250Q29sb3IoY29sb3IpO1xuICB9XG59XG4iXX0=