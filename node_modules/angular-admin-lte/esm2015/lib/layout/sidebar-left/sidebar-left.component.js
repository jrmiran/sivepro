/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone, QueryList, Renderer2, ViewChild, ViewChildren } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { RoutingService } from '../../services/routing.service';
import { WrapperService } from '../wrapper/wrapper.service';
import { HeaderService } from '../header/header.service';
import { LayoutStore } from '../layout.store';
import { removeListeners, removeSubscriptions } from '../../helpers';
import { SidebarLeftToggleDirective } from './sidebar-left.directive';
/**
 * @record
 */
export function Item() { }
if (false) {
    /** @type {?} */
    Item.prototype.id;
    /** @type {?} */
    Item.prototype.parentId;
    /** @type {?} */
    Item.prototype.label;
    /** @type {?|undefined} */
    Item.prototype.route;
    /** @type {?|undefined} */
    Item.prototype.iconClasses;
    /** @type {?|undefined} */
    Item.prototype.children;
    /** @type {?|undefined} */
    Item.prototype.isActive;
    /** @type {?|undefined} */
    Item.prototype.isCollapsed;
    /** @type {?|undefined} */
    Item.prototype.disableCollapse;
}
export class SidebarLeftComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef  [description]
     * @param {?} layoutStore        [description]
     * @param {?} ngZone             [description]
     * @param {?} renderer2          [description]
     * @param {?} router             [description]
     * @param {?} routingService     [description]
     * @param {?} wrapperService     [description]
     * @param {?} headerService      [description]
     */
    constructor(changeDetectorRef, layoutStore, ngZone, renderer2, router, routingService, wrapperService, headerService) {
        this.changeDetectorRef = changeDetectorRef;
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.router = router;
        this.routingService = routingService;
        this.wrapperService = wrapperService;
        this.headerService = headerService;
        this.collapsedItems = [];
        this.activatedItems = [];
        this.toggleListeners = [];
        this.listeners = [];
        this.itemsByIds = {};
        this.runningAnimations = 0;
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(value => {
            this.menu = value;
            this.monkeyPatchMenu(this.menu);
            if (this.initialized) {
                this.setMenuListeners(this.activeUrl);
                this.setSidebarListeners();
                this.setMenuTogglesListeners();
            }
            this.initialized = true;
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenuActiveUrl.subscribe(value => {
            this.activeUrl = value;
            this.setMenuListeners(value);
        }));
        this.subscriptions.push(this.routingService.events.subscribe((event) => {
            if (event instanceof NavigationEnd) {
                this.activeUrl = event.url;
                this.setMenuListeners(event.url);
            }
        }));
        this.setSidebarListeners();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.setMenuTogglesListeners();
        this.checkMenuWithoutChildren();
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
        this.toggleListeners = removeListeners(this.toggleListeners);
    }
    /**
     * [setSidebarListeners description]
     * \@method setSidebarListeners
     * @return {?}
     */
    setSidebarListeners() {
        this.subscriptions.push(this.layoutStore.layout.subscribe((value) => {
            this.layout = value;
            this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe((value) => {
            this.windowInnerHeight = value;
            this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(() => {
            this.changeDetectorRef.detectChanges();
        }));
        this.ngZone.runOutsideAngular(() => {
            this.listeners.push(this.renderer2.listen(this.sidebarElement.nativeElement, 'mouseenter', () => {
                this.layoutStore.sidebarLeftMouseOver(true);
            }));
            this.listeners.push(this.renderer2.listen(this.sidebarElement.nativeElement, 'mouseleave', () => {
                this.layoutStore.sidebarLeftMouseOver(false);
            }));
        });
        this.subscriptions.push(this.layoutStore.windowInnerWidth.subscribe((value) => {
            this.windowInnerWidth = value;
            if (!this.isSidebarLeftCollapsed && this.windowInnerWidth <= 767) {
                this.layoutStore.sidebarLeftCollapsed(true);
            }
            else if (this.windowInnerWidth > 767 && this.isSidebarLeftCollapsed && !this.isSidebarLeftExpandOnOver) {
                this.layoutStore.sidebarLeftCollapsed(false);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMouseOver.subscribe((value) => {
            this.isSidebarLeftMouseOver = value;
            if (this.isSidebarLeftExpandOnOver) {
                this.layoutStore.sidebarLeftCollapsed(!value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftExpandOnOver.subscribe((value) => {
            this.isSidebarLeftExpandOnOver = value;
            if (this.windowInnerWidth > 767 && this.isSidebarLeftCollapsed !== undefined) {
                this.layoutStore.sidebarLeftCollapsed(value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe((value) => {
            this.isSidebarLeftCollapsed = value;
            if (this.windowInnerWidth <= 767) {
                if (value) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
                else {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
            }
            else {
                if (this.isSidebarLeftExpandOnOver && !this.isSidebarLeftMouseOver && !value) {
                    this.layoutStore.sidebarLeftExpandOnOver(false);
                }
                if (value) {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (this.isSidebarLeftExpandOnOver) {
                        this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
                else {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (this.isSidebarLeftExpandOnOver) {
                        this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMini.subscribe((value) => {
            if (value) {
                this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
            else {
                this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
        }));
    }
    /**
     * [setMenuListeners description]
     * \@method setMenuListeners
     * @param {?} url
     * @return {?}
     */
    setMenuListeners(url) {
        if (url === '/') {
            this.activeItems(url);
            this.changeDetectorRef.detectChanges();
        }
        else {
            /** @type {?} */
            const primaryOutlet = this.router.parseUrl(url).root.children[PRIMARY_OUTLET];
            if (primaryOutlet) {
                this.activeItems(primaryOutlet.toString());
                this.changeDetectorRef.detectChanges();
            }
        }
        if (this.windowInnerWidth <= 767 || this.isSidebarLeftExpandOnOver) {
            this.layoutStore.sidebarLeftCollapsed(true);
        }
    }
    /**
     * [getIconClasses description]
     * \@method getIconClasses
     * @param {?} item [description]
     * @return {?} [description]
     */
    getIconClasses(item) {
        if (item.iconClasses || item.iconClasses === '') {
            return item.iconClasses;
        }
        else {
            return 'fa fa-circle-o';
        }
    }
    /**
     * [visibilityStateStart description]
     * \@method visibilityStateStart
     * @param {?} event [description]
     * @return {?}
     */
    visibilityStateStart(event) {
        this.runningAnimations++;
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.runningAnimations--;
                if (!this.runningAnimations) {
                    this.layoutStore.setSidebarLeftElementHeight(this.sidebarElement.nativeElement.offsetHeight);
                }
            }, event.totalTime);
        });
    }
    /**
     * [uncollapseItemParents description]
     * \@method uncollapseItemParents
     * @private
     * @param {?} item           [description]
     * @param {?=} isActive       [description]
     * @return {?}
     */
    uncollapseItemParents(item, isActive = false) {
        if (isActive) {
            item.isActive = true;
            this.activatedItems.push(item);
        }
        item.isCollapsed = false;
        this.collapsedItems.push(item);
        if (item.parentId) {
            this.uncollapseItemParents(this.itemsByIds[item.parentId], isActive);
        }
    }
    /**
     * [findItemsByUrl description]
     * \@method findItemsByUrl
     * @private
     * @param {?} url   [description]
     * @param {?} items [description]
     * @param {?=} returnItems [description]
     * @return {?} [description]
     */
    findItemsByUrl(url, items, returnItems = []) {
        items.forEach((item) => {
            if (item.route === url) {
                returnItems.push(item);
            }
            else if (item.children) {
                this.findItemsByUrl(url, item.children, returnItems);
            }
        });
        return returnItems;
    }
    /**
     * [activeItems description]
     * \@method activeItems
     * @private
     * @param {?} url [description]
     * @return {?}
     */
    activeItems(url) {
        this.activatedItems.forEach((item) => {
            item.isActive = false;
        });
        this.activatedItems = [];
        this.collapsedItems.forEach((item) => {
            item.isActive = false;
            item.isCollapsed = true;
        });
        this.collapsedItems = [];
        /** @type {?} */
        const items = this.findItemsByUrl(url, this.menu);
        items.forEach(item => {
            item.isActive = true;
            this.uncollapseItemParents(item, true);
            this.activatedItems.push(item);
        });
    }
    /**
     * [monkeyPatchMenu description]
     * \@method monkeyPatchMenu
     * @private
     * @param {?} items    [description]
     * @param {?=} parentId [description]
     * @return {?}
     */
    monkeyPatchMenu(items, parentId) {
        items.forEach((item, index) => {
            item.id = parentId ? Number(parentId + '' + (index + 1)) : index + 1;
            if (parentId) {
                item.parentId = parentId;
            }
            if (!item.disableCollapse) {
                item.isCollapsed = true;
            }
            item.isActive = false;
            if (parentId || item.children) {
                this.itemsByIds[item.id] = item;
            }
            if (item.children) {
                this.monkeyPatchMenu(item.children, item.id);
            }
        });
    }
    /**
     * [setMenuTogglesListeners description]
     * \@method setMenuTogglesListeners
     * @private
     * @return {?}
     */
    setMenuTogglesListeners() {
        this.toggleListeners = removeListeners(this.toggleListeners);
        this.ngZone.runOutsideAngular(() => {
            this.sidebarLeftToggleDirectives.forEach((menuToggle) => {
                this.toggleListeners.push(this.renderer2.listen(menuToggle.elementRef.nativeElement, 'click', (event) => {
                    event.preventDefault();
                    if (menuToggle.item.isCollapsed) {
                        this.collapsedItems.forEach((item) => {
                            if (!item.disableCollapse) {
                                item.isCollapsed = true;
                            }
                        });
                        this.collapsedItems = [];
                        this.uncollapseItemParents(menuToggle.item);
                    }
                    else {
                        menuToggle.item.isCollapsed = !menuToggle.item.isCollapsed;
                    }
                    this.changeDetectorRef.detectChanges();
                }));
            });
        });
    }
    /**
     * [checkMenuWithoutChildren description]
     * \@method checkMenuWithoutChildren
     * @private
     * @return {?}
     */
    checkMenuWithoutChildren() {
        /** @type {?} */
        let menuHaveChildren;
        this.menu.forEach((item) => {
            if (item.children) {
                return menuHaveChildren = true;
            }
        });
        if (!menuHaveChildren) {
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.layoutStore.setSidebarLeftElementHeight(this.sidebarElement.nativeElement.offsetHeight);
                });
            });
        }
    }
    /**
     * [setSidebarHeight description]
     * \@method setSidebarHeight
     * @private
     * @return {?}
     */
    setSidebarHeight() {
        if (this.layout === 'fixed') {
            /** @type {?} */
            const height = this.windowInnerHeight - this.headerService.offsetHeight;
            if (height && height !== this.sidebarHeight) {
                this.sidebarHeight = height;
                this.sidebarOverflow = 'auto';
                this.changeDetectorRef.detectChanges();
            }
        }
        else if (this.sidebarHeight) {
            this.sidebarOverflow = this.sidebarHeight = null;
            this.changeDetectorRef.detectChanges();
        }
    }
}
SidebarLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-left',
                template: `<aside class="main-sidebar">
  <section class="sidebar" #sidebarElement [style.height.px]="sidebarHeight" [style.overflow]="sidebarOverflow">
    <ng-content></ng-content>
  	<ul class="sidebar-menu">
      <ng-container *ngFor="let item of menu">
        <ng-container *ngTemplateOutlet="sidebarInner; context: {item: item}"></ng-container>
      </ng-container>
  	</ul>
  </section>
</aside>

<ng-template #sidebarInner let-item="item">
  <li [class.active]="item.isActive" [class.header]="item.separator" [class.menu-open]="!item.isCollapsed">
    <span *ngIf="item.separator">{{item.label}}</span>
    <a *ngIf="!item.separator && item.route" [routerLink]="item.route">
    	<i [class]="getIconClasses(item)"></i><span>{{item.label}}</span>
    	<span *ngIf="item.children || item.pullRights" class="pull-right-container">
    		<span *ngFor="let rightItem of item.pullRights" class="pull-right {{rightItem.classes}}">{{rightItem.text}}</span>
    	  <i *ngIf="!item.pullRights" class="fa fa-angle-left pull-right"></i>
    	</span>
    </a>
    <a *ngIf="!item.separator && !item.route" href="#" [mkMenuToggle]="item">
    	<i [class]="getIconClasses(item)"></i><span>{{item.label}}</span>
    	<span *ngIf="item.children || item.pullRights" class="pull-right-container">
    		<span *ngFor="let rightItem of item.pullRights" class="pull-right {{rightItem.classes}}">{{rightItem.text}}</span>
    	  <i *ngIf="!item.pullRights" class="fa fa-angle-left pull-right"></i>
    	</span>
    </a>
    <ul *ngIf="item.children" [mkCollapseAnimation]="item.isCollapsed" (mkCollapseAnimation.start)="visibilityStateStart($event)" class="treeview-menu">
      <ng-container *ngFor="let item of item.children">
        <ng-container *ngTemplateOutlet="sidebarInner; context: {item: item}"></ng-container>
      </ng-container>
    </ul>
  </li>
</ng-template>
`,
                styles: [`.treeview-menu.collapse{display:none}.treeview-menu,.treeview-menu.collapse.in{display:block}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
SidebarLeftComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: LayoutStore },
    { type: NgZone },
    { type: Renderer2 },
    { type: Router },
    { type: RoutingService },
    { type: WrapperService },
    { type: HeaderService }
];
SidebarLeftComponent.propDecorators = {
    sidebarElement: [{ type: ViewChild, args: ['sidebarElement',] }],
    sidebarLeftToggleDirectives: [{ type: ViewChildren, args: [SidebarLeftToggleDirective,] }]
};
if (false) {
    /** @type {?} */
    SidebarLeftComponent.prototype.menu;
    /** @type {?} */
    SidebarLeftComponent.prototype.sidebarHeight;
    /** @type {?} */
    SidebarLeftComponent.prototype.sidebarOverflow;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.layout;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.isSidebarLeftCollapsed;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.isSidebarLeftExpandOnOver;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.isSidebarLeftMouseOver;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.windowInnerWidth;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.windowInnerHeight;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.collapsedItems;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.activatedItems;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.toggleListeners;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.listeners;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.itemsByIds;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.runningAnimations;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.activeUrl;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.initialized;
    /** @type {?} */
    SidebarLeftComponent.prototype.sidebarElement;
    /** @type {?} */
    SidebarLeftComponent.prototype.sidebarLeftToggleDirectives;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.layoutStore;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.routingService;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.wrapperService;
    /**
     * @type {?}
     * @private
     */
    SidebarLeftComponent.prototype.headerService;
}
//# sourceMappingURL=data:application/json;base64,