/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
/**
 * @record
 */
export function Path() { }
if (false) {
    /** @type {?} */
    Path.prototype.data;
    /** @type {?} */
    Path.prototype.params;
    /** @type {?} */
    Path.prototype.url;
}
/**
 * @record
 */
export function Paths() { }
/*
 *
 */
export class RoutingService {
    /**
     * \@method constructor
     * @param {?} router [description]
     */
    constructor(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    /**
     * [createUrl description]
     * \@method createUrl
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static createUrl(route) {
        /** @type {?} */
        const url = route.url.map(urlSegment => urlSegment.toString()).join('/');
        return url;
    }
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static isChildrenSelfRoute(route) {
        route.routeConfig.children.forEach(child => {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        });
        return false;
    }
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @private
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    static createBreadcrumb(route, url) {
        /** @type {?} */
        let isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    }
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?}
     */
    init() {
        this.router.events.subscribe(routeEvent => {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                this.events.next(routeEvent);
                /** @type {?} */
                let route = this.router.routerState.root.snapshot;
                /** @type {?} */
                let tmpUrl = '';
                /** @type {?} */
                let url = '';
                /** @type {?} */
                let rootRoot = true;
                /** @type {?} */
                const paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = `/${RoutingService.createUrl(route)}`;
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (const key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(`:${key}`, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService.createBreadcrumb(route, url));
                    }
                }
                this.onChange.next(paths);
            }
        });
    }
}
RoutingService.decorators = [
    { type: Injectable },
];
RoutingService.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /** @type {?} */
    RoutingService.prototype.onChange;
    /** @type {?} */
    RoutingService.prototype.events;
    /**
     * @type {?}
     * @private
     */
    RoutingService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,