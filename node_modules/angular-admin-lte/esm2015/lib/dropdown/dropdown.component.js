/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { removeListeners } from '../helpers';
/*
 *
 */
export class DropdownToggleComponent {
}
DropdownToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-toggle',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownToggleComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }],
    toggleElement: [{ type: ContentChild, args: ['toggleElement',] }]
};
if (false) {
    /** @type {?} */
    DropdownToggleComponent.prototype.templateRef;
    /** @type {?} */
    DropdownToggleComponent.prototype.toggleElement;
}
/*
 *
 */
export class DropdownMenuComponent {
}
DropdownMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-menu',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownMenuComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
if (false) {
    /** @type {?} */
    DropdownMenuComponent.prototype.templateRef;
}
/*
 *
 */
export class DropdownComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} elementRef [description]
     * @param {?} ngZone [description]
     * @param {?} renderer2 [description]
     */
    constructor(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular(() => {
                this.listeners.push(this.renderer2.listen(toggleNativeElement, 'click', (event) => {
                    this.toggleDropdown(event);
                    this.changeDetectorRef.detectChanges();
                }));
            });
        }
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    }
    /**
     * [toggle description]
     * \@method toggle
     * @param {?} event [description]
     * @return {?}
     */
    toggleDropdown(event) {
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.bindDocumentClickListener();
                });
            });
        }
        else {
            this.unBindDocumentClickListener();
        }
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    collapseStart(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    collapseDone(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [bindDocumentClickListener description]
     * \@method bindDocumentClickListener
     * @private
     * @return {?}
     */
    bindDocumentClickListener() {
        this.ngZone.runOutsideAngular(() => {
            this.documentClickListener = this.renderer2.listen('document', 'click', () => {
                if (!this.isCollapsed) {
                    this.isCollapsed = true;
                    this.unBindDocumentClickListener();
                    this.changeDetectorRef.detectChanges();
                }
            });
        });
    }
    /**
     * [unBindDocumentClickListener description]
     * \@method unBindDocumentClickListener
     * @private
     * @return {?}
     */
    unBindDocumentClickListener() {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    }
}
DropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown, [mk-dropdown]',
                template: `<ng-template #innerTemplate>
  <ng-container *ngIf="this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement; else noToggleElement" [ngTemplateOutlet]="dropdownToggleComponent.templateRef"></ng-container>
  <ng-template #noToggleElement>
    <button *ngIf="toggleText || dropdownToggleComponent" [mkColor]="buttonBackgroudColor" mkColorProperty="background-color" mkColorPrefix="btn" [ngClass]="buttonStyleClass" #toggleElement>
      {{toggleText}}
      <ng-container [ngTemplateOutlet]="dropdownToggleComponent?.templateRef"></ng-container>
    </button>
  </ng-template>
  <ul [ngClass]="contentStyleClass" [mkCollapseAnimation]="isCollapsed" (mkCollapseAnimation.start)="collapseStart($event)" (mkCollapseAnimation.done)="collapseDone($event)">
    <ng-container *ngIf="dropdownMenuComponent; else noDropdownMenuComponent" [ngTemplateOutlet]="dropdownMenuComponent.templateRef"></ng-container>
    <ng-template #noDropdownMenuComponent>
      <ng-content></ng-content>
    </ng-template>
  </ul>
</ng-template>

<div *ngIf="isWrapper; else noWrapper" [ngClass]="styleClass">
  <ng-container *ngTemplateOutlet="innerTemplate"></ng-container>
</div>

<ng-template #noWrapper>
  <ng-container *ngTemplateOutlet="innerTemplate"></ng-container>
</ng-template>
`,
                styles: [`.dropdown-menu{display:block}.dropdown-menu.collapsing:not(.un-collapse){transition-property:height,padding-top,padding-bottom;padding-top:0;padding-bottom:0}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
DropdownComponent.propDecorators = {
    buttonStyleClass: [{ type: Input }],
    buttonBackgroudColor: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    isCollapsed: [{ type: Input }],
    isWrapper: [{ type: Input }],
    styleClass: [{ type: Input }],
    toggleElement: [{ type: Input }],
    toggleText: [{ type: Input }],
    onCollapseStart: [{ type: Output }],
    onCollapseDone: [{ type: Output }],
    dropdownToggleComponent: [{ type: ContentChild, args: [DropdownToggleComponent,] }],
    dropdownMenuComponent: [{ type: ContentChild, args: [DropdownMenuComponent,] }],
    defaultToggleElement: [{ type: ViewChild, args: ['toggleElement',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.documentClickListener;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.listeners;
    /** @type {?} */
    DropdownComponent.prototype.buttonStyleClass;
    /** @type {?} */
    DropdownComponent.prototype.buttonBackgroudColor;
    /** @type {?} */
    DropdownComponent.prototype.contentStyleClass;
    /** @type {?} */
    DropdownComponent.prototype.isCollapsed;
    /** @type {?} */
    DropdownComponent.prototype.isWrapper;
    /** @type {?} */
    DropdownComponent.prototype.styleClass;
    /** @type {?} */
    DropdownComponent.prototype.toggleElement;
    /** @type {?} */
    DropdownComponent.prototype.toggleText;
    /** @type {?} */
    DropdownComponent.prototype.onCollapseStart;
    /** @type {?} */
    DropdownComponent.prototype.onCollapseDone;
    /** @type {?} */
    DropdownComponent.prototype.dropdownToggleComponent;
    /** @type {?} */
    DropdownComponent.prototype.dropdownMenuComponent;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.defaultToggleElement;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DropdownComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,