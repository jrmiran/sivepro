/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { removeListeners } from '../helpers';
/*
 *
 */
export class AlertComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} ngZone            [description]
     * @param {?} renderer2         [description]
     * @param {?} viewContainerRef  [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set callout(value) {
        this.type = value ? 'callout' : 'alert';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _isDismissible(value) {
        this.isDismissible = value;
        if (value) {
            this.dismissibleClass = `${this.type}-dismissible`;
        }
        else {
            this.dismissibleClass = '';
        }
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.dismissOnTimeout) {
                setTimeout(() => {
                    if (!((/** @type {?} */ (this.changeDetectorRef))).destroyed) {
                        this.remove = true;
                        this.changeDetectorRef.detectChanges();
                    }
                }, this.dismissOnTimeout);
            }
            if (this.removeButtonElement) {
                this.listeners.push(this.renderer2.listen(this.removeButtonElement.nativeElement, 'click', () => {
                    this.remove = true;
                    this.changeDetectorRef.detectChanges();
                }));
            }
        });
    }
    /**
     * \@method ngOnDesroy
     * @return {?}
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    collapseStart(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    collapseDone(event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.onCollapseDone.emit(event);
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-alert',
                template: `<div *ngIf="!removed" [mkCollapseAnimation]="remove" (mkCollapseAnimation.start)="collapseStart($event)" (mkCollapseAnimation.done)="collapseDone($event)">
  <div [mkColor]="backgroundColor" mkColorProperty="background-color" [mkColorPrefix]="type" [mkFontColor]="color" [ngClass]="[styleClass, dismissibleClass, type]">
    <button *ngIf="isDismissible" type="button" class="close" #removeButtonElement>&times;</button>
    <ng-content></ng-content>
  </div>
</div>
`,
                styles: [`.callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.callout .close{color:#000;opacity:.2}.callout .icon{margin-right:10px}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
AlertComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ViewContainerRef }
];
AlertComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    callout: [{ type: Input }],
    color: [{ type: Input }],
    dismissOnTimeout: [{ type: Input }],
    _isDismissible: [{ type: Input, args: ['isDismissible',] }],
    styleClass: [{ type: Input }],
    onCollapseStart: [{ type: Output }],
    onCollapseDone: [{ type: Output }],
    removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }],
    containerElementRef: [{ type: ViewChild, args: ['containerElementRef', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    AlertComponent.prototype.dismissibleClass;
    /** @type {?} */
    AlertComponent.prototype.isDismissible;
    /** @type {?} */
    AlertComponent.prototype.remove;
    /** @type {?} */
    AlertComponent.prototype.removed;
    /** @type {?} */
    AlertComponent.prototype.type;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.listeners;
    /** @type {?} */
    AlertComponent.prototype.backgroundColor;
    /** @type {?} */
    AlertComponent.prototype.color;
    /** @type {?} */
    AlertComponent.prototype.dismissOnTimeout;
    /** @type {?} */
    AlertComponent.prototype.styleClass;
    /** @type {?} */
    AlertComponent.prototype.onCollapseStart;
    /** @type {?} */
    AlertComponent.prototype.onCollapseDone;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.removeButtonElement;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.containerElementRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,