/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, NgZone, Output, QueryList, Renderer2, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { TabToggleDirective } from './tabs.directive';
import { removeListeners, removeSubscriptions } from '../helpers';
// @TODO Vertical tabs
/*
 *
 */
var TabHeaderComponent = /** @class */ (function () {
    // @TODO Vertical tabs
    /*
     *
     */
    function TabHeaderComponent() {
    }
    TabHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    TabHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabHeaderComponent;
}());
export { TabHeaderComponent };
if (false) {
    /** @type {?} */
    TabHeaderComponent.prototype.templateRef;
}
/*
 *
 */
var TabContentComponent = /** @class */ (function () {
    /*
     *
     */
    function TabContentComponent() {
    }
    TabContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab-content',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    TabContentComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabContentComponent;
}());
export { TabContentComponent };
if (false) {
    /** @type {?} */
    TabContentComponent.prototype.templateRef;
}
/*
 *
 */
var TabComponent = /** @class */ (function () {
    /*
     *
     */
    function TabComponent() {
        this.isActive = false;
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    TabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    TabComponent.propDecorators = {
        header: [{ type: Input }],
        isDisabled: [{ type: Input }],
        tabColor: [{ type: Input }],
        templateRef: [{ type: ViewChild, args: ['templateRef',] }],
        tabHeaderComponent: [{ type: ContentChild, args: [TabHeaderComponent,] }],
        tabContentComponent: [{ type: ContentChild, args: [TabContentComponent,] }]
    };
    return TabComponent;
}());
export { TabComponent };
if (false) {
    /** @type {?} */
    TabComponent.prototype.index;
    /** @type {?} */
    TabComponent.prototype.isActive;
    /**
     * @type {?}
     * @private
     */
    TabComponent.prototype.contentTemplateRef;
    /** @type {?} */
    TabComponent.prototype.header;
    /** @type {?} */
    TabComponent.prototype.isDisabled;
    /** @type {?} */
    TabComponent.prototype.tabColor;
    /** @type {?} */
    TabComponent.prototype.templateRef;
    /** @type {?} */
    TabComponent.prototype.tabHeaderComponent;
    /** @type {?} */
    TabComponent.prototype.tabContentComponent;
}
/*
 *
 */
var TabsHeaderComponent = /** @class */ (function () {
    /*
     *
     */
    function TabsHeaderComponent() {
    }
    TabsHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tabs-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    TabsHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabsHeaderComponent;
}());
export { TabsHeaderComponent };
if (false) {
    /** @type {?} */
    TabsHeaderComponent.prototype.templateRef;
}
/*
 *
 */
var TabsComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function TabsComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.onClose = new EventEmitter();
        this.onOpen = new EventEmitter();
    }
    Object.defineProperty(TabsComponent.prototype, "activeTabIndex", {
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.activatedTabIndex = index;
            this.changeDetectorRef.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterContentInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe(function () {
            _this.setTabIndex();
        }));
        // Open tab on load.
        this.openTabIndex();
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe(function () {
            _this.setTabsToggle();
        }));
    };
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    /**
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?}
     */
    TabsComponent.prototype.ngOnChanges = /**
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?}
     */
    function (changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    TabsComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleTab description]
     * @method toggleTab
     */
    /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    TabsComponent.prototype.openTabIndex = /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tabs) {
            this.tabs.forEach(function (tab) {
                if (_this.activatedTabIndex === tab.index || (_this.activatedTabIndex === undefined && tab.index === 0)) {
                    tab.isActive = true;
                    _this.onOpen.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    _this.onClose.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
            });
        }
    };
    /**
     * [openTab description]
     * @method openTab
     * @param event     [description]
     * @param tabToOpen [description]
     */
    /**
     * [openTab description]
     * \@method openTab
     * @param {?} event     [description]
     * @param {?} tabToOpen [description]
     * @return {?}
     */
    TabsComponent.prototype.openTab = /**
     * [openTab description]
     * \@method openTab
     * @param {?} event     [description]
     * @param {?} tabToOpen [description]
     * @return {?}
     */
    function (event, tabToOpen) {
        var _this = this;
        event.preventDefault();
        tabToOpen.isActive = true;
        this.onOpen.emit({ event: event, index: tabToOpen.index });
        this.tabs.forEach(function (tab) {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                _this.onClose.emit({ event: event, index: tab.index });
            }
        });
    };
    /**
     * [setTabIndex description]
     * @method setTabIndex
     */
    /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @private
     * @return {?}
     */
    TabsComponent.prototype.setTabIndex = /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @private
     * @return {?}
     */
    function () {
        this.tabs.forEach(function (tab, index) {
            tab.index = index;
        });
        this.changeDetectorRef.detectChanges();
    };
    /**
     * [setTabsToggle description]
     * @method setTabsToggle
     */
    /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @private
     * @return {?}
     */
    TabsComponent.prototype.setTabsToggle = /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(function () {
            _this.tabToggleDirectives.forEach(function (tabToggle) {
                _this.listeners.push(_this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', function (event) {
                    _this.openTab(event, tabToggle.tabComponent);
                    _this.changeDetectorRef.detectChanges();
                }));
            });
        });
    };
    TabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tabs',
                    template: "<div [ngClass]=\"styleClass\">\n  <ul [ngClass]=\"navStyleClass\" [class.pull-right]=\"header || tabsHeaderComponent\">\n    <li *ngFor=\"let tab of tabs\" [class.active]=\"tab.isActive\" [mkColor]=\"tab.tabColor || tabsColor\" mkColorProperty=\"border-top-color\">\n      <a *ngIf=\"!tab.isDisabled\" [mkTabToggle]=\"tab\" href=\"#\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent?.templateRef\"></ng-template>\n      </a>\n      <ng-template [ngIf]=\"tab.isDisabled\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent.templateRef\"></ng-template>\n      </ng-template>\n    </li>\n    <li *ngIf=\"tabsHeaderComponent || header\" [ngClass]=\"headerStyleClass\">\n      {{header}}\n      <ng-template *ngIf=\"!header\" [ngTemplateOutlet]=\"tabsHeaderComponent.templateRef\"></ng-template>\n    </li>\n  </ul>\n  <div [ngClass]=\"contentStyleClass\">\n    <div *ngFor=\"let tab of tabs\" class=\"tab-pane\" [class.active]=\"tab.isActive\">\n      <ng-template [ngTemplateOutlet]=\"tab.contentTemplateRef\"></ng-template>\n    </div>\n  </div>\n</div>\n",
                    styles: [".nav-tabs-custom>.nav-tabs>li{border-top-width:0}.nav-tabs-custom>.nav-tabs>li.active{border-top-width:3px}"],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    TabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    TabsComponent.propDecorators = {
        activeTabIndex: [{ type: Input }],
        header: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        navStyleClass: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        styleClass: [{ type: Input }],
        tabsColor: [{ type: Input }],
        onClose: [{ type: Output }],
        onOpen: [{ type: Output }],
        tabsHeaderComponent: [{ type: ContentChild, args: [TabsHeaderComponent,] }],
        tabs: [{ type: ContentChildren, args: [TabComponent,] }],
        tabToggleDirectives: [{ type: ViewChildren, args: [TabToggleDirective,] }]
    };
    return TabsComponent;
}());
export { TabsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.activatedTabIndex;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.listeners;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.subscriptions;
    /** @type {?} */
    TabsComponent.prototype.header;
    /** @type {?} */
    TabsComponent.prototype.headerStyleClass;
    /** @type {?} */
    TabsComponent.prototype.navStyleClass;
    /** @type {?} */
    TabsComponent.prototype.contentStyleClass;
    /** @type {?} */
    TabsComponent.prototype.styleClass;
    /** @type {?} */
    TabsComponent.prototype.tabsColor;
    /** @type {?} */
    TabsComponent.prototype.onClose;
    /** @type {?} */
    TabsComponent.prototype.onOpen;
    /** @type {?} */
    TabsComponent.prototype.tabsHeaderComponent;
    /** @type {?} */
    TabsComponent.prototype.tabs;
    /** @type {?} */
    TabsComponent.prototype.tabToggleDirectives;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    TabsComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,