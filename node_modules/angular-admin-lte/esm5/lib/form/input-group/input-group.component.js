/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input } from '@angular/core';
import { removeSubscriptions } from '../../helpers';
import { InputGroupAddonLeftDirective, InputGroupAddonRightDirective, InputGroupContentDirective, InputGroupLabelDirective } from './input-group.directive';
import { InputTextDirective } from '../input-text/input-text.directive';
/*
 *
 */
var InputGroupComponent = /** @class */ (function () {
    /*
     *
     */
    function InputGroupComponent() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe(function (value) {
            if (value.invalid) {
                _this.currentColor = _this.inputErrorColor;
                _this.currentFontColor = _this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                _this.currentColor = _this.inputValidColor;
                _this.currentFontColor = _this.inputValidFontColor;
            }
            else {
                _this.currentColor = _this.inputColor;
                _this.currentFontColor = _this.inputFontColor;
            }
        }));
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        removeSubscriptions(this.subscriptions);
    };
    InputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-input-group',
                    template: "<div [ngClass]=\"wrapperClasses\" [mkColor]=\"currentColor || inputColor\" mkColorPrefix=\"has\">\n  <label *ngIf=\"label || inputGroupLabelDirective\">\n    {{label}}\n    <ng-content select=\"mk-input-group-label\"></ng-content>\n  </label>\n  <div *ngIf=\"addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon\" class=\"input-group\">\n    <span *ngIf=\"addonLeft || inputGroupAddonLeftDirective\" class=\"input-group-addon\">\n      {{addonLeft}}\n      <ng-content select=\"mk-input-group-addon-left\"></ng-content>\n    </span>\n    <ng-content select=\"mk-input-group-content\"></ng-content>\n    <span *ngIf=\"addonRight || inputGroupAddonRightDirective\" class=\"input-group-addon\">\n      {{addonRight}}\n      <ng-content select=\"mk-input-group-addon-right\"></ng-content>\n    </span>\n  </div>\n  <ng-template #noAddon><ng-content select=\"mk-input-group-content\"></ng-content></ng-template>\n</div>\n"
                },] },
    ];
    InputGroupComponent.propDecorators = {
        addonLeft: [{ type: Input }],
        addonRight: [{ type: Input }],
        inputColor: [{ type: Input }],
        inputFontColor: [{ type: Input }],
        inputErrorColor: [{ type: Input }],
        inputErrorFontColor: [{ type: Input }],
        inputValidColor: [{ type: Input }],
        inputValidFontColor: [{ type: Input }],
        label: [{ type: Input }],
        wrapperClasses: [{ type: Input }],
        inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
        inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
        inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
        inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
        inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
    };
    return InputGroupComponent;
}());
export { InputGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.subscriptions;
    /** @type {?} */
    InputGroupComponent.prototype.currentColor;
    /** @type {?} */
    InputGroupComponent.prototype.currentFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.addonLeft;
    /** @type {?} */
    InputGroupComponent.prototype.addonRight;
    /** @type {?} */
    InputGroupComponent.prototype.inputColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.label;
    /** @type {?} */
    InputGroupComponent.prototype.wrapperClasses;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupLabelDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonLeftDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonRightDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupContentDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputTextDirective;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvZm9ybS9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsNkJBQTZCLEVBQzdCLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDekIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQVF4RTtJQUhBOztPQUVHO0lBQ0g7UUF1QlUsa0JBQWEsR0FBd0IsRUFBRSxDQUFDO1FBT3ZDLGVBQVUsR0FBRyxTQUFTLENBQUM7UUFFdkIsb0JBQWUsR0FBRyxRQUFRLENBQUM7UUFFM0Isb0JBQWUsR0FBRyxTQUFTLENBQUM7UUFHNUIsbUJBQWMsR0FBRyxZQUFZLENBQUM7SUEwQnpDLENBQUM7Ozs7SUFsQkMsZ0RBQWtCOzs7SUFBbEI7UUFBQSxpQkFhQztRQVpDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBZ0I7WUFDakYsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQztnQkFDekMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUNuRCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQztnQkFDekMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUNuRCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sS0FBSSxDQUFDLFlBQVksR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNwQyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQztZQUM5QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCx5Q0FBVzs7O0lBQVg7UUFDRSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBOURGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUsdzhCQWtCWDtpQkFDQTs7OzRCQU9FLEtBQUs7NkJBQ0wsS0FBSzs2QkFDTCxLQUFLO2lDQUNMLEtBQUs7a0NBQ0wsS0FBSztzQ0FDTCxLQUFLO2tDQUNMLEtBQUs7c0NBQ0wsS0FBSzt3QkFDTCxLQUFLO2lDQUNMLEtBQUs7MkNBRUwsWUFBWSxTQUFDLHdCQUF3QjsrQ0FDckMsWUFBWSxTQUFDLDRCQUE0QjtnREFDekMsWUFBWSxTQUFDLDZCQUE2Qjs2Q0FDMUMsWUFBWSxTQUFDLDBCQUEwQjtxQ0FDdkMsWUFBWSxTQUFDLGtCQUFrQjs7SUFvQmxDLDBCQUFDO0NBQUEsQUEvREQsSUErREM7U0F6Q1ksbUJBQW1COzs7Ozs7SUFDOUIsNENBQWdEOztJQUVoRCwyQ0FBNEI7O0lBQzVCLCtDQUFnQzs7SUFFaEMsd0NBQTJCOztJQUMzQix5Q0FBNEI7O0lBQzVCLHlDQUFnQzs7SUFDaEMsNkNBQWdDOztJQUNoQyw4Q0FBb0M7O0lBQ3BDLGtEQUFxQzs7SUFDckMsOENBQXFDOztJQUNyQyxrREFBcUM7O0lBQ3JDLG9DQUF1Qjs7SUFDdkIsNkNBQXVDOztJQUV2Qyx1REFBa0c7O0lBQ2xHLDJEQUE4Rzs7SUFDOUcsNERBQWlIOztJQUNqSCx5REFBd0c7O0lBQ3hHLGlEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHJlbW92ZVN1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcblxuaW1wb3J0IHtcbiAgSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmVcbn0gZnJvbSAnLi9pbnB1dC1ncm91cC5kaXJlY3RpdmUnO1xuXG5pbXBvcnQgeyBJbnB1dFRleHREaXJlY3RpdmUgfSBmcm9tICcuLi9pbnB1dC10ZXh0L2lucHV0LXRleHQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1pbnB1dC1ncm91cCcsXG4gIHRlbXBsYXRlOiBgPGRpdiBbbmdDbGFzc109XCJ3cmFwcGVyQ2xhc3Nlc1wiIFtta0NvbG9yXT1cImN1cnJlbnRDb2xvciB8fCBpbnB1dENvbG9yXCIgbWtDb2xvclByZWZpeD1cImhhc1wiPlxuICA8bGFiZWwgKm5nSWY9XCJsYWJlbCB8fCBpbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmVcIj5cbiAgICB7e2xhYmVsfX1cbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1pbnB1dC1ncm91cC1sYWJlbFwiPjwvbmctY29udGVudD5cbiAgPC9sYWJlbD5cbiAgPGRpdiAqbmdJZj1cImFkZG9uTGVmdCB8fCBpbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlIHx8IGFkZG9uUmlnaHQgfHwgaW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmU7IGVsc2Ugbm9BZGRvblwiIGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICA8c3BhbiAqbmdJZj1cImFkZG9uTGVmdCB8fCBpbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlXCIgY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPlxuICAgICAge3thZGRvbkxlZnR9fVxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibWstaW5wdXQtZ3JvdXAtYWRkb24tbGVmdFwiPjwvbmctY29udGVudD5cbiAgICA8L3NwYW4+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibWstaW5wdXQtZ3JvdXAtY29udGVudFwiPjwvbmctY29udGVudD5cbiAgICA8c3BhbiAqbmdJZj1cImFkZG9uUmlnaHQgfHwgaW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmVcIiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+XG4gICAgICB7e2FkZG9uUmlnaHR9fVxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibWstaW5wdXQtZ3JvdXAtYWRkb24tcmlnaHRcIj48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICA8L2Rpdj5cbiAgPG5nLXRlbXBsYXRlICNub0FkZG9uPjxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWlucHV0LWdyb3VwLWNvbnRlbnRcIj48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT5cbjwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBBcnJheTxTdWJzY3JpcHRpb24+ID0gW107XG5cbiAgcHVibGljIGN1cnJlbnRDb2xvcjogc3RyaW5nO1xuICBwdWJsaWMgY3VycmVudEZvbnRDb2xvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGFkZG9uTGVmdDogc3RyaW5nO1xuICBASW5wdXQoKSBhZGRvblJpZ2h0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlucHV0Q29sb3IgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIGlucHV0Rm9udENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlucHV0RXJyb3JDb2xvciA9ICdkYW5nZXInO1xuICBASW5wdXQoKSBpbnB1dEVycm9yRm9udENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlucHV0VmFsaWRDb2xvciA9ICdzdWNjZXNzJztcbiAgQElucHV0KCkgaW5wdXRWYWxpZEZvbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSB3cmFwcGVyQ2xhc3NlcyA9ICdmb3JtLWdyb3VwJztcblxuICBAQ29udGVudENoaWxkKElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBMYWJlbERpcmVjdGl2ZTogSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlOiBJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmU6IElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKElucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmU6IElucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKElucHV0VGV4dERpcmVjdGl2ZSkgcHVibGljIGlucHV0VGV4dERpcmVjdGl2ZTogSW5wdXRUZXh0RGlyZWN0aXZlO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmlucHV0VGV4dERpcmVjdGl2ZS5vbktleXVwLnN1YnNjcmliZSgodmFsdWU6IE5nQ29udHJvbCkgPT4ge1xuICAgICAgaWYgKHZhbHVlLmludmFsaWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSB0aGlzLmlucHV0RXJyb3JDb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udENvbG9yID0gdGhpcy5pbnB1dEVycm9yRm9udENvbG9yO1xuICAgICAgfSBlbHNlIGlmICghdmFsdWUuaW52YWxpZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHRoaXMuaW5wdXRWYWxpZENvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q29sb3IgPSB0aGlzLmlucHV0VmFsaWRGb250Q29sb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHRoaXMuaW5wdXRDb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udENvbG9yID0gdGhpcy5pbnB1dEZvbnRDb2xvcjtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICByZW1vdmVTdWJzY3JpcHRpb25zKHRoaXMuc3Vic2NyaXB0aW9ucyk7XG4gIH1cbn1cbiJdfQ==