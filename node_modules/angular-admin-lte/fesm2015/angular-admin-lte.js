import { Injectable, Component, Input, ChangeDetectorRef, NgModule, ChangeDetectionStrategy, ViewChild, ElementRef, ContentChild, NgZone, Renderer2, Directive, Output, EventEmitter, ViewChildren, InjectionToken, Optional, SkipSelf, ContentChildren, ViewContainerRef, HostListener } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router, RouterModule, NavigationStart } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { distinctUntilChanged, pluck } from 'rxjs/operators';
import { Title } from '@angular/platform-browser';
import { NgControl, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class RoutingService {
    /**
     * \@method constructor
     * @param {?} router [description]
     */
    constructor(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    /**
     * [createUrl description]
     * \@method createUrl
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static createUrl(route) {
        /** @type {?} */
        const url = route.url.map(urlSegment => urlSegment.toString()).join('/');
        return url;
    }
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static isChildrenSelfRoute(route) {
        route.routeConfig.children.forEach(child => {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        });
        return false;
    }
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @private
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    static createBreadcrumb(route, url) {
        /** @type {?} */
        let isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    }
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?}
     */
    init() {
        this.router.events.subscribe(routeEvent => {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                this.events.next(routeEvent);
                /** @type {?} */
                let route = this.router.routerState.root.snapshot;
                /** @type {?} */
                let tmpUrl = '';
                /** @type {?} */
                let url = '';
                /** @type {?} */
                let rootRoot = true;
                /** @type {?} */
                const paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = `/${RoutingService.createUrl(route)}`;
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (const key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(`:${key}`, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService.createBreadcrumb(route, url));
                    }
                }
                this.onChange.next(paths);
            }
        });
    }
}
RoutingService.decorators = [
    { type: Injectable },
];
RoutingService.ctorParameters = () => [
    { type: Router }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BreadcrumbsComponent {
    /**
     * \@method constructor
     * @param {?} routingService [description]
     * @param {?} changeDetectorRef [description]
     */
    constructor(routingService, changeDetectorRef) {
        this.routingService = routingService;
        this.changeDetectorRef = changeDetectorRef;
        this.homeIcon = 'fa fa-home';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.routingService.onChange.subscribe(value => {
            this.breadcrumbs = value;
        });
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
BreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-breadcrumbs',
                template: `<ol class="breadcrumb">
  <li *ngFor="let breadcrumb of breadcrumbs; let first = first; let last = last" [class.active]="last || !breadcrumb.url">
    <a *ngIf="breadcrumb.url" [routerLink]="breadcrumb.url">
      <i *ngIf="first" ngClass="{{homeIcon}}"></i>
      <ng-template [ngIf]="breadcrumb.data.breadcrumbs">{{breadcrumb.data.breadcrumbs}}</ng-template>
      <ng-template [ngIf]="!breadcrumb.data.breadcrumbs">{{breadcrumb.data.title}}</ng-template>
    </a>
    <ng-template [ngIf]="!breadcrumb.url">
      <i *ngIf="first" ngClass="{{homeIcon}}"></i>
      <ng-template [ngIf]="breadcrumb.data.breadcrumbs">{{breadcrumb.data.breadcrumbs}}</ng-template>
      <ng-template [ngIf]="!breadcrumb.data.breadcrumbs">{{breadcrumb.data.title}}</ng-template>
    </ng-template>
  </li>
</ol>
`,
                styles: [`.breadcrumb{float:right;background:0 0;margin-top:0;margin-bottom:0;font-size:12px;padding:7px 5px;position:absolute;top:15px;right:10px;border-radius:2px}.breadcrumb>li>a{color:#444;text-decoration:none;display:inline-block}.breadcrumb>li>a>.fa,.breadcrumb>li>a>.glyphicon,.breadcrumb>li>a>.ion{margin-right:5px}`]
            },] },
];
BreadcrumbsComponent.ctorParameters = () => [
    { type: RoutingService },
    { type: ChangeDetectorRef }
];
BreadcrumbsComponent.propDecorators = {
    homeIcon: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BreadcrumbsModule {
}
BreadcrumbsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                exports: [BreadcrumbsComponent],
                declarations: [BreadcrumbsComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class LayoutStore {
    /**
     * \@method constructor
     * @param {?} layoutConfig [description]
     */
    constructor(layoutConfig) {
        this.initialLayoutState = {
            isSidebarLeftCollapsed: false,
            isSidebarLeftExpandOnOver: false,
            isSidebarLeftMouseOver: false,
            isSidebarLeftMini: true,
            sidebarRightSkin: 'dark',
            isSidebarRightCollapsed: true,
            isSidebarRightOverContent: true,
            layout: 'normal',
            sidebarLeftMenu: [],
            sidebarLeftMenuActiveUrl: '',
            skin: 'blue'
        };
        if (layoutConfig) {
            this.initialLayoutState = Object.assign(this.initialLayoutState, layoutConfig);
        }
        this._layoutState = new BehaviorSubject(this.initialLayoutState);
        this.layoutState = this._layoutState.asObservable();
    }
    /**
     * [windowInnerHeight description]
     * \@method windowInnerHeight
     * @return {?} [description]
     */
    get windowInnerHeight() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('windowInnerHeight'), distinctUntilChanged())));
    }
    /**
     * [windowInnerWidth description]
     * \@method windowInnerWidth
     * @return {?} [description]
     */
    get windowInnerWidth() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('windowInnerWidth'), distinctUntilChanged())));
    }
    /**
     * [isSidebarLeftCollapsed description]
     * @return {?} [description]
     */
    get isSidebarLeftCollapsed() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftCollapsed'), distinctUntilChanged())));
    }
    /**
     * [isSidebarLeftExpandOnOver description]
     * \@method isSidebarLeftExpandOnOver
     * @return {?} [description]
     */
    get isSidebarLeftExpandOnOver() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftExpandOnOver'), distinctUntilChanged())));
    }
    /**
     * [isSidebarLeftMouseOver description]
     * \@method isSidebarLeftMouseOver
     * @return {?} [description]
     */
    get isSidebarLeftMouseOver() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftMouseOver'), distinctUntilChanged())));
    }
    /**
     * [isSidebarLeftMini description]
     * \@method isSidebarLeftMini
     * @return {?} [description]
     */
    get isSidebarLeftMini() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftMini'), distinctUntilChanged())));
    }
    /**
     * [sidebarRightSkin description]
     * \@method sidebarRightSkin
     * @return {?} [description]
     */
    get sidebarRightSkin() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarRightSkin'), distinctUntilChanged())));
    }
    /**
     * [isSidebarRightCollapsed description]
     * @return {?} [description]
     */
    get isSidebarRightCollapsed() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarRightCollapsed'), distinctUntilChanged())));
    }
    /**
     * [isSidebarRightOverContent description]
     * \@method isSidebarRightOverContent
     * @return {?} [description]
     */
    get isSidebarRightOverContent() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarRightOverContent'), distinctUntilChanged())));
    }
    /**
     * [sidebarLeftMenu description]
     * \@method sidebarLeftMenu
     * @return {?} [description]
     */
    get sidebarLeftMenu() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftMenu'), distinctUntilChanged())));
    }
    /**
     * [sidebarLeftMenuActiveUrl description]
     * \@method sidebarLeftMenuActiveUrl
     * @return {?} [description]
     */
    get sidebarLeftMenuActiveUrl() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftMenuActiveUrl'), distinctUntilChanged())));
    }
    /**
     * [sidebarLeftElementHeight description]
     * \@method sidebarLeftElementHeight
     * @return {?} [description]
     */
    get sidebarLeftElementHeight() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftElementHeight'), distinctUntilChanged())));
    }
    /**
     * [layoutType description]
     * \@method layoutType
     * @return {?} [description]
     */
    get layout() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('layout'), distinctUntilChanged())));
    }
    /**
     * [skin description]
     * \@method skin
     * @return {?} [description]
     */
    get skin() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('skin'), distinctUntilChanged())));
    }
    /**
     * [wrapperClasses description]
     * \@method wrapperClasses
     * @return {?} [description]
     */
    get wrapperClasses() {
        return (/** @type {?} */ (this.layoutState.pipe(pluck('wrapperClasses'), distinctUntilChanged())));
    }
    /**
     * [sidebarLeftCollapsed description]
     * \@method sidebarLeftCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarLeftCollapsed(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftCollapsed: value }));
    }
    /**
     * [sidebarLeftExpandOnOver description]
     * \@method sidebarLeftExpandOnOver
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarLeftExpandOnOver(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftExpandOnOver: value }));
    }
    /**
     * [setSidebarLeftElementHeight description]
     * \@method setSidebarLeftElementHeight
     * @param {?} value [description]
     * @return {?}
     */
    setSidebarLeftElementHeight(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftElementHeight: value }));
    }
    /**
     * [setSidebarRightSkin description]
     * \@method setSidebarRightSkin
     * @param {?=} value [description]
     * @return {?}
     */
    setSidebarRightSkin(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarRightSkin: value }));
    }
    /**
     * [sidebarLeftMouseOver description]
     * \@method sidebarLeftMouseOver
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarLeftMouseOver(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMouseOver: value }));
    }
    /**
     * [sidebarLeftMini description]
     * \@method sidebarLeftMini
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarLeftMini(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMini: value }));
    }
    /**
     * [sidebarRightCollapsed description]
     * \@method sidebarRightCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarRightCollapsed(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightCollapsed: value }));
    }
    /**
     * [sidebarRightOverContent description]
     * \@method sidebarRightOverContent
     * @param {?=} value [description]
     * @return {?}
     */
    sidebarRightOverContent(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightOverContent: value }));
    }
    /**
     * [setSidebarLeftMenu description]
     * \@method setSidebarLeftMenu
     * @param {?} value [description]
     * @return {?}
     */
    setSidebarLeftMenu(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftMenu: value }));
    }
    /**
     * [setSidebarLeftMenuActiveUrl description]
     * \@method setSidebarLeftMenuActiveUrl
     * @param {?} value [description]
     * @return {?}
     */
    setSidebarLeftMenuActiveUrl(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftMenuActiveUrl: value }));
    }
    /**
     * [setLayout description]
     * \@method setLayout
     * @param {?} value [description]
     * @return {?}
     */
    setLayout(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { layout: value }));
    }
    /**
     * [setSkin description]
     * \@method setSkin
     * @param {?} value [description]
     * @return {?}
     */
    setSkin(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { skin: value }));
    }
    /**
     * [setWrapperClasses description]
     * \@method setWrapperClasses
     * @param {?} value [description]
     * @return {?}
     */
    setWrapperClasses(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { wrapperClasses: value }));
    }
    /**
     * [setWindowInnerHeight description]
     * \@method setWindowInnerHeight
     * @param {?} value [description]
     * @return {?}
     */
    setWindowInnerHeight(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerHeight: value }));
    }
    /**
     * [setWindowInnerWidth description]
     * \@method setWindowInnerWidth
     * @param {?} value [description]
     * @return {?}
     */
    setWindowInnerWidth(value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerWidth: value }));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarRightService {
    /**
     * [scrollHeight description]
     * \@method scrollHeight
     * @return {?} [description]
     */
    get scrollHeight() {
        return this.elementRef ? this.elementRef.nativeElement.scrollHeight : null;
    }
}
SidebarRightService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HeaderService {
    /**
     * [offsetHeight description]
     * \@method offsetHeight
     * @return {?} [description]
     */
    get offsetHeight() {
        return this.elementRef.nativeElement.offsetHeight;
    }
}
HeaderService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterService {
    /**
     * [offsetHeight description]
     * \@method offsetHeight
     * @return {?} [description]
     */
    get offsetHeight() {
        return this.elementRef.nativeElement.offsetHeight;
    }
}
FooterService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * [throttle description]
 * \@method throttle
 * @param {?} callback [description]
 * @param {?} delay    [description]
 * @return {?} [description]
 */
function throttle(callback, delay) {
    /** @type {?} */
    let timeout = null;
    return (...args) => {
        if (!timeout) {
            timeout = setTimeout(() => {
                callback.call(this, ...args);
                timeout = null;
            }, delay);
        }
    };
}
/**
 * [removeSubscriptions description]
 * \@method removeSubscriptions
 * @param {?} subscriptions
 * @return {?}
 */
function removeSubscriptions(subscriptions) {
    if (subscriptions) {
        subscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
    }
    return [];
}
/**
 * [removeListeners description]
 * \@method removeListeners
 * @param {?} listeners
 * @return {?}
 */
function removeListeners(listeners) {
    if (listeners) {
        listeners.forEach((listener) => {
            listener();
        });
    }
    return [];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ContentComponent {
    /**
     * \@method constructor
     * @param {?} layoutStore
     * @param {?} routingService
     * @param {?} titleService
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     * @param {?} sidebarRightService
     * @param {?} headerService
     * @param {?} footerService
     * @param {?} router
     */
    constructor(layoutStore, routingService, titleService, elementRef, changeDetectorRef, sidebarRightService, headerService, footerService, router) {
        this.layoutStore = layoutStore;
        this.routingService = routingService;
        this.titleService = titleService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.sidebarRightService = sidebarRightService;
        this.headerService = headerService;
        this.footerService = footerService;
        this.router = router;
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.titleTag = this.titleService.getTitle();
        this.subscriptions.push(this.routingService.onChange.subscribe((value) => {
            if (value && value[value.length - 1]) {
                this.titleService.setTitle(this.getTitle(value[value.length - 1].data['title']));
                this.header = value[value.length - 1].data['title'];
                this.description = value[value.length - 1].data['description'];
            }
            this.changeDetectorRef.markForCheck();
        }));
        this.subscriptions.push(this.router.events.subscribe((routeEvent) => {
            if (routeEvent instanceof NavigationStart) {
                this.navigationEnd = false;
            }
            if (routeEvent instanceof NavigationEnd) {
                this.navigationEnd = true;
                this.setContentMinHeight();
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftElementHeight.subscribe((value) => {
            this.sidebarLeftHeight = value;
            this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.layout.subscribe((value) => {
            this.layout = value;
            this.setContentMinHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe((value) => {
            this.windowInnerHeight = value;
            this.setContentMinHeight();
        }));
        this.heightStyle = this.windowInnerHeight;
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions = removeSubscriptions(this.subscriptions);
    }
    /**
     * [scrollHeight description]
     * \@method scrollHeight
     * @return {?} [description]
     */
    get scrollHeight() {
        return this.contentInnerElement.nativeElement.scrollHeight;
    }
    /**
     * [getTitle description]
     * \@method getTitle
     * @private
     * @param {?} title [description]
     * @return {?} [description]
     */
    getTitle(title) {
        return title ? `${title} - ${this.titleTag}` : this.titleTag;
    }
    /**
     * [setMinHeight description]
     * \@method setMinHeight
     * @private
     * @return {?}
     */
    setContentMinHeight() {
        if (this.navigationEnd) {
            /** @type {?} */
            let heightStyle;
            /** @type {?} */
            const headerFooterOffsetHeight = this.headerService.offsetHeight + this.footerService.offsetHeight;
            if (this.layout === 'fixed') {
                heightStyle = this.windowInnerHeight - this.footerService.offsetHeight;
            }
            else {
                /** @type {?} */
                const sidebarRight = this.sidebarRightService.scrollHeight ?
                    this.sidebarRightService.scrollHeight - this.headerService.offsetHeight : 0;
                heightStyle = Math.max(this.windowInnerHeight - headerFooterOffsetHeight, this.sidebarLeftHeight - this.headerService.offsetHeight, sidebarRight);
            }
            if (heightStyle && heightStyle !== this.heightStyle) {
                if (this.scrollHeight > heightStyle) {
                    heightStyle = null;
                }
                this.heightStyle = heightStyle;
                this.changeDetectorRef.detectChanges();
            }
        }
    }
}
ContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-content',
                template: `<div class="content-wrapper" [style.min-height.px]="heightStyle">
  <div #contentInnerElement class="content-inner">
    <ng-content select="[mk-layout-content-before-header]"></ng-content>
    <section *ngIf="header || description" class="content-header">
      <h1>
        {{header}}
        <small *ngIf="description">{{description}}</small>
      </h1>
      <mk-breadcrumbs></mk-breadcrumbs>
    </section>
    <ng-content select="[mk-layout-content-after-header]"></ng-content>
    <section class="content">
      <ng-content></ng-content>
    </section>
  </div>
</div>
`,
                styles: [`:host{display:block}.content-wrapper{position:relative}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
ContentComponent.ctorParameters = () => [
    { type: LayoutStore },
    { type: RoutingService },
    { type: Title },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: SidebarRightService },
    { type: HeaderService },
    { type: FooterService },
    { type: Router }
];
ContentComponent.propDecorators = {
    contentInnerElement: [{ type: ViewChild, args: ['contentInnerElement',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ContentModule {
}
ContentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, BreadcrumbsModule],
                exports: [ContentComponent],
                declarations: [ContentComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Footer Left
 */
class FooterLeftComponent {
}
FooterLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer-left',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
FooterLeftComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/**
 * Footer Right
 */
class FooterRightComponent {
}
FooterRightComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer-right',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
FooterRightComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
class FooterComponent {
    /**
     * @param {?} elementRef
     * @param {?} footerService
     */
    constructor(elementRef, footerService) {
        this.elementRef = elementRef;
        this.footerService = footerService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.footerService.elementRef = this.elementRef;
    }
}
FooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-footer',
                template: `<footer class="main-footer">
  <div class="pull-right hidden-xs">
    <ng-template [ngTemplateOutlet]="footerRightComponent?.templateRef"></ng-template>
  </div>
  <ng-template [ngTemplateOutlet]="footerLeftComponent?.templateRef"></ng-template>
</footer>
`,
                styles: [`:host{display:block}`]
            },] },
];
FooterComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: FooterService }
];
FooterComponent.propDecorators = {
    footerLeftComponent: [{ type: ContentChild, args: [FooterLeftComponent,] }],
    footerRightComponent: [{ type: ContentChild, args: [FooterRightComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterModule {
}
FooterModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FooterComponent, FooterLeftComponent, FooterRightComponent],
                declarations: [FooterComponent, FooterLeftComponent, FooterRightComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Header Logo
 */
class HeaderLogoComponent {
}
HeaderLogoComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header-logo',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
HeaderLogoComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/**
 * Header Logo Mini
 */
class HeaderLogoMiniComponent {
}
HeaderLogoMiniComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header-logo-mini',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
HeaderLogoMiniComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/**
 * Header
 */
class HeaderComponent {
    /**
     * \@method constructor
     * @param {?} layoutStore [description]
     * @param {?} ngZone      [description]
     * @param {?} renderer2   [description]
     * @param {?} elementRef   [description]
     * @param {?} headerService   [description]
     */
    constructor(layoutStore, ngZone, renderer2, elementRef, headerService) {
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.headerService = headerService;
        this.listeners = [];
        this.subscriptions = [];
        this.isSidebarLeftToggle = true;
        this.isSidebarRightToggle = true;
        this.logoLink = '/';
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.headerService.elementRef = this.headerElement;
        if (this.sidebarLeftToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe((value) => {
                this.isSidebarLeftCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(() => {
                this.listeners.push(this.renderer2.listen(this.sidebarLeftToggleElement.nativeElement, 'click', (event) => {
                    event.preventDefault();
                    this.layoutStore.sidebarLeftCollapsed(!this.isSidebarLeftCollapsed);
                }));
            });
        }
        if (this.sidebarRightToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe((value) => {
                this.isSidebarRightCollapsed = value;
            }));
            this.ngZone.runOutsideAngular(() => {
                this.listeners.push(this.renderer2.listen(this.sidebarRightToggleElement.nativeElement, 'click', (event) => {
                    event.preventDefault();
                    this.layoutStore.sidebarRightCollapsed(!this.isSidebarRightCollapsed);
                }));
            });
        }
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    }
}
HeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-header',
                template: `<header #headerElement class="main-header">
  <a [routerLink]="logoLink" class="logo">
    <span class="logo-mini"><ng-template [ngTemplateOutlet]="headerLogoMiniComponent?.templateRef"></ng-template></span>
    <span class="logo-lg"><ng-template [ngTemplateOutlet]="headerLogoComponent?.templateRef"></ng-template></span>
  </a>
  <nav class="navbar navbar-static-top">
    <a *ngIf="isSidebarLeftToggle" #sidebarLeftToggleElement href="#" class="sidebar-toggle">
      <span class="sr-only">Toggle navigation</span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </a>
    <div *ngIf="isSidebarRightToggle" class="sidebar-right-toggle">
      <a #sidebarRightToggleElement href="#"><i class="fa fa-gears"></i></a>
    </div>
    <ng-content></ng-content>
  </nav>
</header>
`,
                styles: [`:host{display:block}.sidebar-right-toggle{float:right}.sidebar-right-toggle a{padding:15px;display:block;line-height:20px;cursor:pointer}`]
            },] },
];
HeaderComponent.ctorParameters = () => [
    { type: LayoutStore },
    { type: NgZone },
    { type: Renderer2 },
    { type: ElementRef },
    { type: HeaderService }
];
HeaderComponent.propDecorators = {
    isSidebarLeftToggle: [{ type: Input }],
    isSidebarRightToggle: [{ type: Input }],
    logoLink: [{ type: Input }],
    headerLogoComponent: [{ type: ContentChild, args: [HeaderLogoComponent,] }],
    headerLogoMiniComponent: [{ type: ContentChild, args: [HeaderLogoMiniComponent,] }],
    headerElement: [{ type: ViewChild, args: ['headerElement',] }],
    sidebarLeftToggleElement: [{ type: ViewChild, args: ['sidebarLeftToggleElement',] }],
    sidebarRightToggleElement: [{ type: ViewChild, args: ['sidebarRightToggleElement',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HeaderModule {
}
HeaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                exports: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent],
                declarations: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class CollapseAnimationDirective {
    /**
     * \@method constructor
     * @param {?} elementRef [description]
     * @param {?} ngZone     [description]
     * @param {?} renderer2  [description]
     */
    constructor(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        this.startEventEmitter = new EventEmitter();
        this.doneEventEmitter = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _isCollapsed(value) {
        this.lastIsCollapsed = this.isCollapsed;
        this.isCollapsed = value;
        if (!this.firstStart) {
            this.emit('start');
            if (value) {
                this.collapse();
            }
            else if (value === false) {
                this.unCollapse();
            }
        }
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', `${this.collapseAnimationDuration}ms`);
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    }
    /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    ngAfterContentInit() {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    }
    /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    ngOnDestroy() {
        if (this.listener) {
            this.listener();
        }
    }
    /**
     * [subscriptions description]
     * \@method subscriptions
     * @private
     * @return {?}
     */
    subscriptions() {
        this.ngZone.runOutsideAngular(() => {
            this.listener = this.renderer2.listen(this.elementRef.nativeElement, 'transitionend', () => {
                if (!this.isCollapsed) {
                    this.renderer2.removeClass(this.elementRef.nativeElement, 'un-collapse');
                    this.renderer2.removeClass(this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame(() => {
                    this.renderer2.removeStyle(this.elementRef.nativeElement, 'height');
                    this.emit('done');
                    this.transitioning = false;
                });
            });
        });
    }
    /**
     * [unCollapse description]
     * \@method unCollapse
     * @private
     * @return {?}
     */
    unCollapse() {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `${this.elementRef.nativeElement.scrollHeight}px`);
    }
    /**
     * [collapse description]
     * \@method collapse
     * @private
     * @return {?}
     */
    collapse() {
        requestAnimationFrame(() => {
            if (!this.transitioning) {
                this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `${this.elementRef.nativeElement.offsetHeight}px`);
                this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
            }
            this.transitioning = true;
            requestAnimationFrame(() => {
                this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `0px`);
            });
        });
    }
    /**
     * @private
     * @param {?} phaseName
     * @return {?}
     */
    emit(phaseName) {
        /** @type {?} */
        const event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'mkCollapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    }
}
CollapseAnimationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkCollapseAnimation]'
            },] },
];
CollapseAnimationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
CollapseAnimationDirective.propDecorators = {
    collapseAnimationDuration: [{ type: Input }],
    collapseAnimationTiming: [{ type: Input }],
    _isCollapsed: [{ type: Input, args: ['mkCollapseAnimation',] }],
    startEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.start',] }],
    doneEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.done',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AnimationsModule {
}
AnimationsModule.decorators = [
    { type: NgModule, args: [{
                exports: [CollapseAnimationDirective],
                declarations: [CollapseAnimationDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class SidebarLeftToggleDirective {
    /**
     * \@method constructor
     * @param {?} elementRef [description]
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
SidebarLeftToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkMenuToggle]'
            },] },
];
SidebarLeftToggleDirective.ctorParameters = () => [
    { type: ElementRef }
];
SidebarLeftToggleDirective.propDecorators = {
    item: [{ type: Input, args: ['mkMenuToggle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WrapperService {
}
WrapperService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarLeftComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef  [description]
     * @param {?} layoutStore        [description]
     * @param {?} ngZone             [description]
     * @param {?} renderer2          [description]
     * @param {?} router             [description]
     * @param {?} routingService     [description]
     * @param {?} wrapperService     [description]
     * @param {?} headerService      [description]
     */
    constructor(changeDetectorRef, layoutStore, ngZone, renderer2, router, routingService, wrapperService, headerService) {
        this.changeDetectorRef = changeDetectorRef;
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.router = router;
        this.routingService = routingService;
        this.wrapperService = wrapperService;
        this.headerService = headerService;
        this.collapsedItems = [];
        this.activatedItems = [];
        this.toggleListeners = [];
        this.listeners = [];
        this.itemsByIds = {};
        this.runningAnimations = 0;
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(value => {
            this.menu = value;
            this.monkeyPatchMenu(this.menu);
            if (this.initialized) {
                this.setMenuListeners(this.activeUrl);
                this.setSidebarListeners();
                this.setMenuTogglesListeners();
            }
            this.initialized = true;
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenuActiveUrl.subscribe(value => {
            this.activeUrl = value;
            this.setMenuListeners(value);
        }));
        this.subscriptions.push(this.routingService.events.subscribe((event) => {
            if (event instanceof NavigationEnd) {
                this.activeUrl = event.url;
                this.setMenuListeners(event.url);
            }
        }));
        this.setSidebarListeners();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.setMenuTogglesListeners();
        this.checkMenuWithoutChildren();
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
        this.toggleListeners = removeListeners(this.toggleListeners);
    }
    /**
     * [setSidebarListeners description]
     * \@method setSidebarListeners
     * @return {?}
     */
    setSidebarListeners() {
        this.subscriptions.push(this.layoutStore.layout.subscribe((value) => {
            this.layout = value;
            this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe((value) => {
            this.windowInnerHeight = value;
            this.setSidebarHeight();
        }));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe(() => {
            this.changeDetectorRef.detectChanges();
        }));
        this.ngZone.runOutsideAngular(() => {
            this.listeners.push(this.renderer2.listen(this.sidebarElement.nativeElement, 'mouseenter', () => {
                this.layoutStore.sidebarLeftMouseOver(true);
            }));
            this.listeners.push(this.renderer2.listen(this.sidebarElement.nativeElement, 'mouseleave', () => {
                this.layoutStore.sidebarLeftMouseOver(false);
            }));
        });
        this.subscriptions.push(this.layoutStore.windowInnerWidth.subscribe((value) => {
            this.windowInnerWidth = value;
            if (!this.isSidebarLeftCollapsed && this.windowInnerWidth <= 767) {
                this.layoutStore.sidebarLeftCollapsed(true);
            }
            else if (this.windowInnerWidth > 767 && this.isSidebarLeftCollapsed && !this.isSidebarLeftExpandOnOver) {
                this.layoutStore.sidebarLeftCollapsed(false);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMouseOver.subscribe((value) => {
            this.isSidebarLeftMouseOver = value;
            if (this.isSidebarLeftExpandOnOver) {
                this.layoutStore.sidebarLeftCollapsed(!value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftExpandOnOver.subscribe((value) => {
            this.isSidebarLeftExpandOnOver = value;
            if (this.windowInnerWidth > 767 && this.isSidebarLeftCollapsed !== undefined) {
                this.layoutStore.sidebarLeftCollapsed(value);
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe((value) => {
            this.isSidebarLeftCollapsed = value;
            if (this.windowInnerWidth <= 767) {
                if (value) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
                else {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
            }
            else {
                if (this.isSidebarLeftExpandOnOver && !this.isSidebarLeftMouseOver && !value) {
                    this.layoutStore.sidebarLeftExpandOnOver(false);
                }
                if (value) {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (this.isSidebarLeftExpandOnOver) {
                        this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
                else {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (this.isSidebarLeftExpandOnOver) {
                        this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMini.subscribe((value) => {
            if (value) {
                this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
            else {
                this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
        }));
    }
    /**
     * [setMenuListeners description]
     * \@method setMenuListeners
     * @param {?} url
     * @return {?}
     */
    setMenuListeners(url) {
        if (url === '/') {
            this.activeItems(url);
            this.changeDetectorRef.detectChanges();
        }
        else {
            /** @type {?} */
            const primaryOutlet = this.router.parseUrl(url).root.children[PRIMARY_OUTLET];
            if (primaryOutlet) {
                this.activeItems(primaryOutlet.toString());
                this.changeDetectorRef.detectChanges();
            }
        }
        if (this.windowInnerWidth <= 767 || this.isSidebarLeftExpandOnOver) {
            this.layoutStore.sidebarLeftCollapsed(true);
        }
    }
    /**
     * [getIconClasses description]
     * \@method getIconClasses
     * @param {?} item [description]
     * @return {?} [description]
     */
    getIconClasses(item) {
        if (item.iconClasses || item.iconClasses === '') {
            return item.iconClasses;
        }
        else {
            return 'fa fa-circle-o';
        }
    }
    /**
     * [visibilityStateStart description]
     * \@method visibilityStateStart
     * @param {?} event [description]
     * @return {?}
     */
    visibilityStateStart(event) {
        this.runningAnimations++;
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.runningAnimations--;
                if (!this.runningAnimations) {
                    this.layoutStore.setSidebarLeftElementHeight(this.sidebarElement.nativeElement.offsetHeight);
                }
            }, event.totalTime);
        });
    }
    /**
     * [uncollapseItemParents description]
     * \@method uncollapseItemParents
     * @private
     * @param {?} item           [description]
     * @param {?=} isActive       [description]
     * @return {?}
     */
    uncollapseItemParents(item, isActive = false) {
        if (isActive) {
            item.isActive = true;
            this.activatedItems.push(item);
        }
        item.isCollapsed = false;
        this.collapsedItems.push(item);
        if (item.parentId) {
            this.uncollapseItemParents(this.itemsByIds[item.parentId], isActive);
        }
    }
    /**
     * [findItemsByUrl description]
     * \@method findItemsByUrl
     * @private
     * @param {?} url   [description]
     * @param {?} items [description]
     * @param {?=} returnItems [description]
     * @return {?} [description]
     */
    findItemsByUrl(url, items, returnItems = []) {
        items.forEach((item) => {
            if (item.route === url) {
                returnItems.push(item);
            }
            else if (item.children) {
                this.findItemsByUrl(url, item.children, returnItems);
            }
        });
        return returnItems;
    }
    /**
     * [activeItems description]
     * \@method activeItems
     * @private
     * @param {?} url [description]
     * @return {?}
     */
    activeItems(url) {
        this.activatedItems.forEach((item) => {
            item.isActive = false;
        });
        this.activatedItems = [];
        this.collapsedItems.forEach((item) => {
            item.isActive = false;
            item.isCollapsed = true;
        });
        this.collapsedItems = [];
        /** @type {?} */
        const items = this.findItemsByUrl(url, this.menu);
        items.forEach(item => {
            item.isActive = true;
            this.uncollapseItemParents(item, true);
            this.activatedItems.push(item);
        });
    }
    /**
     * [monkeyPatchMenu description]
     * \@method monkeyPatchMenu
     * @private
     * @param {?} items    [description]
     * @param {?=} parentId [description]
     * @return {?}
     */
    monkeyPatchMenu(items, parentId) {
        items.forEach((item, index) => {
            item.id = parentId ? Number(parentId + '' + (index + 1)) : index + 1;
            if (parentId) {
                item.parentId = parentId;
            }
            if (!item.disableCollapse) {
                item.isCollapsed = true;
            }
            item.isActive = false;
            if (parentId || item.children) {
                this.itemsByIds[item.id] = item;
            }
            if (item.children) {
                this.monkeyPatchMenu(item.children, item.id);
            }
        });
    }
    /**
     * [setMenuTogglesListeners description]
     * \@method setMenuTogglesListeners
     * @private
     * @return {?}
     */
    setMenuTogglesListeners() {
        this.toggleListeners = removeListeners(this.toggleListeners);
        this.ngZone.runOutsideAngular(() => {
            this.sidebarLeftToggleDirectives.forEach((menuToggle) => {
                this.toggleListeners.push(this.renderer2.listen(menuToggle.elementRef.nativeElement, 'click', (event) => {
                    event.preventDefault();
                    if (menuToggle.item.isCollapsed) {
                        this.collapsedItems.forEach((item) => {
                            if (!item.disableCollapse) {
                                item.isCollapsed = true;
                            }
                        });
                        this.collapsedItems = [];
                        this.uncollapseItemParents(menuToggle.item);
                    }
                    else {
                        menuToggle.item.isCollapsed = !menuToggle.item.isCollapsed;
                    }
                    this.changeDetectorRef.detectChanges();
                }));
            });
        });
    }
    /**
     * [checkMenuWithoutChildren description]
     * \@method checkMenuWithoutChildren
     * @private
     * @return {?}
     */
    checkMenuWithoutChildren() {
        /** @type {?} */
        let menuHaveChildren;
        this.menu.forEach((item) => {
            if (item.children) {
                return menuHaveChildren = true;
            }
        });
        if (!menuHaveChildren) {
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.layoutStore.setSidebarLeftElementHeight(this.sidebarElement.nativeElement.offsetHeight);
                });
            });
        }
    }
    /**
     * [setSidebarHeight description]
     * \@method setSidebarHeight
     * @private
     * @return {?}
     */
    setSidebarHeight() {
        if (this.layout === 'fixed') {
            /** @type {?} */
            const height = this.windowInnerHeight - this.headerService.offsetHeight;
            if (height && height !== this.sidebarHeight) {
                this.sidebarHeight = height;
                this.sidebarOverflow = 'auto';
                this.changeDetectorRef.detectChanges();
            }
        }
        else if (this.sidebarHeight) {
            this.sidebarOverflow = this.sidebarHeight = null;
            this.changeDetectorRef.detectChanges();
        }
    }
}
SidebarLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-left',
                template: `<aside class="main-sidebar">
  <section class="sidebar" #sidebarElement [style.height.px]="sidebarHeight" [style.overflow]="sidebarOverflow">
    <ng-content></ng-content>
  	<ul class="sidebar-menu">
      <ng-container *ngFor="let item of menu">
        <ng-container *ngTemplateOutlet="sidebarInner; context: {item: item}"></ng-container>
      </ng-container>
  	</ul>
  </section>
</aside>

<ng-template #sidebarInner let-item="item">
  <li [class.active]="item.isActive" [class.header]="item.separator" [class.menu-open]="!item.isCollapsed">
    <span *ngIf="item.separator">{{item.label}}</span>
    <a *ngIf="!item.separator && item.route" [routerLink]="item.route">
    	<i [class]="getIconClasses(item)"></i><span>{{item.label}}</span>
    	<span *ngIf="item.children || item.pullRights" class="pull-right-container">
    		<span *ngFor="let rightItem of item.pullRights" class="pull-right {{rightItem.classes}}">{{rightItem.text}}</span>
    	  <i *ngIf="!item.pullRights" class="fa fa-angle-left pull-right"></i>
    	</span>
    </a>
    <a *ngIf="!item.separator && !item.route" href="#" [mkMenuToggle]="item">
    	<i [class]="getIconClasses(item)"></i><span>{{item.label}}</span>
    	<span *ngIf="item.children || item.pullRights" class="pull-right-container">
    		<span *ngFor="let rightItem of item.pullRights" class="pull-right {{rightItem.classes}}">{{rightItem.text}}</span>
    	  <i *ngIf="!item.pullRights" class="fa fa-angle-left pull-right"></i>
    	</span>
    </a>
    <ul *ngIf="item.children" [mkCollapseAnimation]="item.isCollapsed" (mkCollapseAnimation.start)="visibilityStateStart($event)" class="treeview-menu">
      <ng-container *ngFor="let item of item.children">
        <ng-container *ngTemplateOutlet="sidebarInner; context: {item: item}"></ng-container>
      </ng-container>
    </ul>
  </li>
</ng-template>
`,
                styles: [`.treeview-menu.collapse{display:none}.treeview-menu,.treeview-menu.collapse.in{display:block}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
SidebarLeftComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: LayoutStore },
    { type: NgZone },
    { type: Renderer2 },
    { type: Router },
    { type: RoutingService },
    { type: WrapperService },
    { type: HeaderService }
];
SidebarLeftComponent.propDecorators = {
    sidebarElement: [{ type: ViewChild, args: ['sidebarElement',] }],
    sidebarLeftToggleDirectives: [{ type: ViewChildren, args: [SidebarLeftToggleDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarLeftModule {
}
SidebarLeftModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, AnimationsModule],
                exports: [SidebarLeftComponent],
                declarations: [SidebarLeftToggleDirective, SidebarLeftComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarRightComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     * @param {?} layoutStore
     * @param {?} sidebarRightService
     * @param {?} wrapperService
     */
    constructor(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(value => {
            this.isSidebarRightCollapsed = value;
            if (!value) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar-open');
                if (!this.isSidebarRightOverContent) {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'control-sidebar-open');
                if (!this.isSidebarRightOverContent) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe((value) => {
            this.isSidebarRightOverContent = value;
            if (!this.isSidebarRightCollapsed) {
                if (value) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe((value) => {
            if (this.skin !== value) {
                this.renderer2.removeClass(this.elementRef.nativeElement, `control-sidebar-${this.skin}`);
            }
            this.skin = value;
            this.renderer2.addClass(this.elementRef.nativeElement, `control-sidebar-${value}`);
        }));
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    }
}
SidebarRightComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-right',
                template: `<div #sidebarContentElement class="control-sidebar-content">
  <ng-content></ng-content>
</div>
<div class="control-sidebar-bg"></div>
`,
                styles: [`:host{display:block;height:100%}.control-sidebar-bg{z-index:-1}/deep/ .tab-content{padding:10px 15px}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
SidebarRightComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LayoutStore },
    { type: SidebarRightService },
    { type: WrapperService }
];
SidebarRightComponent.propDecorators = {
    sidebarContentElement: [{ type: ViewChild, args: ['sidebarContentElement',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarRightModule {
}
SidebarRightModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SidebarRightComponent],
                declarations: [SidebarRightComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WrapperComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     * @param {?} layoutStore
     * @param {?} wrapperService
     * @param {?} ngZone
     */
    constructor(elementRef, renderer2, layoutStore, wrapperService, ngZone) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.wrapperService = wrapperService;
        this.ngZone = ngZone;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * [ngOnInit description]
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.layoutStore.setWindowInnerHeight(window.innerHeight);
        this.layoutStore.setWindowInnerWidth(window.innerWidth);
        this.wrapperService.wrapperElementRef = this.elementRef;
        this.subscriptions.push(this.layoutStore.wrapperClasses.subscribe((value) => {
            this.classes = value ? value : null;
        }));
        this.ngZone.runOutsideAngular(() => {
            this.listeners.push(this.renderer2.listen('window', 'resize', throttle(() => {
                this.layoutStore.setWindowInnerHeight(window.innerHeight);
                this.layoutStore.setWindowInnerWidth(window.innerWidth);
            }, 250)));
        });
        this.subscriptions.push(this.layoutStore.layout.subscribe((value) => {
            value === 'fixed' ? this.renderer2.addClass(this.elementRef.nativeElement, 'fixed') :
                this.renderer2.removeClass(this.elementRef.nativeElement, 'fixed');
            value === 'boxed' ? this.renderer2.addClass(this.elementRef.nativeElement, 'layout-boxed') :
                this.renderer2.removeClass(this.elementRef.nativeElement, 'layout-boxed');
        }));
        this.subscriptions.push(this.layoutStore.skin.subscribe((value) => {
            if (value) {
                if (this.skin && this.skin !== value) {
                    this.renderer2.removeClass(this.elementRef.nativeElement, `skin-${this.skin}`);
                }
                this.skin = value;
                this.renderer2.addClass(this.elementRef.nativeElement, `skin-${this.skin}`);
            }
        }));
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
    }
}
WrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-wrapper',
                template: `<div class="wrapper overflow" [ngClass]="classes">
  <ng-content></ng-content>
</div>
`,
                styles: [`.wrapper.overflow{overflow:hidden}:host{display:block}:host /deep/ .sidebar-right-toggle>a{color:#fff}:host.sidebar-mini.sidebar-collapse /deep/ .treeview-menu.collapsing{height:auto!important}:host /deep/ .sidebar-right-toggle>a:hover{background:rgba(0,0,0,.1)}:host.skin-black /deep/ .sidebar-right-toggle>a,:host.skin-black-light /deep/ .sidebar-right-toggle>a{color:#333;border-right-width:0}:host.skin-black /deep/ .sidebar-right-toggle>a:hover,:host.skin-black-light /deep/ .sidebar-right-toggle>a:hover{background-color:#fff;color:#999}:host.skin-black /deep/ .sidebar-right-toggle>a{border-left:1px solid #eee}:host.skin-black-light /deep/ .sidebar-right-toggle>a{border-left:1px solid #d2d6de}`]
            },] },
];
WrapperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LayoutStore },
    { type: WrapperService },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WrapperModule {
}
WrapperModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [WrapperComponent],
                declarations: [WrapperComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LayoutService {
    /**
     * \@method constructor
     * @param {?} routingService [description]
     */
    constructor(routingService) {
        this.routingService = routingService;
        this.isCustomLayout = new BehaviorSubject(true);
        this.init();
    }
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?} [description]
     */
    init() {
        this.routingService.onChange.subscribe((value) => {
            if (value && value[value.length - 1]) {
                if (this.customLayout === undefined || this.customLayout !== value[value.length - 1].data['disableLayout']) {
                    this.isCustomLayout.next(!!value[value.length - 1].data['customLayout']);
                }
                this.customLayout = value[value.length - 1].data['customLayout'];
            }
        });
    }
}
LayoutService.decorators = [
    { type: Injectable },
];
LayoutService.ctorParameters = () => [
    { type: RoutingService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * [InjectionToken description]
 * @type {?}
 */
const LayoutConfigToken = new InjectionToken('layoutConfig');
/**
 * [layoutStoreFactory description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutStoreFactory(layoutConfig) {
    return new LayoutStore(layoutConfig);
}
/**
 * [layoutProviders description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutProvider(layoutConfig) {
    return [{
            provide: LayoutStore,
            useFactory: layoutStoreFactory,
            deps: [LayoutConfigToken]
        }, {
            provide: LayoutConfigToken,
            useValue: layoutConfig
        }
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LayoutModule {
    /**
     * \@method constructor
     * @param {?} parentModule [description]
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig [description]
     * @return {?} [description]
     */
    static forRoot(layoutConfig) {
        return {
            ngModule: LayoutModule,
            providers: [...layoutProvider(layoutConfig), LayoutService]
        };
    }
}
LayoutModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
                providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
            },] },
];
LayoutModule.ctorParameters = () => [
    { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const colorsAliases = [
    'default',
    'primary',
    'danger',
    'warning',
    'info',
    'success'
];
/** @type {?} */
const colors = {
    'aqua': '#00c0ef',
    'aqua-active': '#00a7d0',
    'black': '#111111',
    'black-active': '#000000',
    'blue': '#0073b7',
    'blue-active': '#005384',
    'fuchsia': '#f012be',
    'fuchsia-active': '#db0ead',
    'green': '#00a65a',
    'green-active': '#008d4c',
    'gray': '#d2d6de',
    'gray-active': '#b5bbc8',
    'gray-light': '#f7f7f7',
    'light-blue': '#3c8dbc',
    'light-blue-active': '#357ca5',
    'lime': '#01ff70',
    'lime-active': '#00e765',
    'maroon': '#d81b60',
    'maroon-active': '#ca195a',
    'navy': '#001f3f',
    'navy-active': '#001a35',
    'olive': '#3d9970',
    'olive-active': '#368763',
    'orange': '#ff851b',
    'orange-active': '#ff7701',
    'purple': '#605ca8',
    'purple-active': '#555299',
    'red': '#dd4b39',
    'red-active': '#d33724',
    'teal': '#39cccc',
    'teal-active': '#30bbbb',
    'yellow': '#f39c12',
    'yellow-active': '#db8b0b',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class ColorService {
    /**
     * \@method constructor
     * @param {?} renderer2 [description]
     * @param {?} elementRef [description]
     */
    constructor(renderer2, elementRef) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        // this.init();
        // console.log(this);
    }
    /**
     * [setBackgroundColor description]
     * \@method setBackgroundColor
     * @param {?} color              [description]
     * @param {?} condition          [description]
     * @param {?} property           [description]
     * @param {?} prefix             [description]
     * @return {?}
     */
    setBackgroundColor(color, condition, property, prefix) {
        if (color && condition) {
            this.resetBackgroundColor();
            if (colors[color]) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                this.currentBackgroundStyle = { property: property, color: colors[color] };
                this.renderer2.setStyle(this.elementRef.nativeElement, property, colors[color]);
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
                    this.currentBackgroundStyle = { property: property, color: color };
                    this.renderer2.setStyle(this.elementRef.nativeElement, property, color);
                }
                else if (colorsAliases.indexOf(color) !== -1) {
                    this.currentBackgroundClass = prefix ? `${prefix}-${color}` : color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentBackgroundClass);
                }
            }
        }
    }
    /**
     * [resetBackgroundColor description]
     * \@method resetBackgroundColor
     * @return {?}
     */
    resetBackgroundColor() {
        if (this.currentBackgroundStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentBackgroundStyle.property, this.currentBackgroundStyle.color);
        }
        else if (this.currentBackgroundClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentBackgroundClass);
        }
    }
    /**
     * [setFontColor description]
     * \@method setFontColor
     * @param {?} color        [description]
     * @return {?}
     */
    setFontColor(color) {
        if (color) {
            this.resetFontColor();
            if (color.startsWith('#') || color.startsWith('rgb')) {
                this.currentFontStyle = color;
                this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
            }
            else {
                this.currentFontClass = `text-${color}`;
                this.renderer2.addClass(this.elementRef.nativeElement, this.currentFontClass);
            }
        }
    }
    /**
     * [resetFontColor description]
     * \@method resetFontColor
     * @return {?} [description]
     */
    resetFontColor() {
        if (this.currentFontStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentFontStyle);
        }
        else if (this.currentFontClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentFontClass);
        }
    }
}
ColorService.decorators = [
    { type: Injectable },
];
ColorService.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BackgroundColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setBackgroundColor(color, this.condition, this.property, this.prefix);
    }
}
BackgroundColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkColor]',
                providers: [ColorService]
            },] },
];
BackgroundColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
BackgroundColorDirective.propDecorators = {
    condition: [{ type: Input, args: ['mkColorCondition',] }],
    prefix: [{ type: Input, args: ['mkColorPrefix',] }],
    property: [{ type: Input, args: ['mkColorProperty',] }],
    color: [{ type: Input, args: ['mkColor',] }]
};
class ColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setFontColor(color);
    }
}
ColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkFontColor]',
                providers: [ColorService]
            },] },
];
ColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
ColorDirective.propDecorators = {
    color: [{ type: Input, args: ['mkFontColor',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColorModule {
}
ColorModule.decorators = [
    { type: NgModule, args: [{
                exports: [BackgroundColorDirective, ColorDirective],
                declarations: [BackgroundColorDirective, ColorDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class AccordionToggleDirective {
    /**
     * \@method constructor
     * @param {?} elementRef [description]
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
AccordionToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkAccordionToggle]'
            },] },
];
AccordionToggleDirective.ctorParameters = () => [
    { type: ElementRef }
];
AccordionToggleDirective.propDecorators = {
    accordionComponent: [{ type: Input, args: ['mkAccordionToggle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class AccordionHeaderComponent {
}
AccordionHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
AccordionHeaderComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class AccordionContentComponent {
}
AccordionContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-content',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
AccordionContentComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class AccordionComponent {
    /*
     *
     */
    constructor() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-+accordion-header" is required for component "mk-+accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
            },] },
];
AccordionComponent.propDecorators = {
    borderColor: [{ type: Input }],
    contentColor: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    header: [{ type: Input }],
    headerColor: [{ type: Input }],
    headerColorHover: [{ type: Input }],
    headerStyleClass: [{ type: Input }],
    accordionHeaderComponent: [{ type: ContentChild, args: [AccordionHeaderComponent,] }],
    accordionContentComponent: [{ type: ContentChild, args: [AccordionContentComponent,] }],
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class AccordionGroupComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} ngZone            [description]
     * @param {?} renderer2         [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        // @TODO change types for listeners to all files
        this.listeners = [];
        // @TODO change types for subscriptions to all files
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _activeIndex(value) {
        this.activeIndex = value instanceof Array ? value : [value];
    }
    /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion [description]
     * @return {?}
     */
    static headerMouseLeave(accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    }
    /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion [description]
     * @return {?}
     */
    static headerMouseEnter(accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterContentInit() {
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe(() => {
            this.setAccordionsIndex();
        }));
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe(() => {
            this.setAccordionsToggle();
        }));
    }
    /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?} [description]
     */
    ngOnChanges(changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    }
    /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event       [description]
     * @param {?} toggleIndex [description]
     * @return {?}
     */
    toggleAccordion(event, toggleIndex) {
        event.preventDefault();
        /** @type {?} */
        const indexOf = this.activeIndex['indexOf'](toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    collapseStart(event, accordion) {
        accordion.isCollapsing = true;
        this.onCollapseStart.emit({ animationEvent: event, index: accordion.index });
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    collapseDone(event, accordion) {
        accordion.isCollapsing = false;
        this.onCollapseDone.emit({ animationEvent: event, index: accordion.index });
    }
    /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @private
     * @return {?}
     */
    setAccordionsIndex() {
        this.accordionComponents.forEach((accordion, index) => {
            accordion.index = index;
        });
    }
    /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @private
     * @return {?}
     */
    setAccordionsToggle() {
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(() => {
            this.accordionToggleDirectives.forEach((accordionToggle) => {
                this.listeners.push(this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', (event) => {
                    this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    this.changeDetectorRef.detectChanges();
                }));
                this.listeners.push(this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', () => {
                    AccordionGroupComponent.headerMouseEnter(accordionToggle.accordionComponent);
                    this.changeDetectorRef.detectChanges();
                }));
                this.listeners.push(this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', () => {
                    AccordionGroupComponent.headerMouseLeave(accordionToggle.accordionComponent);
                    this.changeDetectorRef.detectChanges();
                }));
            });
        });
    }
    /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @private
     * @return {?}
     */
    updateAccordionIsCollapsed() {
        this.accordionComponents.forEach((accordion, index) => {
            accordion.isCollapsed = this.activeIndex.indexOf(index) === -1;
        });
    }
}
AccordionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-accordion-group',
                template: `<div [ngClass]="styleClass">
  <div *ngFor="let accordion of accordionComponents" class="panel box" [mkColor]="accordion.borderColor" mkColorProperty="border-top-color" mkColorPrefix="box">
    <div [ngClass]="accordion.headerStyleClass" [class.no-border]="accordion.isCollapsed && !accordion.isCollapsing">
      <h4 class="box-title">
        <a [mkAccordionToggle]="accordion" href="#" [mkFontColor]="accordion.headerStyleColor" [class.collapsed]="accordion.isCollapsed">
          {{accordion.header}}
          <ng-template *ngIf="!accordion.header" [ngTemplateOutlet]="accordion.accordionHeaderComponent?.templateRef"></ng-template>
        </a>
      </h4>
    </div>
    <div class="panel-collapse" [mkCollapseAnimation]="accordion.isCollapsed" (mkCollapseAnimation.start)="collapseStart($event, accordion)" (mkCollapseAnimation.done)="collapseDone($event, accordion)">
      <div [ngClass]="accordion.contentStyleClass" [mkFontColor]="accordion.contentColor">
        <ng-template [ngTemplateOutlet]="accordion.contentTemplateRef"></ng-template>
      </div>
    </div>
  </div>
</div>
`
            },] },
];
AccordionGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
AccordionGroupComponent.propDecorators = {
    _activeIndex: [{ type: Input, args: ['activeIndex',] }],
    isMultiple: [{ type: Input }],
    styleClass: [{ type: Input }],
    onCollapseStart: [{ type: Output }],
    onCollapseDone: [{ type: Output }],
    accordionComponents: [{ type: ContentChildren, args: [AccordionComponent,] }],
    accordionToggleDirectives: [{ type: ViewChildren, args: [AccordionToggleDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AccordionModule {
}
AccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent],
                declarations: [AccordionToggleDirective, AccordionHeaderComponent,
                    AccordionContentComponent, AccordionComponent, AccordionGroupComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class AlertComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} ngZone            [description]
     * @param {?} renderer2         [description]
     * @param {?} viewContainerRef  [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set callout(value) {
        this.type = value ? 'callout' : 'alert';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _isDismissible(value) {
        this.isDismissible = value;
        if (value) {
            this.dismissibleClass = `${this.type}-dismissible`;
        }
        else {
            this.dismissibleClass = '';
        }
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.dismissOnTimeout) {
                setTimeout(() => {
                    if (!((/** @type {?} */ (this.changeDetectorRef))).destroyed) {
                        this.remove = true;
                        this.changeDetectorRef.detectChanges();
                    }
                }, this.dismissOnTimeout);
            }
            if (this.removeButtonElement) {
                this.listeners.push(this.renderer2.listen(this.removeButtonElement.nativeElement, 'click', () => {
                    this.remove = true;
                    this.changeDetectorRef.detectChanges();
                }));
            }
        });
    }
    /**
     * \@method ngOnDesroy
     * @return {?}
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    collapseStart(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    collapseDone(event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.onCollapseDone.emit(event);
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-alert',
                template: `<div *ngIf="!removed" [mkCollapseAnimation]="remove" (mkCollapseAnimation.start)="collapseStart($event)" (mkCollapseAnimation.done)="collapseDone($event)">
  <div [mkColor]="backgroundColor" mkColorProperty="background-color" [mkColorPrefix]="type" [mkFontColor]="color" [ngClass]="[styleClass, dismissibleClass, type]">
    <button *ngIf="isDismissible" type="button" class="close" #removeButtonElement>&times;</button>
    <ng-content></ng-content>
  </div>
</div>
`,
                styles: [`.callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.callout .close{color:#000;opacity:.2}.callout .icon{margin-right:10px}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
AlertComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ViewContainerRef }
];
AlertComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    callout: [{ type: Input }],
    color: [{ type: Input }],
    dismissOnTimeout: [{ type: Input }],
    _isDismissible: [{ type: Input, args: ['isDismissible',] }],
    styleClass: [{ type: Input }],
    onCollapseStart: [{ type: Output }],
    onCollapseDone: [{ type: Output }],
    removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }],
    containerElementRef: [{ type: ViewChild, args: ['containerElementRef', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlertModule {
}
AlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [AlertComponent],
                declarations: [AlertComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxContentDirective {
}
BoxContentDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-content'
            },] },
];
/*
 *
 */
class BoxFooterDirective {
}
BoxFooterDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-footer'
            },] },
];
/*
 *
 */
class BoxToolsDirective {
}
BoxToolsDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-tools'
            },] },
];
/*
 *
 */
class BoxHeaderDirective {
}
BoxHeaderDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-header'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} ngZone            [description]
     * @param {?} renderer2         [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.remove = false;
        this.listeners = [];
        this.boxColor = 'default';
        this.buttonsStyleClass = 'btn btn-box-tool';
        this.contentStyleClass = 'box-content-wrapper';
        this.footerStyleClass = 'box-footer';
        this.headerBorder = true;
        this.headerStyleClass = 'box-header';
        this.isCollapsable = true;
        this.isCollapsed = false;
        this.isRemovable = true;
        this.isSolid = false;
        this.loadingStyleClass = 'fa fa-refresh fa-spin';
        this.styleClass = 'box';
        this.onCollapseDone = new EventEmitter();
        this.onCollapseStart = new EventEmitter();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.toggleButtonElement) {
                this.listeners.push(this.renderer2.listen(this.toggleButtonElement.nativeElement, 'click', () => {
                    this.isCollapsed = !this.isCollapsed;
                    this.changeDetectorRef.detectChanges();
                }));
            }
            if (this.removeButtonElement) {
                this.listeners.push(this.renderer2.listen(this.removeButtonElement.nativeElement, 'click', () => {
                    this.remove = true;
                    this.changeDetectorRef.detectChanges();
                }));
            }
        });
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
    }
    /**
     * [removedDone description]
     * \@method removedDone
     * @param {?} event [description]
     * @return {?}
     */
    removedDone(event) {
        if (event.toState === '1') {
            this.removed = true;
        }
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    collapseStart(event) {
        if (event.fromState !== 'void') {
            this.isCollaping = true;
            this.onCollapseStart.emit(event);
        }
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    collapseDone(event) {
        if (event.fromState !== 'void') {
            this.isCollaping = false;
            this.onCollapseDone.emit(event);
        }
    }
}
BoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box',
                template: `<div *ngIf="!removed" [mkColor]="boxColor" mkColorProperty="border-color" mkColorPrefix="box" [ngClass]="styleClass" [class.collapsed-box]="isCollapsed && !isCollaping" [class.box-solid]="isSolid" [mkCollapseAnimation]="remove" (mkCollapseAnimation.done)="removedDone($event)">
  <div *ngIf="header || boxHeaderDirective" [ngClass]="headerStyleClass" [mkColor]="boxColor" [mkColorCondition]="isSolid" mkColorProperty="background-color" [class.with-border]="headerBorder">
    <h3 class="box-title" [mkFontColor]="headerColor">
      {{header}}
      <ng-content select="mk-box-header"></ng-content>
    </h3>
    <div class="box-tools pull-right">
      <ng-content select="mk-box-tools"></ng-content>
      <button *ngIf="isCollapsable" type="button" [ngClass]="buttonsStyleClass" #toggleButtonElement>
        <i class="fa" [ngClass]="{'fa-plus': isCollapsed, 'fa-minus': !isCollapsed}"></i>
      </button>
      <button *ngIf="isRemovable" type="button" [ngClass]="buttonsStyleClass" #removeButtonElement>
        <i class="fa fa-times"></i>
      </button>
    </div>
  </div>
  <div [ngClass]="contentStyleClass" [mkFontColor]="contentColor" [mkCollapseAnimation]="isCollapsed" (mkCollapseAnimation.start)="collapseStart($event)" (mkCollapseAnimation.done)="collapseDone($event)">
    <div class="box-body">
      <ng-container *ngIf="boxHeaderDirective || boxContentDirective || boxFooterDirective || boxToolsDirective; else noDirective">
        <ng-content select="mk-box-content"></ng-content>
      </ng-container>
      <ng-template #noDirective>
        <ng-content></ng-content>
      </ng-template>
    </div>
    <div *ngIf="footer || boxFooterDirective" [ngClass]="footerStyleClass" [mkFontColor]="footerColor">
      {{footer}}
      <ng-content select="mk-box-footer"></ng-content>
    </div>
  </div>
  <div *ngIf="isLoading" class="overlay">
    <i [ngClass]="loadingStyleClass" [mkFontColor]="loadingColor"></i>
  </div>
</div>
`,
                styles: [`.box.collapsed-box .box-body,.box.collapsed-box .box-footer{display:inherit}.box-solid{border:1px solid}.box-body{background-color:#fff}.box.box-solid.bg-color>.box-header{color:#fff}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
BoxComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
BoxComponent.propDecorators = {
    boxColor: [{ type: Input }],
    buttonsStyleClass: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    contentColor: [{ type: Input }],
    footer: [{ type: Input }],
    footerColor: [{ type: Input }],
    footerStyleClass: [{ type: Input }],
    header: [{ type: Input }],
    headerBorder: [{ type: Input }],
    headerColor: [{ type: Input }],
    headerStyleClass: [{ type: Input }],
    isCollapsable: [{ type: Input }],
    isCollapsed: [{ type: Input }],
    isLoading: [{ type: Input }],
    isRemovable: [{ type: Input }],
    isSolid: [{ type: Input }],
    loadingColor: [{ type: Input }],
    loadingStyleClass: [{ type: Input }],
    styleClass: [{ type: Input }],
    onCollapseDone: [{ type: Output }],
    onCollapseStart: [{ type: Output }],
    boxHeaderDirective: [{ type: ContentChild, args: [BoxHeaderDirective,] }],
    boxFooterDirective: [{ type: ContentChild, args: [BoxFooterDirective,] }],
    boxContentDirective: [{ type: ContentChild, args: [BoxContentDirective,] }],
    boxToolsDirective: [{ type: ContentChild, args: [BoxToolsDirective,] }],
    toggleButtonElement: [{ type: ViewChild, args: ['toggleButtonElement',] }],
    removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BoxModule {
}
BoxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective],
                declarations: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxInfoContentDirective {
}
BoxInfoContentDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-info-content'
            },] },
];
/*
 *
 */
class BoxInfoFooterDirective {
}
BoxInfoFooterDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-info-footer'
            },] },
];
/*
 *
 */
class BoxInfoHeaderDirective {
}
BoxInfoHeaderDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-info-header'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxInfoComponent {
    /*
     *
     */
    constructor() {
        this.contentStyleClass = 'info-box-number';
        this.footerStyleClass = 'progress-description';
        this.headerStyleClass = 'info-box-text';
        this.iconColor = '#fff';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'info-box';
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (!this.backgroundColor) {
            this.progressBarBg = this.iconBackgroundColor;
        }
    }
}
BoxInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box-info',
                styles: [`.info-box.bg-color>.info-box-content{color:#fff}`],
                template: `<div [ngClass]="styleClass" [mkColor]="backgroundColor" mkColorProperty="background-color">
  <span class="info-box-icon" [mkColor]="iconBackgroundColor" mkColorProperty="background-color">
    <i [ngClass]="iconStyleClass" [mkFontColor]="iconColor"></i>
  </span>
  <div class="info-box-content">
    <span *ngIf="header || boxInfoHeaderDirective" [ngClass]="headerStyleClass" [mkFontColor]="headerColor">
      {{header}}
      <ng-content select="mk-box-header"></ng-content>
    </span>
    <span [ngClass]="contentStyleClass" [mkFontColor]="contentColor">
      <ng-container *ngIf="boxInfoHeaderDirective || boxInfoContentDirective || boxInfoFooterDirective; else noDirective">
        <ng-content select="mk-box-content"></ng-content>
      </ng-container>
      <ng-template #noDirective>
        <ng-content></ng-content>
      </ng-template>
    </span>
    <div *ngIf="progressWidth" class="progress">
      <div class="progress-bar" [mkColor]="progressBarBg" mkColorProperty="background-color" [style.width.%]="progressWidth"></div>
    </div>
    <span *ngIf="footer || boxInfoFooterDirective" [ngClass]="footerStyleClass" [mkFontColor]="footerColor">
      {{footer}}
      <ng-content select="mk-box-footer"></ng-content>
    </span>
  </div>
</div>
`
            },] },
];
BoxInfoComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    contentColor: [{ type: Input }],
    footer: [{ type: Input }],
    footerColor: [{ type: Input }],
    footerStyleClass: [{ type: Input }],
    header: [{ type: Input }],
    headerColor: [{ type: Input }],
    headerStyleClass: [{ type: Input }],
    iconBackgroundColor: [{ type: Input }],
    iconColor: [{ type: Input }],
    iconStyleClass: [{ type: Input }],
    progressWidth: [{ type: Input }],
    styleClass: [{ type: Input }],
    boxInfoHeaderDirective: [{ type: ContentChild, args: [BoxInfoHeaderDirective,] }],
    boxInfoFooterDirective: [{ type: ContentChild, args: [BoxInfoFooterDirective,] }],
    boxInfoContentDirective: [{ type: ContentChild, args: [BoxInfoContentDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BoxInfoModule {
}
BoxInfoModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective],
                declarations: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxSmallFooterDirective {
}
BoxSmallFooterDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-small-footer'
            },] },
];
/*
 *
 */
class BoxSmallHeaderDirective {
}
BoxSmallHeaderDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-small-header'
            },] },
];
/*
 *
 */
class BoxSmallContentDirective {
}
BoxSmallContentDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-box-small-content'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class BoxSmallComponent {
    /*
     *
     */
    constructor() {
        this.contentStyleClass = 'small-box-content';
        this.footerStyleClass = 'small-box-footer';
        this.headerStyleClass = 'small-box-header';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'small-box';
    }
}
BoxSmallComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-box-small',
                template: `<div [ngClass]="styleClass" [mkColor]="backgroundColor" mkColorProperty="background-color">
  <div class="inner">
    <h3 *ngIf="header || boxSmallHeaderDirective" [ngClass]="headerStyleClass" [mkFontColor]="headerColor">
      {{header}}
      <ng-content select="mk-box-small-header"></ng-content>
    </h3>
    <p [ngClass]="contentStyleClass" [mkFontColor]="contentColor">
      <ng-container *ngIf="boxSmallHeaderDirective || boxSmallContentDirective || boxSmallFooterDirective; else noDirective">
        <ng-content select="mk-box-small-content"></ng-content>
      </ng-container>
      <ng-template #noDirective>
        <ng-content></ng-content>
      </ng-template>
    </p>
  </div>
  <div *ngIf="iconStyleClass" class="icon">
    <i [ngClass]="iconStyleClass" [mkFontColor]="iconColor"></i>
  </div>
  <span *ngIf="footer || boxSmallFooterDirective" [ngClass]="footerStyleClass" [mkFontColor]="footerColor">
    {{footer}}
    <ng-content select="mk-box-small-footer"></ng-content>
  </span>
</div>
`,
                styles: [`.small-box.bg-color{color:#fff}/deep/ .small-box-footer:hover{cursor:pointer}/deep/ .small-box-footer a{color:rgba(255,255,255,.8)}/deep/ .small-box-footer:hover a{color:#fff}`]
            },] },
];
BoxSmallComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    contentColor: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    footer: [{ type: Input }],
    footerColor: [{ type: Input }],
    footerStyleClass: [{ type: Input }],
    header: [{ type: Input }],
    headerColor: [{ type: Input }],
    headerStyleClass: [{ type: Input }],
    iconColor: [{ type: Input }],
    iconStyleClass: [{ type: Input }],
    styleClass: [{ type: Input }],
    boxSmallHeaderDirective: [{ type: ContentChild, args: [BoxSmallHeaderDirective,] }],
    boxSmallFooterDirective: [{ type: ContentChild, args: [BoxSmallFooterDirective,] }],
    boxSmallContentDirective: [{ type: ContentChild, args: [BoxSmallContentDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BoxSmallModule {
}
BoxSmallModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective],
                declarations: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class DropdownToggleComponent {
}
DropdownToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-toggle',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownToggleComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }],
    toggleElement: [{ type: ContentChild, args: ['toggleElement',] }]
};
/*
 *
 */
class DropdownMenuComponent {
}
DropdownMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown-menu',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownMenuComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class DropdownComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} elementRef [description]
     * @param {?} ngZone [description]
     * @param {?} renderer2 [description]
     */
    constructor(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular(() => {
                this.listeners.push(this.renderer2.listen(toggleNativeElement, 'click', (event) => {
                    this.toggleDropdown(event);
                    this.changeDetectorRef.detectChanges();
                }));
            });
        }
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    }
    /**
     * [toggle description]
     * \@method toggle
     * @param {?} event [description]
     * @return {?}
     */
    toggleDropdown(event) {
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.bindDocumentClickListener();
                });
            });
        }
        else {
            this.unBindDocumentClickListener();
        }
    }
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    collapseStart(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    collapseDone(event) {
        this.onCollapseStart.emit(event);
    }
    /**
     * [bindDocumentClickListener description]
     * \@method bindDocumentClickListener
     * @private
     * @return {?}
     */
    bindDocumentClickListener() {
        this.ngZone.runOutsideAngular(() => {
            this.documentClickListener = this.renderer2.listen('document', 'click', () => {
                if (!this.isCollapsed) {
                    this.isCollapsed = true;
                    this.unBindDocumentClickListener();
                    this.changeDetectorRef.detectChanges();
                }
            });
        });
    }
    /**
     * [unBindDocumentClickListener description]
     * \@method unBindDocumentClickListener
     * @private
     * @return {?}
     */
    unBindDocumentClickListener() {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    }
}
DropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-dropdown, [mk-dropdown]',
                template: `<ng-template #innerTemplate>
  <ng-container *ngIf="this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement; else noToggleElement" [ngTemplateOutlet]="dropdownToggleComponent.templateRef"></ng-container>
  <ng-template #noToggleElement>
    <button *ngIf="toggleText || dropdownToggleComponent" [mkColor]="buttonBackgroudColor" mkColorProperty="background-color" mkColorPrefix="btn" [ngClass]="buttonStyleClass" #toggleElement>
      {{toggleText}}
      <ng-container [ngTemplateOutlet]="dropdownToggleComponent?.templateRef"></ng-container>
    </button>
  </ng-template>
  <ul [ngClass]="contentStyleClass" [mkCollapseAnimation]="isCollapsed" (mkCollapseAnimation.start)="collapseStart($event)" (mkCollapseAnimation.done)="collapseDone($event)">
    <ng-container *ngIf="dropdownMenuComponent; else noDropdownMenuComponent" [ngTemplateOutlet]="dropdownMenuComponent.templateRef"></ng-container>
    <ng-template #noDropdownMenuComponent>
      <ng-content></ng-content>
    </ng-template>
  </ul>
</ng-template>

<div *ngIf="isWrapper; else noWrapper" [ngClass]="styleClass">
  <ng-container *ngTemplateOutlet="innerTemplate"></ng-container>
</div>

<ng-template #noWrapper>
  <ng-container *ngTemplateOutlet="innerTemplate"></ng-container>
</ng-template>
`,
                styles: [`.dropdown-menu{display:block}.dropdown-menu.collapsing:not(.un-collapse){transition-property:height,padding-top,padding-bottom;padding-top:0;padding-bottom:0}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
DropdownComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
DropdownComponent.propDecorators = {
    buttonStyleClass: [{ type: Input }],
    buttonBackgroudColor: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    isCollapsed: [{ type: Input }],
    isWrapper: [{ type: Input }],
    styleClass: [{ type: Input }],
    toggleElement: [{ type: Input }],
    toggleText: [{ type: Input }],
    onCollapseStart: [{ type: Output }],
    onCollapseDone: [{ type: Output }],
    dropdownToggleComponent: [{ type: ContentChild, args: [DropdownToggleComponent,] }],
    dropdownMenuComponent: [{ type: ContentChild, args: [DropdownMenuComponent,] }],
    defaultToggleElement: [{ type: ViewChild, args: ['toggleElement',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropdownModule {
}
DropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent],
                declarations: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class InputGroupLabelDirective {
}
InputGroupLabelDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-input-group-label'
            },] },
];
/*
 *
 */
class InputGroupAddonLeftDirective {
}
InputGroupAddonLeftDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-input-group-addon-left'
            },] },
];
/*
 *
 */
class InputGroupAddonRightDirective {
}
InputGroupAddonRightDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-input-group-addon-right'
            },] },
];
/*
 *
 */
class InputGroupContentDirective {
}
InputGroupContentDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'mk-input-group-content'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class ClassService {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     */
    constructor(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    applyClasses(cssClasses) {
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        /** @type {?} */
        const classesToRemove = this.currentClasses.filter(x => cssClasses.indexOf(x) === -1);
        classesToRemove.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.removeClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Add only classes that are not in currentClasses
        /** @type {?} */
        const classesToAdd = cssClasses.filter(x => this.currentClasses.indexOf(x) === -1);
        classesToAdd.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.addClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for futur updates
        this.currentClasses = [...cssClasses];
    }
}
ClassService.decorators = [
    { type: Injectable },
];
ClassService.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @TODO onFocus Color
class InputTextDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} ngControl    [description]
     * @param {?} colorService [description]
     * @param {?} classService [description]
     */
    constructor(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this._onKeyUp = new Subject();
        this.onKeyup = this._onKeyUp.asObservable();
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set borderColor(color) {
        this.colorService.setBackgroundColor(color, true, 'border-color', null);
    }
    /**
     * @param {?} className
     * @return {?}
     */
    set class(className) {
        this.isSetClass = true;
        this.classService.applyClasses(className);
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setFontColor(color);
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    }
    /**
     * @return {?}
     */
    keyUpListener() {
        this._onKeyUp.next(this.ngControl);
    }
}
InputTextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkInputText]',
                providers: [ColorService, ClassService]
            },] },
];
InputTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgControl },
    { type: ColorService },
    { type: ClassService }
];
InputTextDirective.propDecorators = {
    borderColor: [{ type: Input }],
    class: [{ type: Input }],
    color: [{ type: Input }],
    keyUpListener: [{ type: HostListener, args: ['keyup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class InputGroupComponent {
    /*
     *
     */
    constructor() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe((value) => {
            if (value.invalid) {
                this.currentColor = this.inputErrorColor;
                this.currentFontColor = this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                this.currentColor = this.inputValidColor;
                this.currentFontColor = this.inputValidFontColor;
            }
            else {
                this.currentColor = this.inputColor;
                this.currentFontColor = this.inputFontColor;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        removeSubscriptions(this.subscriptions);
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-input-group',
                template: `<div [ngClass]="wrapperClasses" [mkColor]="currentColor || inputColor" mkColorPrefix="has">
  <label *ngIf="label || inputGroupLabelDirective">
    {{label}}
    <ng-content select="mk-input-group-label"></ng-content>
  </label>
  <div *ngIf="addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon" class="input-group">
    <span *ngIf="addonLeft || inputGroupAddonLeftDirective" class="input-group-addon">
      {{addonLeft}}
      <ng-content select="mk-input-group-addon-left"></ng-content>
    </span>
    <ng-content select="mk-input-group-content"></ng-content>
    <span *ngIf="addonRight || inputGroupAddonRightDirective" class="input-group-addon">
      {{addonRight}}
      <ng-content select="mk-input-group-addon-right"></ng-content>
    </span>
  </div>
  <ng-template #noAddon><ng-content select="mk-input-group-content"></ng-content></ng-template>
</div>
`
            },] },
];
InputGroupComponent.propDecorators = {
    addonLeft: [{ type: Input }],
    addonRight: [{ type: Input }],
    inputColor: [{ type: Input }],
    inputFontColor: [{ type: Input }],
    inputErrorColor: [{ type: Input }],
    inputErrorFontColor: [{ type: Input }],
    inputValidColor: [{ type: Input }],
    inputValidFontColor: [{ type: Input }],
    label: [{ type: Input }],
    wrapperClasses: [{ type: Input }],
    inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
    inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
    inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
    inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
    inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupModule {
}
InputGroupModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ColorModule,
                    FormsModule
                ],
                exports: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                    InputGroupAddonRightDirective, InputGroupContentDirective],
                declarations: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                    InputGroupAddonRightDirective, InputGroupContentDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputTextModule {
}
InputTextModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ColorModule,
                    FormsModule
                ],
                exports: [InputTextDirective],
                declarations: [InputTextDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
class TabToggleDirective {
    /**
     * \@method constructor
     * @param {?} elementRef [description]
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
TabToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkTabToggle]'
            },] },
];
TabToggleDirective.ctorParameters = () => [
    { type: ElementRef }
];
TabToggleDirective.propDecorators = {
    tabComponent: [{ type: Input, args: ['mkTabToggle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @TODO Vertical tabs
/*
 *
 */
class TabHeaderComponent {
}
TabHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
TabHeaderComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class TabContentComponent {
}
TabContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab-content',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
TabContentComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class TabComponent {
    /*
     *
     */
    constructor() {
        this.isActive = false;
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    }
}
TabComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tab',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
TabComponent.propDecorators = {
    header: [{ type: Input }],
    isDisabled: [{ type: Input }],
    tabColor: [{ type: Input }],
    templateRef: [{ type: ViewChild, args: ['templateRef',] }],
    tabHeaderComponent: [{ type: ContentChild, args: [TabHeaderComponent,] }],
    tabContentComponent: [{ type: ContentChild, args: [TabContentComponent,] }]
};
/*
 *
 */
class TabsHeaderComponent {
}
TabsHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tabs-header',
                template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
TabsHeaderComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['templateRef',] }]
};
/*
 *
 */
class TabsComponent {
    /**
     * \@method constructor
     * @param {?} changeDetectorRef [description]
     * @param {?} ngZone            [description]
     * @param {?} renderer2         [description]
     */
    constructor(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.onClose = new EventEmitter();
        this.onOpen = new EventEmitter();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set activeTabIndex(index) {
        this.activatedTabIndex = index;
        this.changeDetectorRef.detectChanges();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterContentInit() {
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe(() => {
            this.setTabIndex();
        }));
        // Open tab on load.
        this.openTabIndex();
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe(() => {
            this.setTabsToggle();
        }));
    }
    /**
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    }
    /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    openTabIndex() {
        if (this.tabs) {
            this.tabs.forEach((tab) => {
                if (this.activatedTabIndex === tab.index || (this.activatedTabIndex === undefined && tab.index === 0)) {
                    tab.isActive = true;
                    this.onOpen.emit({ index: tab.index });
                    this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    this.onClose.emit({ index: tab.index });
                    this.changeDetectorRef.detectChanges();
                }
            });
        }
    }
    /**
     * [openTab description]
     * \@method openTab
     * @param {?} event     [description]
     * @param {?} tabToOpen [description]
     * @return {?}
     */
    openTab(event, tabToOpen) {
        event.preventDefault();
        tabToOpen.isActive = true;
        this.onOpen.emit({ event, index: tabToOpen.index });
        this.tabs.forEach((tab) => {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                this.onClose.emit({ event, index: tab.index });
            }
        });
    }
    /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @private
     * @return {?}
     */
    setTabIndex() {
        this.tabs.forEach((tab, index) => {
            tab.index = index;
        });
        this.changeDetectorRef.detectChanges();
    }
    /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @private
     * @return {?}
     */
    setTabsToggle() {
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular(() => {
            this.tabToggleDirectives.forEach((tabToggle) => {
                this.listeners.push(this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', (event) => {
                    this.openTab(event, tabToggle.tabComponent);
                    this.changeDetectorRef.detectChanges();
                }));
            });
        });
    }
}
TabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-tabs',
                template: `<div [ngClass]="styleClass">
  <ul [ngClass]="navStyleClass" [class.pull-right]="header || tabsHeaderComponent">
    <li *ngFor="let tab of tabs" [class.active]="tab.isActive" [mkColor]="tab.tabColor || tabsColor" mkColorProperty="border-top-color">
      <a *ngIf="!tab.isDisabled" [mkTabToggle]="tab" href="#">
        {{tab.header}}
        <ng-template *ngIf="!tab.header" [ngTemplateOutlet]="tab.tabHeaderComponent?.templateRef"></ng-template>
      </a>
      <ng-template [ngIf]="tab.isDisabled">
        {{tab.header}}
        <ng-template *ngIf="!tab.header" [ngTemplateOutlet]="tab.tabHeaderComponent.templateRef"></ng-template>
      </ng-template>
    </li>
    <li *ngIf="tabsHeaderComponent || header" [ngClass]="headerStyleClass">
      {{header}}
      <ng-template *ngIf="!header" [ngTemplateOutlet]="tabsHeaderComponent.templateRef"></ng-template>
    </li>
  </ul>
  <div [ngClass]="contentStyleClass">
    <div *ngFor="let tab of tabs" class="tab-pane" [class.active]="tab.isActive">
      <ng-template [ngTemplateOutlet]="tab.contentTemplateRef"></ng-template>
    </div>
  </div>
</div>
`,
                styles: [`.nav-tabs-custom>.nav-tabs>li{border-top-width:0}.nav-tabs-custom>.nav-tabs>li.active{border-top-width:3px}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
TabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
TabsComponent.propDecorators = {
    activeTabIndex: [{ type: Input }],
    header: [{ type: Input }],
    headerStyleClass: [{ type: Input }],
    navStyleClass: [{ type: Input }],
    contentStyleClass: [{ type: Input }],
    styleClass: [{ type: Input }],
    tabsColor: [{ type: Input }],
    onClose: [{ type: Output }],
    onOpen: [{ type: Output }],
    tabsHeaderComponent: [{ type: ContentChild, args: [TabsHeaderComponent,] }],
    tabs: [{ type: ContentChildren, args: [TabComponent,] }],
    tabToggleDirectives: [{ type: ViewChildren, args: [TabToggleDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TabsModule {
}
TabsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ColorModule],
                exports: [TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent],
                declarations: [TabToggleDirective, TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LayoutModule, LayoutService, LayoutStore, AccordionModule, AlertModule, BoxModule, BoxInfoModule, BoxSmallModule, BreadcrumbsModule, DropdownModule, InputGroupModule, InputTextModule, TabsModule, AccordionComponent as ɵbi, AccordionContentComponent as ɵbh, AccordionGroupComponent as ɵbj, AccordionHeaderComponent as ɵbg, AccordionToggleDirective as ɵbk, AlertComponent as ɵbl, CollapseAnimationDirective as ɵr, AnimationsModule as ɵq, BoxInfoComponent as ɵbr, BoxInfoContentDirective as ɵbs, BoxInfoFooterDirective as ɵbt, BoxInfoHeaderDirective as ɵbu, BoxSmallComponent as ɵbv, BoxSmallContentDirective as ɵby, BoxSmallFooterDirective as ɵbw, BoxSmallHeaderDirective as ɵbx, BoxComponent as ɵbm, BoxContentDirective as ɵbn, BoxFooterDirective as ɵbo, BoxHeaderDirective as ɵbq, BoxToolsDirective as ɵbp, BreadcrumbsComponent as ɵb, BackgroundColorDirective as ɵbd, ColorDirective as ɵbe, ColorModule as ɵbc, ColorService as ɵbf, DropdownComponent as ɵcb, DropdownMenuComponent as ɵca, DropdownToggleComponent as ɵbz, InputGroupComponent as ɵcc, InputGroupAddonLeftDirective as ɵce, InputGroupAddonRightDirective as ɵcf, InputGroupContentDirective as ɵcg, InputGroupLabelDirective as ɵcd, InputTextDirective as ɵch, ContentComponent as ɵd, ContentModule as ɵa, FooterComponent as ɵk, FooterLeftComponent as ɵi, FooterRightComponent as ɵj, FooterModule as ɵh, FooterService as ɵg, HeaderComponent as ɵo, HeaderLogoComponent as ɵm, HeaderLogoMiniComponent as ɵn, HeaderModule as ɵl, HeaderService as ɵf, LayoutConfigToken as ɵz, layoutProvider as ɵbb, layoutStoreFactory as ɵba, SidebarLeftComponent as ɵs, SidebarLeftToggleDirective as ɵt, SidebarLeftModule as ɵp, SidebarRightComponent as ɵw, SidebarRightModule as ɵv, SidebarRightService as ɵe, WrapperComponent as ɵy, WrapperModule as ɵx, WrapperService as ɵu, ClassService as ɵci, RoutingService as ɵc, TabComponent as ɵcl, TabContentComponent as ɵck, TabHeaderComponent as ɵcj, TabsComponent as ɵcn, TabsHeaderComponent as ɵcm, TabToggleDirective as ɵco };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1hZG1pbi1sdGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9zZXJ2aWNlcy9yb3V0aW5nLnNlcnZpY2UudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9icmVhZGNydW1icy9icmVhZGNydW1icy5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9icmVhZGNydW1icy9icmVhZGNydW1icy5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9sYXlvdXQvbGF5b3V0LnN0b3JlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5zZXJ2aWNlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L2hlYWRlci9oZWFkZXIuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC9mb290ZXIvZm9vdGVyLnNlcnZpY2UudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9oZWxwZXJzLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L2NvbnRlbnQvY29udGVudC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9sYXlvdXQvY29udGVudC9jb250ZW50Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC9mb290ZXIvZm9vdGVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC9mb290ZXIvZm9vdGVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC9oZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC9oZWFkZXIvaGVhZGVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5kaXJlY3RpdmUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9hbmltYXRpb25zL2FuaW1hdGlvbnMubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3NpZGViYXItbGVmdC9zaWRlYmFyLWxlZnQuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3dyYXBwZXIvd3JhcHBlci5zZXJ2aWNlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3NpZGViYXItbGVmdC9zaWRlYmFyLWxlZnQuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3NpZGViYXItbGVmdC9zaWRlYmFyLWxlZnQubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9sYXlvdXQvc2lkZWJhci1yaWdodC9zaWRlYmFyLXJpZ2h0Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2xheW91dC93cmFwcGVyL3dyYXBwZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L3dyYXBwZXIvd3JhcHBlci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9sYXlvdXQvbGF5b3V0LnNlcnZpY2UudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9sYXlvdXQvbGF5b3V0LnByb3ZpZGVyLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvbGF5b3V0L2xheW91dC5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9jb2xvci9jb2xvci5kZWZpbml0aW9uLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvY29sb3IvY29sb3Iuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2NvbG9yL2NvbG9yLmRpcmVjdGl2ZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2NvbG9yL2NvbG9yLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2FjY29yZGlvbi9hY2NvcmRpb24uZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvYWNjb3JkaW9uL2FjY29yZGlvbi5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9hY2NvcmRpb24vYWNjb3JkaW9uLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2FsZXJ0L2FsZXJ0LmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2FsZXJ0L2FsZXJ0Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2JveC9ib3guZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvYm94L2JveC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9ib3gvYm94Lm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2JveC1pbmZvL2JveC1pbmZvLmRpcmVjdGl2ZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2JveC1pbmZvL2JveC1pbmZvLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2JveC1pbmZvL2JveC1pbmZvLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2JveC1zbWFsbC9ib3gtc21hbGwuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvYm94LXNtYWxsL2JveC1zbWFsbC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9ib3gtc21hbGwvYm94LXNtYWxsLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2Ryb3Bkb3duL2Ryb3Bkb3duLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2Ryb3Bkb3duL2Ryb3Bkb3duLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2Zvcm0vaW5wdXQtZ3JvdXAvaW5wdXQtZ3JvdXAuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvc2VydmljZXMvY2xhc3Muc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2Zvcm0vaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmRpcmVjdGl2ZS50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL2Zvcm0vaW5wdXQtZ3JvdXAvaW5wdXQtZ3JvdXAuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvZm9ybS9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItYWRtaW4tbHRlL2xpYi90YWJzL3RhYnMuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS9saWIvdGFicy90YWJzLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1hZG1pbi1sdGUvbGliL3RhYnMvdGFicy5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgRXZlbnQgYXMgUm91dGVyRXZlbnQsIE5hdmlnYXRpb25FbmQsIFBSSU1BUllfT1VUTEVULCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLypcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gIGRhdGE6IE9iamVjdDtcbiAgcGFyYW1zOiBPYmplY3Q7XG4gIHVybDogc3RyaW5nO1xufVxuXG4vKlxuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRocyBleHRlbmRzIEFycmF5PFBhdGg+IHt9XG5cblxuLypcbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb3V0aW5nU2VydmljZSB7XG4gIHB1YmxpYyBvbkNoYW5nZTogQmVoYXZpb3JTdWJqZWN0PFBhdGhzPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgcHVibGljIGV2ZW50czogQmVoYXZpb3JTdWJqZWN0PFJvdXRlckV2ZW50PiA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcm91dGVyIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogW2NyZWF0ZVVybCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjcmVhdGVVcmxcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVVcmwocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IHJvdXRlLnVybC5tYXAodXJsU2VnbWVudCA9PiB1cmxTZWdtZW50LnRvU3RyaW5nKCkpLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIFtpc0NoaWxkcmVuU2VsZlJvdXRlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGlzQ2hpbGRyZW5TZWxmUm91dGVcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBpc0NoaWxkcmVuU2VsZlJvdXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcm91dGUucm91dGVDb25maWcuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZiAoY2hpbGQucGF0aCA9PT0gJycgJiYgKGNoaWxkLmNvbXBvbmVudCB8fCBjaGlsZC5sb2FkQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFtjcmVhdGVCcmVhZGNydW1iIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGNyZWF0ZUJyZWFkY3J1bWJcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIHVybCAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVCcmVhZGNydW1iKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCB1cmw6IHN0cmluZyk6IFBhdGgge1xuICAgIGxldCBpc1VybCA9IHRydWU7XG5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHJvdXRlLmZpcnN0Q2hpbGQucm91dGVDb25maWcucGF0aCkge1xuICAgICAgaWYgKHVybCAhPT0gJy8nICYmICFyb3V0ZS5yb3V0ZUNvbmZpZy5sb2FkQ2hpbGRyZW4gJiYgIXJvdXRlLnJvdXRlQ29uZmlnLmNvbXBvbmVudCAmJiAhUm91dGluZ1NlcnZpY2UuaXNDaGlsZHJlblNlbGZSb3V0ZShyb3V0ZSkpIHtcbiAgICAgICAgaXNVcmwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogcm91dGUuZGF0YSxcbiAgICAgIHBhcmFtcyA6IHJvdXRlLnBhcmFtcyxcbiAgICAgIHVybDogaXNVcmwgPyB1cmwgOiBudWxsXG4gICAgfTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFtpbml0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGluaXRcbiAgICovXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHJvdXRlRXZlbnQgPT4ge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTc0NzM6IGV2ZW50IG5vdCBmaXJlZCBhbnltb3JlIG9uIGxvYWQgZm9yIHJvdXRlZCBjb21wb25lbnQuXG4gICAgICBpZiAocm91dGVFdmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgdGhpcy5ldmVudHMubmV4dChyb3V0ZUV2ZW50KTtcbiAgICAgICAgbGV0IHJvdXRlID0gdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUucm9vdC5zbmFwc2hvdCxcbiAgICAgICAgICB0bXBVcmwgPSAnJyxcbiAgICAgICAgICB1cmwgPSAnJyxcbiAgICAgICAgICByb290Um9vdCA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgcGF0aHM6IFBhdGhzID0gW107XG5cbiAgICAgICAgd2hpbGUgKHJvdXRlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICB0bXBVcmwgPSBgLyR7Um91dGluZ1NlcnZpY2UuY3JlYXRlVXJsKHJvdXRlKX1gO1xuXG4gICAgICAgICAgaWYgKHJvdXRlLm91dGxldCAhPT0gUFJJTUFSWV9PVVRMRVQgfHwgKCFyb3V0ZS5yb3V0ZUNvbmZpZy5wYXRoICYmICFyb290Um9vdCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvb3RSb290ID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAocm91dGUucGFyYW1zIHx8IHJvdXRlLmRhdGEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJvdXRlLnBhcmFtcykge1xuICAgICAgICAgICAgICBpZiAoIWtleSkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICBpZiAocm91dGUuZGF0YVsndGl0bGUnXSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLmRhdGFbJ3RpdGxlJ10gPSByb3V0ZS5kYXRhWyd0aXRsZSddLnJlcGxhY2UoYDoke2tleX1gLCByb3V0ZS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgICAgcm91dGUuZGF0YVsndGl0bGUnXSA9IHJvdXRlLmRhdGFbJ3RpdGxlJ10ucmVwbGFjZShgOiR7a2V5fWAsIHJvdXRlLnBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocm91dGUuZGF0YVsnYnJlYWRjcnVtYnMnXSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLmRhdGFbJ2JyZWFkY3J1bWJzJ10gPSByb3V0ZS5kYXRhWydicmVhZGNydW1icyddLnJlcGxhY2UoYDoke2tleX1gLCByb3V0ZS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJvdXRlLmRhdGFbJ2Rlc2NyaXB0aW9uJ10pIHtcbiAgICAgICAgICAgICAgICByb3V0ZS5kYXRhWydkZXNjcmlwdGlvbiddID0gcm91dGUuZGF0YVsnZGVzY3JpcHRpb24nXS5yZXBsYWNlKGA6JHtrZXl9YCwgcm91dGUucGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRtcFVybCA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXRocy5wdXNoKFJvdXRpbmdTZXJ2aWNlLmNyZWF0ZUJyZWFkY3J1bWIocm91dGUsIHRtcFVybCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgKz0gdG1wVXJsO1xuICAgICAgICAgICAgcGF0aHMucHVzaChSb3V0aW5nU2VydmljZS5jcmVhdGVCcmVhZGNydW1iKHJvdXRlLCB1cmwpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uQ2hhbmdlLm5leHQocGF0aHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBSb3V0aW5nU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3JvdXRpbmcuc2VydmljZSc7XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1icmVhZGNydW1icycsXG4gIHRlbXBsYXRlOiBgPG9sIGNsYXNzPVwiYnJlYWRjcnVtYlwiPlxuICA8bGkgKm5nRm9yPVwibGV0IGJyZWFkY3J1bWIgb2YgYnJlYWRjcnVtYnM7IGxldCBmaXJzdCA9IGZpcnN0OyBsZXQgbGFzdCA9IGxhc3RcIiBbY2xhc3MuYWN0aXZlXT1cImxhc3QgfHwgIWJyZWFkY3J1bWIudXJsXCI+XG4gICAgPGEgKm5nSWY9XCJicmVhZGNydW1iLnVybFwiIFtyb3V0ZXJMaW5rXT1cImJyZWFkY3J1bWIudXJsXCI+XG4gICAgICA8aSAqbmdJZj1cImZpcnN0XCIgbmdDbGFzcz1cInt7aG9tZUljb259fVwiPjwvaT5cbiAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCJicmVhZGNydW1iLmRhdGEuYnJlYWRjcnVtYnNcIj57e2JyZWFkY3J1bWIuZGF0YS5icmVhZGNydW1ic319PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCIhYnJlYWRjcnVtYi5kYXRhLmJyZWFkY3J1bWJzXCI+e3ticmVhZGNydW1iLmRhdGEudGl0bGV9fTwvbmctdGVtcGxhdGU+XG4gICAgPC9hPlxuICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCIhYnJlYWRjcnVtYi51cmxcIj5cbiAgICAgIDxpICpuZ0lmPVwiZmlyc3RcIiBuZ0NsYXNzPVwie3tob21lSWNvbn19XCI+PC9pPlxuICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImJyZWFkY3J1bWIuZGF0YS5icmVhZGNydW1ic1wiPnt7YnJlYWRjcnVtYi5kYXRhLmJyZWFkY3J1bWJzfX08L25nLXRlbXBsYXRlPlxuICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIiFicmVhZGNydW1iLmRhdGEuYnJlYWRjcnVtYnNcIj57e2JyZWFkY3J1bWIuZGF0YS50aXRsZX19PC9uZy10ZW1wbGF0ZT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L2xpPlxuPC9vbD5cbmAsXG4gIHN0eWxlczogW2AuYnJlYWRjcnVtYntmbG9hdDpyaWdodDtiYWNrZ3JvdW5kOjAgMDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZToxMnB4O3BhZGRpbmc6N3B4IDVweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTVweDtyaWdodDoxMHB4O2JvcmRlci1yYWRpdXM6MnB4fS5icmVhZGNydW1iPmxpPmF7Y29sb3I6IzQ0NDt0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9ja30uYnJlYWRjcnVtYj5saT5hPi5mYSwuYnJlYWRjcnVtYj5saT5hPi5nbHlwaGljb24sLmJyZWFkY3J1bWI+bGk+YT4uaW9ue21hcmdpbi1yaWdodDo1cHh9YF1cbn0pXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHB1YmxpYyBicmVhZGNydW1icztcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBob21lSWNvbiA9ICdmYSBmYS1ob21lJztcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcm91dGluZ1NlcnZpY2UgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gY2hhbmdlRGV0ZWN0b3JSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucm91dGluZ1NlcnZpY2Uub25DaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIHRoaXMuYnJlYWRjcnVtYnMgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25EZXN0cm95XG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IEJyZWFkY3J1bWJzQ29tcG9uZW50IH0gZnJvbSAnLi9icmVhZGNydW1icy5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbQnJlYWRjcnVtYnNDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtCcmVhZGNydW1ic0NvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYnNNb2R1bGUge31cbiIsImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCAsICBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgcGx1Y2sgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IExheW91dFN0YXRlIH0gZnJvbSAnLi9sYXlvdXQuc3RhdGUnO1xuXG4vKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIExheW91dFN0b3JlIHtcbiAgcHVibGljIHJlYWRvbmx5IGxheW91dFN0YXRlOiBPYnNlcnZhYmxlPExheW91dFN0YXRlPjtcblxuICBwcml2YXRlIF9sYXlvdXRTdGF0ZTogQmVoYXZpb3JTdWJqZWN0PExheW91dFN0YXRlPjtcbiAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsTGF5b3V0U3RhdGU6IExheW91dFN0YXRlID0ge1xuICAgIGlzU2lkZWJhckxlZnRDb2xsYXBzZWQ6IGZhbHNlLFxuICAgIGlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXI6IGZhbHNlLFxuICAgIGlzU2lkZWJhckxlZnRNb3VzZU92ZXI6IGZhbHNlLFxuICAgIGlzU2lkZWJhckxlZnRNaW5pOiB0cnVlLFxuICAgIHNpZGViYXJSaWdodFNraW46ICdkYXJrJyxcbiAgICBpc1NpZGViYXJSaWdodENvbGxhcHNlZDogdHJ1ZSxcbiAgICBpc1NpZGViYXJSaWdodE92ZXJDb250ZW50OiB0cnVlLFxuICAgIGxheW91dDogJ25vcm1hbCcsXG4gICAgc2lkZWJhckxlZnRNZW51OiBbXSxcbiAgICBzaWRlYmFyTGVmdE1lbnVBY3RpdmVVcmw6ICcnLFxuICAgIHNraW46ICdibHVlJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBsYXlvdXRDb25maWcgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IobGF5b3V0Q29uZmlnOiBMYXlvdXRTdGF0ZSkge1xuICAgIGlmIChsYXlvdXRDb25maWcpIHtcbiAgICAgIHRoaXMuaW5pdGlhbExheW91dFN0YXRlID0gT2JqZWN0LmFzc2lnbih0aGlzLmluaXRpYWxMYXlvdXRTdGF0ZSwgbGF5b3V0Q29uZmlnKTtcbiAgICB9XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMuaW5pdGlhbExheW91dFN0YXRlKTtcbiAgICB0aGlzLmxheW91dFN0YXRlID0gdGhpcy5fbGF5b3V0U3RhdGUuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogW3dpbmRvd0lubmVySGVpZ2h0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHdpbmRvd0lubmVySGVpZ2h0XG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IHdpbmRvd0lubmVySGVpZ2h0KCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPG51bWJlcj4+dGhpcy5sYXlvdXRTdGF0ZS5waXBlKHBsdWNrKCd3aW5kb3dJbm5lckhlaWdodCcpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbd2luZG93SW5uZXJXaWR0aCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCB3aW5kb3dJbm5lcldpZHRoXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IHdpbmRvd0lubmVyV2lkdGgoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gPE9ic2VydmFibGU8bnVtYmVyPj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ3dpbmRvd0lubmVyV2lkdGgnKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogW2lzU2lkZWJhckxlZnRDb2xsYXBzZWQgZGVzY3JpcHRpb25dXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGlzU2lkZWJhckxlZnRDb2xsYXBzZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPGJvb2xlYW4+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnaXNTaWRlYmFyTGVmdENvbGxhcHNlZCcpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbaXNTaWRlYmFyTGVmdEV4cGFuZE9uT3ZlciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBpc1NpZGViYXJMZWZ0RXhwYW5kT25PdmVyXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPGJvb2xlYW4+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnaXNTaWRlYmFyTGVmdEV4cGFuZE9uT3ZlcicpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbaXNTaWRlYmFyTGVmdE1vdXNlT3ZlciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBpc1NpZGViYXJMZWZ0TW91c2VPdmVyXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGlzU2lkZWJhckxlZnRNb3VzZU92ZXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPGJvb2xlYW4+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnaXNTaWRlYmFyTGVmdE1vdXNlT3ZlcicpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbaXNTaWRlYmFyTGVmdE1pbmkgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaXNTaWRlYmFyTGVmdE1pbmlcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgaXNTaWRlYmFyTGVmdE1pbmkoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPGJvb2xlYW4+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnaXNTaWRlYmFyTGVmdE1pbmknKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogW3NpZGViYXJSaWdodFNraW4gZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2lkZWJhclJpZ2h0U2tpblxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBzaWRlYmFyUmlnaHRTa2luKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPHN0cmluZz4+dGhpcy5sYXlvdXRTdGF0ZS5waXBlKHBsdWNrKCdzaWRlYmFyUmlnaHRTa2luJyksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtpc1NpZGViYXJSaWdodENvbGxhcHNlZCBkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIDxPYnNlcnZhYmxlPGJvb2xlYW4+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQnKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogW2lzU2lkZWJhclJpZ2h0T3ZlckNvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaXNTaWRlYmFyUmlnaHRPdmVyQ29udGVudFxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBpc1NpZGViYXJSaWdodE92ZXJDb250ZW50KCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiA8T2JzZXJ2YWJsZTxib29sZWFuPj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ2lzU2lkZWJhclJpZ2h0T3ZlckNvbnRlbnQnKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogW3NpZGViYXJMZWZ0TWVudSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzaWRlYmFyTGVmdE1lbnVcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgc2lkZWJhckxlZnRNZW51KCk6IE9ic2VydmFibGU8QXJyYXk8YW55Pj4ge1xuICAgIHJldHVybiA8T2JzZXJ2YWJsZTxBcnJheTxhbnk+Pj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ3NpZGViYXJMZWZ0TWVudScpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2lkZWJhckxlZnRNZW51QWN0aXZlVXJsIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNpZGViYXJMZWZ0TWVudUFjdGl2ZVVybFxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBzaWRlYmFyTGVmdE1lbnVBY3RpdmVVcmwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gPE9ic2VydmFibGU8c3RyaW5nPj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ3NpZGViYXJMZWZ0TWVudUFjdGl2ZVVybCcpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2lkZWJhckxlZnRFbGVtZW50SGVpZ2h0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNpZGViYXJMZWZ0RWxlbWVudEhlaWdodFxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBzaWRlYmFyTGVmdEVsZW1lbnRIZWlnaHQoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gPE9ic2VydmFibGU8bnVtYmVyPj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ3NpZGViYXJMZWZ0RWxlbWVudEhlaWdodCcpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbbGF5b3V0VHlwZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBsYXlvdXRUeXBlXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGxheW91dCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiA8T2JzZXJ2YWJsZTxzdHJpbmc+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnbGF5b3V0JyksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtza2luIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNraW5cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgc2tpbigpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiA8T2JzZXJ2YWJsZTxzdHJpbmc+PnRoaXMubGF5b3V0U3RhdGUucGlwZShwbHVjaygnc2tpbicpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbd3JhcHBlckNsYXNzZXMgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgd3JhcHBlckNsYXNzZXNcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgd3JhcHBlckNsYXNzZXMoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gPE9ic2VydmFibGU8c3RyaW5nPj50aGlzLmxheW91dFN0YXRlLnBpcGUocGx1Y2soJ3dyYXBwZXJDbGFzc2VzJyksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzaWRlYmFyTGVmdENvbGxhcHNlZCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzaWRlYmFyTGVmdENvbGxhcHNlZFxuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNpZGViYXJMZWZ0Q29sbGFwc2VkKHZhbHVlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7aXNTaWRlYmFyTGVmdENvbGxhcHNlZDogdmFsdWV9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogW3NpZGViYXJMZWZ0RXhwYW5kT25PdmVyIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNpZGViYXJMZWZ0RXhwYW5kT25PdmVyXG4gICAqIEBwYXJhbSB2YWx1ZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgc2lkZWJhckxlZnRFeHBhbmRPbk92ZXIodmFsdWU/OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUubmV4dChcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbGF5b3V0U3RhdGUudmFsdWUsIHtpc1NpZGViYXJMZWZ0RXhwYW5kT25PdmVyOiB2YWx1ZX0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2V0U2lkZWJhckxlZnRFbGVtZW50SGVpZ2h0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldFNpZGViYXJMZWZ0RWxlbWVudEhlaWdodFxuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldFNpZGViYXJMZWZ0RWxlbWVudEhlaWdodCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUubmV4dChcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbGF5b3V0U3RhdGUudmFsdWUsIHtzaWRlYmFyTGVmdEVsZW1lbnRIZWlnaHQ6IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRTaWRlYmFyUmlnaHRTa2luIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldFNpZGViYXJSaWdodFNraW5cbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzZXRTaWRlYmFyUmlnaHRTa2luKHZhbHVlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUubmV4dChcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbGF5b3V0U3RhdGUudmFsdWUsIHtzaWRlYmFyUmlnaHRTa2luOiB2YWx1ZX0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2lkZWJhckxlZnRNb3VzZU92ZXIgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2lkZWJhckxlZnRNb3VzZU92ZXJcbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzaWRlYmFyTGVmdE1vdXNlT3Zlcih2YWx1ZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9sYXlvdXRTdGF0ZS5uZXh0KFxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9sYXlvdXRTdGF0ZS52YWx1ZSwge2lzU2lkZWJhckxlZnRNb3VzZU92ZXI6IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzaWRlYmFyTGVmdE1pbmkgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2lkZWJhckxlZnRNaW5pXG4gICAqIEBwYXJhbSB2YWx1ZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgc2lkZWJhckxlZnRNaW5pKHZhbHVlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7aXNTaWRlYmFyTGVmdE1pbmk6IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzaWRlYmFyUmlnaHRDb2xsYXBzZWQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2lkZWJhclJpZ2h0Q29sbGFwc2VkXG4gICAqIEBwYXJhbSB2YWx1ZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgc2lkZWJhclJpZ2h0Q29sbGFwc2VkKHZhbHVlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7aXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQ6IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzaWRlYmFyUmlnaHRPdmVyQ29udGVudCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzaWRlYmFyUmlnaHRPdmVyQ29udGVudFxuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNpZGViYXJSaWdodE92ZXJDb250ZW50KHZhbHVlPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7aXNTaWRlYmFyUmlnaHRPdmVyQ29udGVudDogdmFsdWV9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogW3NldFNpZGViYXJMZWZ0TWVudSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRTaWRlYmFyTGVmdE1lbnVcbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzZXRTaWRlYmFyTGVmdE1lbnUodmFsdWU6IEFycmF5PGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLl9sYXlvdXRTdGF0ZS5uZXh0KFxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9sYXlvdXRTdGF0ZS52YWx1ZSwge3NpZGViYXJMZWZ0TWVudTogdmFsdWV9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogW3NldFNpZGViYXJMZWZ0TWVudUFjdGl2ZVVybCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRTaWRlYmFyTGVmdE1lbnVBY3RpdmVVcmxcbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzZXRTaWRlYmFyTGVmdE1lbnVBY3RpdmVVcmwodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7c2lkZWJhckxlZnRNZW51QWN0aXZlVXJsOiB2YWx1ZX0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2V0TGF5b3V0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldExheW91dFxuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldExheW91dCh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUubmV4dChcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbGF5b3V0U3RhdGUudmFsdWUsIHtsYXlvdXQ6IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRTa2luIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldFNraW5cbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzZXRTa2luKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXlvdXRTdGF0ZS5uZXh0KFxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9sYXlvdXRTdGF0ZS52YWx1ZSwge3NraW46IHZhbHVlfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRXcmFwcGVyQ2xhc3NlcyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRXcmFwcGVyQ2xhc3Nlc1xuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldFdyYXBwZXJDbGFzc2VzKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXlvdXRTdGF0ZS5uZXh0KFxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9sYXlvdXRTdGF0ZS52YWx1ZSwge3dyYXBwZXJDbGFzc2VzOiB2YWx1ZX0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbc2V0V2luZG93SW5uZXJIZWlnaHQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2V0V2luZG93SW5uZXJIZWlnaHRcbiAgICogQHBhcmFtIHZhbHVlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzZXRXaW5kb3dJbm5lckhlaWdodCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGF5b3V0U3RhdGUubmV4dChcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbGF5b3V0U3RhdGUudmFsdWUsIHt3aW5kb3dJbm5lckhlaWdodDogdmFsdWV9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogW3NldFdpbmRvd0lubmVyV2lkdGggZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2V0V2luZG93SW5uZXJXaWR0aFxuICAgKiBAcGFyYW0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldFdpbmRvd0lubmVyV2lkdGgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2xheW91dFN0YXRlLm5leHQoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2xheW91dFN0YXRlLnZhbHVlLCB7d2luZG93SW5uZXJXaWR0aDogdmFsdWV9KVxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpZGViYXJSaWdodFNlcnZpY2Uge1xuICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogW3Njcm9sbEhlaWdodCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzY3JvbGxIZWlnaHRcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgc2Nyb2xsSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZiA/IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodCA6IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEhlYWRlclNlcnZpY2Uge1xuICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogW29mZnNldEhlaWdodCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvZmZzZXRIZWlnaHRcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgZ2V0IG9mZnNldEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvb3RlclNlcnZpY2Uge1xuICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogW29mZnNldEhlaWdodCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvZmZzZXRIZWlnaHRcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgZ2V0IG9mZnNldEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5cbi8qKlxuICogW3Rocm90dGxlIGRlc2NyaXB0aW9uXVxuICogQG1ldGhvZCB0aHJvdHRsZVxuICogQHBhcmFtIGNhbGxiYWNrIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSBkZWxheSAgICBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrOiBGdW5jdGlvbiwgZGVsYXk6IG51bWJlcik6IChhcmdzOiBBcnJheTxhbnk+KSA9PiB2b2lkIHtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfVxuICB9O1xufVxuXG5cbi8qKlxuICogW3JlbW92ZVN1YnNjcmlwdGlvbnMgZGVzY3JpcHRpb25dXG4gKiBAbWV0aG9kIHJlbW92ZVN1YnNjcmlwdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucyk6IEFycmF5PFN1YnNjcmlwdGlvbj4ge1xuICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24pID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBbcmVtb3ZlTGlzdGVuZXJzIGRlc2NyaXB0aW9uXVxuICogQG1ldGhvZCByZW1vdmVMaXN0ZW5lcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhsaXN0ZW5lcnMpOiBBcnJheTxGdW5jdGlvbj4ge1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBGdW5jdGlvbikgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gW107XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uU3RhcnQsIE5hdmlnYXRpb25FbmQsIEV2ZW50IGFzIFJvdXRlckV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IExheW91dFN0b3JlIH0gZnJvbSAnLi4vbGF5b3V0LnN0b3JlJztcblxuaW1wb3J0IHsgUm91dGluZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yb3V0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2lkZWJhclJpZ2h0U2VydmljZSB9IGZyb20gJy4uL3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5zZXJ2aWNlJztcbmltcG9ydCB7IEhlYWRlclNlcnZpY2UgfSBmcm9tICcuLi9oZWFkZXIvaGVhZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9vdGVyU2VydmljZSB9IGZyb20gJy4uL2Zvb3Rlci9mb290ZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IHJlbW92ZVN1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstbGF5b3V0LWNvbnRlbnQnLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJjb250ZW50LXdyYXBwZXJcIiBbc3R5bGUubWluLWhlaWdodC5weF09XCJoZWlnaHRTdHlsZVwiPlxuICA8ZGl2ICNjb250ZW50SW5uZXJFbGVtZW50IGNsYXNzPVwiY29udGVudC1pbm5lclwiPlxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIlttay1sYXlvdXQtY29udGVudC1iZWZvcmUtaGVhZGVyXVwiPjwvbmctY29udGVudD5cbiAgICA8c2VjdGlvbiAqbmdJZj1cImhlYWRlciB8fCBkZXNjcmlwdGlvblwiIGNsYXNzPVwiY29udGVudC1oZWFkZXJcIj5cbiAgICAgIDxoMT5cbiAgICAgICAge3toZWFkZXJ9fVxuICAgICAgICA8c21hbGwgKm5nSWY9XCJkZXNjcmlwdGlvblwiPnt7ZGVzY3JpcHRpb259fTwvc21hbGw+XG4gICAgICA8L2gxPlxuICAgICAgPG1rLWJyZWFkY3J1bWJzPjwvbWstYnJlYWRjcnVtYnM+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIlttay1sYXlvdXQtY29udGVudC1hZnRlci1oZWFkZXJdXCI+PC9uZy1jb250ZW50PlxuICAgIDxzZWN0aW9uIGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvc2VjdGlvbj5cbiAgPC9kaXY+XG48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2A6aG9zdHtkaXNwbGF5OmJsb2NrfS5jb250ZW50LXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmV9YF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwdWJsaWMgaGVhZGVyOiBzdHJpbmc7XG4gIHB1YmxpYyBoZWlnaHRTdHlsZTogbnVtYmVyO1xuICBwdWJsaWMgc2lkZWJhckxlZnRIZWlnaHQ6IG51bWJlcjtcbiAgcHVibGljIHdpbmRvd0lubmVySGVpZ2h0OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBsYXlvdXQ6IHN0cmluZztcbiAgcHJpdmF0ZSB0aXRsZVRhZzogc3RyaW5nO1xuICBwcml2YXRlIG5hdmlnYXRpb25FbmQ6IGJvb2xlYW47XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IFtdO1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnRJbm5lckVsZW1lbnQnKSBwcml2YXRlIGNvbnRlbnRJbm5lckVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGxheW91dFN0b3JlXG4gICAqIEBwYXJhbSByb3V0aW5nU2VydmljZVxuICAgKiBAcGFyYW0gdGl0bGVTZXJ2aWNlXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmXG4gICAqIEBwYXJhbSBjaGFuZ2VEZXRlY3RvclJlZlxuICAgKiBAcGFyYW0gc2lkZWJhclJpZ2h0U2VydmljZVxuICAgKiBAcGFyYW0gaGVhZGVyU2VydmljZVxuICAgKiBAcGFyYW0gZm9vdGVyU2VydmljZVxuICAgKiBAcGFyYW0gcm91dGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxheW91dFN0b3JlOiBMYXlvdXRTdG9yZSxcbiAgICBwcml2YXRlIHJvdXRpbmdTZXJ2aWNlOiBSb3V0aW5nU2VydmljZSxcbiAgICBwcml2YXRlIHRpdGxlU2VydmljZTogVGl0bGUsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgc2lkZWJhclJpZ2h0U2VydmljZTogU2lkZWJhclJpZ2h0U2VydmljZSxcbiAgICBwcml2YXRlIGhlYWRlclNlcnZpY2U6IEhlYWRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBmb290ZXJTZXJ2aWNlOiBGb290ZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRpdGxlVGFnID0gdGhpcy50aXRsZVNlcnZpY2UuZ2V0VGl0bGUoKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMucm91dGluZ1NlcnZpY2Uub25DaGFuZ2Uuc3Vic2NyaWJlKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgdGhpcy50aXRsZVNlcnZpY2Uuc2V0VGl0bGUodGhpcy5nZXRUaXRsZSh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXS5kYXRhWyd0aXRsZSddKSk7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0uZGF0YVsndGl0bGUnXTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdLmRhdGFbJ2Rlc2NyaXB0aW9uJ107XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMucm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoKHJvdXRlRXZlbnQ6IFJvdXRlckV2ZW50KSA9PiB7XG4gICAgICBpZiAocm91dGVFdmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25TdGFydCkge1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25FbmQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChyb3V0ZUV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkge1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25FbmQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldENvbnRlbnRNaW5IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0RWxlbWVudEhlaWdodC5zdWJzY3JpYmUoKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgIHRoaXMuc2lkZWJhckxlZnRIZWlnaHQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0Q29udGVudE1pbkhlaWdodCgpO1xuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUubGF5b3V0LnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5sYXlvdXQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0Q29udGVudE1pbkhlaWdodCgpO1xuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUud2luZG93SW5uZXJIZWlnaHQuc3Vic2NyaWJlKCh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICB0aGlzLndpbmRvd0lubmVySGVpZ2h0ID0gdmFsdWU7XG4gICAgICB0aGlzLnNldENvbnRlbnRNaW5IZWlnaHQoKTtcbiAgICB9KSk7XG4gICAgdGhpcy5oZWlnaHRTdHlsZSA9IHRoaXMud2luZG93SW5uZXJIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzdHJveVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzY3JvbGxIZWlnaHQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2Nyb2xsSGVpZ2h0XG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIGdldCBzY3JvbGxIZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50SW5uZXJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIFtnZXRUaXRsZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBnZXRUaXRsZVxuICAgKiBAcGFyYW0gdGl0bGUgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgZ2V0VGl0bGUodGl0bGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRpdGxlID8gYCR7dGl0bGV9IC0gJHt0aGlzLnRpdGxlVGFnfWAgOiB0aGlzLnRpdGxlVGFnO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRNaW5IZWlnaHQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2V0TWluSGVpZ2h0XG4gICAqL1xuICBwcml2YXRlIHNldENvbnRlbnRNaW5IZWlnaHQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubmF2aWdhdGlvbkVuZCkge1xuICAgICAgbGV0IGhlaWdodFN0eWxlO1xuXG4gICAgICBjb25zdCBoZWFkZXJGb290ZXJPZmZzZXRIZWlnaHQgPSB0aGlzLmhlYWRlclNlcnZpY2Uub2Zmc2V0SGVpZ2h0ICsgdGhpcy5mb290ZXJTZXJ2aWNlLm9mZnNldEhlaWdodDtcblxuICAgICAgaWYgKHRoaXMubGF5b3V0ID09PSAnZml4ZWQnKSB7XG4gICAgICAgIGhlaWdodFN0eWxlID0gdGhpcy53aW5kb3dJbm5lckhlaWdodCAtIHRoaXMuZm9vdGVyU2VydmljZS5vZmZzZXRIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaWRlYmFyUmlnaHQgPVxuICAgICAgICAgIHRoaXMuc2lkZWJhclJpZ2h0U2VydmljZS5zY3JvbGxIZWlnaHQgP1xuICAgICAgICAgICAgdGhpcy5zaWRlYmFyUmlnaHRTZXJ2aWNlLnNjcm9sbEhlaWdodCAtIHRoaXMuaGVhZGVyU2VydmljZS5vZmZzZXRIZWlnaHQgOiAwO1xuXG4gICAgICAgIGhlaWdodFN0eWxlID0gTWF0aC5tYXgoXG4gICAgICAgICAgdGhpcy53aW5kb3dJbm5lckhlaWdodCAtIGhlYWRlckZvb3Rlck9mZnNldEhlaWdodCxcbiAgICAgICAgICB0aGlzLnNpZGViYXJMZWZ0SGVpZ2h0IC0gdGhpcy5oZWFkZXJTZXJ2aWNlLm9mZnNldEhlaWdodCxcbiAgICAgICAgICBzaWRlYmFyUmlnaHRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhlaWdodFN0eWxlICYmIGhlaWdodFN0eWxlICE9PSB0aGlzLmhlaWdodFN0eWxlKSB7XG4gICAgICAgIGlmICh0aGlzLnNjcm9sbEhlaWdodCA+IGhlaWdodFN0eWxlKSB7XG4gICAgICAgICAgaGVpZ2h0U3R5bGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVpZ2h0U3R5bGUgPSBoZWlnaHRTdHlsZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IEJyZWFkY3J1bWJzTW9kdWxlIH0gZnJvbSAnLi4vLi4vYnJlYWRjcnVtYnMvYnJlYWRjcnVtYnMubW9kdWxlJztcbmltcG9ydCB7IENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NvbnRlbnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGUsIEJyZWFkY3J1bWJzTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbQ29udGVudENvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbQ29udGVudENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIE9uSW5pdCwgVmlld0NoaWxkLCBUZW1wbGF0ZVJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb290ZXJTZXJ2aWNlIH0gZnJvbSAnLi9mb290ZXIuc2VydmljZSc7XG5cbi8qKlxuICogRm9vdGVyIExlZnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstbGF5b3V0LWZvb3Rlci1sZWZ0JyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgRm9vdGVyTGVmdENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUmVmJykgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuXG4vKipcbiAqIEZvb3RlciBSaWdodFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1sYXlvdXQtZm9vdGVyLXJpZ2h0JyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgRm9vdGVyUmlnaHRDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVJlZicpIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pjtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstbGF5b3V0LWZvb3RlcicsXG4gIHRlbXBsYXRlOiBgPGZvb3RlciBjbGFzcz1cIm1haW4tZm9vdGVyXCI+XG4gIDxkaXYgY2xhc3M9XCJwdWxsLXJpZ2h0IGhpZGRlbi14c1wiPlxuICAgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJmb290ZXJSaWdodENvbXBvbmVudD8udGVtcGxhdGVSZWZcIj48L25nLXRlbXBsYXRlPlxuICA8L2Rpdj5cbiAgPG5nLXRlbXBsYXRlIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImZvb3RlckxlZnRDb21wb25lbnQ/LnRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbjwvZm9vdGVyPlxuYCxcbiAgc3R5bGVzOiBbYDpob3N0e2Rpc3BsYXk6YmxvY2t9YF1cbn0pXG5leHBvcnQgY2xhc3MgRm9vdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQENvbnRlbnRDaGlsZChGb290ZXJMZWZ0Q29tcG9uZW50KSBwdWJsaWMgZm9vdGVyTGVmdENvbXBvbmVudDogRm9vdGVyTGVmdENvbXBvbmVudDtcbiAgQENvbnRlbnRDaGlsZChGb290ZXJSaWdodENvbXBvbmVudCkgcHVibGljIGZvb3RlclJpZ2h0Q29tcG9uZW50OiBGb290ZXJSaWdodENvbXBvbmVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBmb290ZXJTZXJ2aWNlOiBGb290ZXJTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmZvb3RlclNlcnZpY2UuZWxlbWVudFJlZiA9IHRoaXMuZWxlbWVudFJlZjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEZvb3RlckNvbXBvbmVudCwgRm9vdGVyTGVmdENvbXBvbmVudCwgRm9vdGVyUmlnaHRDb21wb25lbnQgfSBmcm9tICcuL2Zvb3Rlci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtGb290ZXJDb21wb25lbnQsIEZvb3RlckxlZnRDb21wb25lbnQsIEZvb3RlclJpZ2h0Q29tcG9uZW50XSxcbiAgICBkZWNsYXJhdGlvbnM6IFtGb290ZXJDb21wb25lbnQsIEZvb3RlckxlZnRDb21wb25lbnQsIEZvb3RlclJpZ2h0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBGb290ZXJNb2R1bGUgeyB9XG4iLCJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7TGF5b3V0U3RvcmV9IGZyb20gJy4uL2xheW91dC5zdG9yZSc7XG5cbmltcG9ydCB7SGVhZGVyU2VydmljZX0gZnJvbSAnLi9oZWFkZXIuc2VydmljZSc7XG5cbmltcG9ydCB7cmVtb3ZlTGlzdGVuZXJzLCByZW1vdmVTdWJzY3JpcHRpb25zfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcblxuLyoqXG4gKiBIZWFkZXIgTG9nb1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1sYXlvdXQtaGVhZGVyLWxvZ28nLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBIZWFkZXJMb2dvQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG5cbi8qKlxuICogSGVhZGVyIExvZ28gTWluaVxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1sYXlvdXQtaGVhZGVyLWxvZ28tbWluaScsXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlckxvZ29NaW5pQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG5cbi8qKlxuICogSGVhZGVyXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWxheW91dC1oZWFkZXInLFxuICB0ZW1wbGF0ZTogYDxoZWFkZXIgI2hlYWRlckVsZW1lbnQgY2xhc3M9XCJtYWluLWhlYWRlclwiPlxuICA8YSBbcm91dGVyTGlua109XCJsb2dvTGlua1wiIGNsYXNzPVwibG9nb1wiPlxuICAgIDxzcGFuIGNsYXNzPVwibG9nby1taW5pXCI+PG5nLXRlbXBsYXRlIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImhlYWRlckxvZ29NaW5pQ29tcG9uZW50Py50ZW1wbGF0ZVJlZlwiPjwvbmctdGVtcGxhdGU+PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwibG9nby1sZ1wiPjxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJoZWFkZXJMb2dvQ29tcG9uZW50Py50ZW1wbGF0ZVJlZlwiPjwvbmctdGVtcGxhdGU+PC9zcGFuPlxuICA8L2E+XG4gIDxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXN0YXRpYy10b3BcIj5cbiAgICA8YSAqbmdJZj1cImlzU2lkZWJhckxlZnRUb2dnbGVcIiAjc2lkZWJhckxlZnRUb2dnbGVFbGVtZW50IGhyZWY9XCIjXCIgY2xhc3M9XCJzaWRlYmFyLXRvZ2dsZVwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cImljb24tYmFyXCI+PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLWJhclwiPjwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1iYXJcIj48L3NwYW4+XG4gICAgPC9hPlxuICAgIDxkaXYgKm5nSWY9XCJpc1NpZGViYXJSaWdodFRvZ2dsZVwiIGNsYXNzPVwic2lkZWJhci1yaWdodC10b2dnbGVcIj5cbiAgICAgIDxhICNzaWRlYmFyUmlnaHRUb2dnbGVFbGVtZW50IGhyZWY9XCIjXCI+PGkgY2xhc3M9XCJmYSBmYS1nZWFyc1wiPjwvaT48L2E+XG4gICAgPC9kaXY+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICA8L25hdj5cbjwvaGVhZGVyPlxuYCxcbiAgc3R5bGVzOiBbYDpob3N0e2Rpc3BsYXk6YmxvY2t9LnNpZGViYXItcmlnaHQtdG9nZ2xle2Zsb2F0OnJpZ2h0fS5zaWRlYmFyLXJpZ2h0LXRvZ2dsZSBhe3BhZGRpbmc6MTVweDtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjIwcHg7Y3Vyc29yOnBvaW50ZXJ9YF1cbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBpc1NpZGViYXJMZWZ0Q29sbGFwc2VkOiBib29sZWFuO1xuICBwcml2YXRlIGlzU2lkZWJhclJpZ2h0Q29sbGFwc2VkOiBib29sZWFuO1xuICBwcml2YXRlIGxpc3RlbmVycyA9IFtdO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICBASW5wdXQoKSBpc1NpZGViYXJMZWZ0VG9nZ2xlID0gdHJ1ZTtcbiAgQElucHV0KCkgaXNTaWRlYmFyUmlnaHRUb2dnbGUgPSB0cnVlO1xuICBASW5wdXQoKSBsb2dvTGluazogc3RyaW5nIHwgYW55W10gPSAnLyc7XG5cbiAgQENvbnRlbnRDaGlsZChIZWFkZXJMb2dvQ29tcG9uZW50KSBwdWJsaWMgaGVhZGVyTG9nb0NvbXBvbmVudDogSGVhZGVyTG9nb0NvbXBvbmVudDtcbiAgQENvbnRlbnRDaGlsZChIZWFkZXJMb2dvTWluaUNvbXBvbmVudCkgcHVibGljIGhlYWRlckxvZ29NaW5pQ29tcG9uZW50OiBIZWFkZXJMb2dvTWluaUNvbXBvbmVudDtcblxuICBAVmlld0NoaWxkKCdoZWFkZXJFbGVtZW50JykgcHJpdmF0ZSBoZWFkZXJFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdzaWRlYmFyTGVmdFRvZ2dsZUVsZW1lbnQnKSBwcml2YXRlIHNpZGViYXJMZWZ0VG9nZ2xlRWxlbWVudDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnc2lkZWJhclJpZ2h0VG9nZ2xlRWxlbWVudCcpIHByaXZhdGUgc2lkZWJhclJpZ2h0VG9nZ2xlRWxlbWVudDogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gbGF5b3V0U3RvcmUgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gbmdab25lICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gZWxlbWVudFJlZiAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGhlYWRlclNlcnZpY2UgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxheW91dFN0b3JlOiBMYXlvdXRTdG9yZSxcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgaGVhZGVyU2VydmljZTogSGVhZGVyU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdBZnRlclZpZXdJbml0XG4gICAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5oZWFkZXJTZXJ2aWNlLmVsZW1lbnRSZWYgPSB0aGlzLmhlYWRlckVsZW1lbnQ7XG5cbiAgICBpZiAodGhpcy5zaWRlYmFyTGVmdFRvZ2dsZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuaXNTaWRlYmFyTGVmdENvbGxhcHNlZC5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHRoaXMuaXNTaWRlYmFyTGVmdENvbGxhcHNlZCA9IHZhbHVlO1xuICAgICAgfSkpO1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHRoaXMucmVuZGVyZXIyLmxpc3Rlbih0aGlzLnNpZGViYXJMZWZ0VG9nZ2xlRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0Q29sbGFwc2VkKCF0aGlzLmlzU2lkZWJhckxlZnRDb2xsYXBzZWQpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2lkZWJhclJpZ2h0VG9nZ2xlRWxlbWVudCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5sYXlvdXRTdG9yZS5pc1NpZGViYXJSaWdodENvbGxhcHNlZC5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHRoaXMuaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQgPSB2YWx1ZTtcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4odGhpcy5zaWRlYmFyUmlnaHRUb2dnbGVFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2lkZWJhclJpZ2h0Q29sbGFwc2VkKCF0aGlzLmlzU2lkZWJhclJpZ2h0Q29sbGFwc2VkKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkRlc3Ryb3lcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gcmVtb3ZlTGlzdGVuZXJzKHRoaXMubGlzdGVuZXJzKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSByZW1vdmVTdWJzY3JpcHRpb25zKHRoaXMuc3Vic2NyaXB0aW9ucyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgSGVhZGVyQ29tcG9uZW50LCBIZWFkZXJMb2dvQ29tcG9uZW50LCBIZWFkZXJMb2dvTWluaUNvbXBvbmVudCB9IGZyb20gJy4vaGVhZGVyLmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGUgXSxcbiAgICBleHBvcnRzOiBbSGVhZGVyQ29tcG9uZW50LCBIZWFkZXJMb2dvQ29tcG9uZW50LCBIZWFkZXJMb2dvTWluaUNvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbSGVhZGVyQ29tcG9uZW50LCBIZWFkZXJMb2dvQ29tcG9uZW50LCBIZWFkZXJMb2dvTWluaUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVyTW9kdWxlIHsgfVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiwgTmdab25lLCBBZnRlckNvbnRlbnRJbml0LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICcuL2FuaW1hdGlvbnMuaW50ZXJmYWNlJztcbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtDb2xsYXBzZUFuaW1hdGlvbl0nXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNlQW5pbWF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGZpcnN0U3RhcnQgPSB0cnVlO1xuICBwcml2YXRlIGlzQ29sbGFwc2VkOiBib29sZWFuO1xuICBwcml2YXRlIGxhc3RJc0NvbGxhcHNlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSB0cmFuc2l0aW9uaW5nOiBib29sZWFuO1xuICBwcml2YXRlIGxpc3RlbmVyOiBGdW5jdGlvbjtcblxuICBASW5wdXQoKSBwdWJsaWMgY29sbGFwc2VBbmltYXRpb25EdXJhdGlvbiA9IDM1MDtcbiAgQElucHV0KCkgcHVibGljIGNvbGxhcHNlQW5pbWF0aW9uVGltaW5nOiBzdHJpbmc7XG4gIEBJbnB1dCgnbWtDb2xsYXBzZUFuaW1hdGlvbicpIHB1YmxpYyBzZXQgX2lzQ29sbGFwc2VkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5sYXN0SXNDb2xsYXBzZWQgPSB0aGlzLmlzQ29sbGFwc2VkO1xuICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB2YWx1ZTtcbiAgICBpZiAoIXRoaXMuZmlyc3RTdGFydCkge1xuICAgICAgdGhpcy5lbWl0KCdzdGFydCcpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMudW5Db2xsYXBzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBPdXRwdXQoJ21rQ29sbGFwc2VBbmltYXRpb24uc3RhcnQnKSBwdWJsaWMgc3RhcnRFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoJ21rQ29sbGFwc2VBbmltYXRpb24uZG9uZScpIHB1YmxpYyBkb25lRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gbmdab25lICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5jb2xsYXBzZUFuaW1hdGlvbkR1cmF0aW9uICYmIHRoaXMuY29sbGFwc2VBbmltYXRpb25EdXJhdGlvbiAhPT0gMzUwKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBgJHt0aGlzLmNvbGxhcHNlQW5pbWF0aW9uRHVyYXRpb259bXNgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29sbGFwc2VBbmltYXRpb25UaW1pbmcpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCB0aGlzLmNvbGxhcHNlQW5pbWF0aW9uVGltaW5nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ0FmdGVyQ29udGVudEluaXRcbiAgICovXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLmVtaXQoJ3N0YXJ0Jyk7XG4gICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbGxhcHNpbmcnKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdkb25lJyk7XG4gICAgdGhpcy5maXJzdFN0YXJ0ID0gZmFsc2U7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbbmdPbkRlc3Ryb3kgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgbmdPbkRlc3Ryb3lcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcikge1xuICAgICAgdGhpcy5saXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbc3Vic2NyaXB0aW9ucyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzdWJzY3JpcHRpb25zXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lciA9IHRoaXMucmVuZGVyZXIyLmxpc3Rlbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RyYW5zaXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5pc0NvbGxhcHNlZCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndW4tY29sbGFwc2UnKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbGxhcHNpbmcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnKTtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKTtcbiAgICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFt1bkNvbGxhcHNlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHVuQ29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgdW5Db2xsYXBzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndW4tY29sbGFwc2UnKTtcbiAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknKTtcbiAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIGAke3RoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodH1weGApO1xuICB9XG5cbiAgLyoqXG4gICAqIFtjb2xsYXBzZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjb2xsYXBzZVxuICAgKi9cbiAgcHJpdmF0ZSBjb2xsYXBzZSgpOiB2b2lkIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnRyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCBgJHt0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHR9cHhgKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjb2xsYXBzaW5nJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCBgMHB4YCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdChwaGFzZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGV2ZW50OiBBbmltYXRpb25FdmVudCA9IHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgZnJvbVN0YXRlOiB0aGlzLmxhc3RJc0NvbGxhcHNlZCA9PT0gdW5kZWZpbmVkID8gJ3ZvaWQnIDogdGhpcy5sYXN0SXNDb2xsYXBzZWQgPyAnMScgOiAnMCcsXG4gICAgICBwaGFzZU5hbWU6IHBoYXNlTmFtZSxcbiAgICAgIHRvU3RhdGU6IHRoaXMuaXNDb2xsYXBzZWQgPT09IHVuZGVmaW5lZCA/ICd2b2lkJyA6IHRoaXMuaXNDb2xsYXBzZWQgPyAnMScgOiAnMCcsXG4gICAgICB0b3RhbFRpbWU6IHRoaXMuY29sbGFwc2VBbmltYXRpb25EdXJhdGlvbixcbiAgICAgIHRyaWdnZXJOYW1lOiAnbWtDb2xsYXBzZUFuaW1hdGlvbidcbiAgICB9O1xuXG4gICAgaWYgKHBoYXNlTmFtZSA9PT0gJ2RvbmUnKSB7XG4gICAgICB0aGlzLmRvbmVFdmVudEVtaXR0ZXIuZW1pdChldmVudCk7XG4gICAgfSBlbHNlIGlmIChwaGFzZU5hbWUgPT09ICdzdGFydCcpIHtcbiAgICAgIHRoaXMuc3RhcnRFdmVudEVtaXR0ZXIuZW1pdChldmVudCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb2xsYXBzZUFuaW1hdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vYW5pbWF0aW9ucy5kaXJlY3RpdmUnO1xuXG5cbkBOZ01vZHVsZSh7XG4gICAgZXhwb3J0czogW0NvbGxhcHNlQW5pbWF0aW9uRGlyZWN0aXZlXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtDb2xsYXBzZUFuaW1hdGlvbkRpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uc01vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKlxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rTWVudVRvZ2dsZV0nXG59KVxuZXhwb3J0IGNsYXNzIFNpZGViYXJMZWZ0VG9nZ2xlRGlyZWN0aXZlIHtcbiAgQElucHV0KCdta01lbnVUb2dnbGUnKSBpdGVtO1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmXG4gICkge31cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdyYXBwZXJTZXJ2aWNlIHtcbiAgcHVibGljIHdyYXBwZXJFbGVtZW50UmVmOiBFbGVtZW50UmVmO1xufVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RXZlbnQgYXMgUm91dGVyRXZlbnQsIE5hdmlnYXRpb25FbmQsIFBSSU1BUllfT1VUTEVULCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7Um91dGluZ1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JvdXRpbmcuc2VydmljZSc7XG5cbmltcG9ydCB7V3JhcHBlclNlcnZpY2V9IGZyb20gJy4uL3dyYXBwZXIvd3JhcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7SGVhZGVyU2VydmljZX0gZnJvbSAnLi4vaGVhZGVyL2hlYWRlci5zZXJ2aWNlJztcblxuaW1wb3J0IHtMYXlvdXRTdG9yZX0gZnJvbSAnLi4vbGF5b3V0LnN0b3JlJztcblxuaW1wb3J0IHtBbmltYXRpb25FdmVudH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQge3JlbW92ZUxpc3RlbmVycywgcmVtb3ZlU3Vic2NyaXB0aW9uc30gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5cbmltcG9ydCB7U2lkZWJhckxlZnRUb2dnbGVEaXJlY3RpdmV9IGZyb20gJy4vc2lkZWJhci1sZWZ0LmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXRlbSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcmVudElkOiBudW1iZXI7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIHJvdXRlPzogc3RyaW5nO1xuICBpY29uQ2xhc3Nlcz86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBBcnJheTxJdGVtPjtcbiAgaXNBY3RpdmU/OiBib29sZWFuO1xuICBpc0NvbGxhcHNlZD86IGJvb2xlYW47XG4gIGRpc2FibGVDb2xsYXBzZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEl0ZW1zID0gQXJyYXk8SXRlbT47XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWxheW91dC1zaWRlYmFyLWxlZnQnLFxuICB0ZW1wbGF0ZTogYDxhc2lkZSBjbGFzcz1cIm1haW4tc2lkZWJhclwiPlxuICA8c2VjdGlvbiBjbGFzcz1cInNpZGViYXJcIiAjc2lkZWJhckVsZW1lbnQgW3N0eWxlLmhlaWdodC5weF09XCJzaWRlYmFySGVpZ2h0XCIgW3N0eWxlLm92ZXJmbG93XT1cInNpZGViYXJPdmVyZmxvd1wiPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgXHQ8dWwgY2xhc3M9XCJzaWRlYmFyLW1lbnVcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgbWVudVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwic2lkZWJhcklubmVyOyBjb250ZXh0OiB7aXRlbTogaXRlbX1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICBcdDwvdWw+XG4gIDwvc2VjdGlvbj5cbjwvYXNpZGU+XG5cbjxuZy10ZW1wbGF0ZSAjc2lkZWJhcklubmVyIGxldC1pdGVtPVwiaXRlbVwiPlxuICA8bGkgW2NsYXNzLmFjdGl2ZV09XCJpdGVtLmlzQWN0aXZlXCIgW2NsYXNzLmhlYWRlcl09XCJpdGVtLnNlcGFyYXRvclwiIFtjbGFzcy5tZW51LW9wZW5dPVwiIWl0ZW0uaXNDb2xsYXBzZWRcIj5cbiAgICA8c3BhbiAqbmdJZj1cIml0ZW0uc2VwYXJhdG9yXCI+e3tpdGVtLmxhYmVsfX08L3NwYW4+XG4gICAgPGEgKm5nSWY9XCIhaXRlbS5zZXBhcmF0b3IgJiYgaXRlbS5yb3V0ZVwiIFtyb3V0ZXJMaW5rXT1cIml0ZW0ucm91dGVcIj5cbiAgICBcdDxpIFtjbGFzc109XCJnZXRJY29uQ2xhc3NlcyhpdGVtKVwiPjwvaT48c3Bhbj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICBcdDxzcGFuICpuZ0lmPVwiaXRlbS5jaGlsZHJlbiB8fCBpdGVtLnB1bGxSaWdodHNcIiBjbGFzcz1cInB1bGwtcmlnaHQtY29udGFpbmVyXCI+XG4gICAgXHRcdDxzcGFuICpuZ0Zvcj1cImxldCByaWdodEl0ZW0gb2YgaXRlbS5wdWxsUmlnaHRzXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IHt7cmlnaHRJdGVtLmNsYXNzZXN9fVwiPnt7cmlnaHRJdGVtLnRleHR9fTwvc3Bhbj5cbiAgICBcdCAgPGkgKm5nSWY9XCIhaXRlbS5wdWxsUmlnaHRzXCIgY2xhc3M9XCJmYSBmYS1hbmdsZS1sZWZ0IHB1bGwtcmlnaHRcIj48L2k+XG4gICAgXHQ8L3NwYW4+XG4gICAgPC9hPlxuICAgIDxhICpuZ0lmPVwiIWl0ZW0uc2VwYXJhdG9yICYmICFpdGVtLnJvdXRlXCIgaHJlZj1cIiNcIiBbbWtNZW51VG9nZ2xlXT1cIml0ZW1cIj5cbiAgICBcdDxpIFtjbGFzc109XCJnZXRJY29uQ2xhc3NlcyhpdGVtKVwiPjwvaT48c3Bhbj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICBcdDxzcGFuICpuZ0lmPVwiaXRlbS5jaGlsZHJlbiB8fCBpdGVtLnB1bGxSaWdodHNcIiBjbGFzcz1cInB1bGwtcmlnaHQtY29udGFpbmVyXCI+XG4gICAgXHRcdDxzcGFuICpuZ0Zvcj1cImxldCByaWdodEl0ZW0gb2YgaXRlbS5wdWxsUmlnaHRzXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IHt7cmlnaHRJdGVtLmNsYXNzZXN9fVwiPnt7cmlnaHRJdGVtLnRleHR9fTwvc3Bhbj5cbiAgICBcdCAgPGkgKm5nSWY9XCIhaXRlbS5wdWxsUmlnaHRzXCIgY2xhc3M9XCJmYSBmYS1hbmdsZS1sZWZ0IHB1bGwtcmlnaHRcIj48L2k+XG4gICAgXHQ8L3NwYW4+XG4gICAgPC9hPlxuICAgIDx1bCAqbmdJZj1cIml0ZW0uY2hpbGRyZW5cIiBbbWtDb2xsYXBzZUFuaW1hdGlvbl09XCJpdGVtLmlzQ29sbGFwc2VkXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uc3RhcnQpPVwidmlzaWJpbGl0eVN0YXRlU3RhcnQoJGV2ZW50KVwiIGNsYXNzPVwidHJlZXZpZXctbWVudVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtLmNoaWxkcmVuXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJzaWRlYmFySW5uZXI7IGNvbnRleHQ6IHtpdGVtOiBpdGVtfVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC91bD5cbiAgPC9saT5cbjwvbmctdGVtcGxhdGU+XG5gLFxuICBzdHlsZXM6IFtgLnRyZWV2aWV3LW1lbnUuY29sbGFwc2V7ZGlzcGxheTpub25lfS50cmVldmlldy1tZW51LC50cmVldmlldy1tZW51LmNvbGxhcHNlLmlue2Rpc3BsYXk6YmxvY2t9YF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNpZGViYXJMZWZ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgbWVudTogQXJyYXk8YW55PjtcbiAgcHVibGljIHNpZGViYXJIZWlnaHQ6IG51bWJlcjtcbiAgcHVibGljIHNpZGViYXJPdmVyZmxvdzogc3RyaW5nO1xuXG4gIHByaXZhdGUgbGF5b3V0OiBzdHJpbmc7XG4gIHByaXZhdGUgaXNTaWRlYmFyTGVmdENvbGxhcHNlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpc1NpZGViYXJMZWZ0RXhwYW5kT25PdmVyOiBib29sZWFuO1xuICBwcml2YXRlIGlzU2lkZWJhckxlZnRNb3VzZU92ZXI6IGJvb2xlYW47XG4gIHByaXZhdGUgd2luZG93SW5uZXJXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIHdpbmRvd0lubmVySGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgY29sbGFwc2VkSXRlbXM6IEl0ZW1zID0gW107XG4gIHByaXZhdGUgYWN0aXZhdGVkSXRlbXM6IEl0ZW1zID0gW107XG4gIHByaXZhdGUgdG9nZ2xlTGlzdGVuZXJzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xuICBwcml2YXRlIGl0ZW1zQnlJZHM6IHtbcHJvcEtleTogbnVtYmVyXTogSXRlbX0gPSB7fTtcbiAgcHJpdmF0ZSBydW5uaW5nQW5pbWF0aW9ucyA9IDA7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICBwcml2YXRlIGFjdGl2ZVVybDogU3RyaW5nO1xuICBwcml2YXRlIGluaXRpYWxpemVkOiBib29sZWFuO1xuXG4gIEBWaWV3Q2hpbGQoJ3NpZGViYXJFbGVtZW50JykgcHVibGljIHNpZGViYXJFbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGRyZW4oU2lkZWJhckxlZnRUb2dnbGVEaXJlY3RpdmUpIHB1YmxpYyBzaWRlYmFyTGVmdFRvZ2dsZURpcmVjdGl2ZXM6IFF1ZXJ5TGlzdDxTaWRlYmFyTGVmdFRvZ2dsZURpcmVjdGl2ZT47XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtICBjaGFuZ2VEZXRlY3RvclJlZiAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGxheW91dFN0b3JlICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgbmdab25lICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICByZW5kZXJlcjIgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHJvdXRlciAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgcm91dGluZ1NlcnZpY2UgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB3cmFwcGVyU2VydmljZSAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGhlYWRlclNlcnZpY2UgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIGxheW91dFN0b3JlOiBMYXlvdXRTdG9yZSxcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIHJvdXRpbmdTZXJ2aWNlOiBSb3V0aW5nU2VydmljZSxcbiAgICBwcml2YXRlIHdyYXBwZXJTZXJ2aWNlOiBXcmFwcGVyU2VydmljZSxcbiAgICBwcml2YXRlIGhlYWRlclNlcnZpY2U6IEhlYWRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0TWVudS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgdGhpcy5tZW51ID0gdmFsdWU7XG4gICAgICB0aGlzLm1vbmtleVBhdGNoTWVudSh0aGlzLm1lbnUpO1xuICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgdGhpcy5zZXRNZW51TGlzdGVuZXJzKHRoaXMuYWN0aXZlVXJsKTtcbiAgICAgICAgdGhpcy5zZXRTaWRlYmFyTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0TWVudVRvZ2dsZXNMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH0pKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0TWVudUFjdGl2ZVVybC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVVcmwgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0TWVudUxpc3RlbmVycyh2YWx1ZSk7XG4gICAgfSkpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMucm91dGluZ1NlcnZpY2UuZXZlbnRzLnN1YnNjcmliZSgoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVXJsID0gZXZlbnQudXJsO1xuICAgICAgICB0aGlzLnNldE1lbnVMaXN0ZW5lcnMoZXZlbnQudXJsKTtcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICB0aGlzLnNldFNpZGViYXJMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0TWVudVRvZ2dsZXNMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmNoZWNrTWVudVdpdGhvdXRDaGlsZHJlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkRlc3Ryb3lcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IHJlbW92ZVN1YnNjcmlwdGlvbnModGhpcy5zdWJzY3JpcHRpb25zKTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHJlbW92ZUxpc3RlbmVycyh0aGlzLmxpc3RlbmVycyk7XG4gICAgdGhpcy50b2dnbGVMaXN0ZW5lcnMgPSByZW1vdmVMaXN0ZW5lcnModGhpcy50b2dnbGVMaXN0ZW5lcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRTaWRlYmFyTGlzdGVuZXJzIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldFNpZGViYXJMaXN0ZW5lcnNcbiAgICovXG4gIHNldFNpZGViYXJMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5sYXlvdXRTdG9yZS5sYXlvdXQuc3Vic2NyaWJlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLmxheW91dCA9IHZhbHVlO1xuICAgICAgdGhpcy5zZXRTaWRlYmFySGVpZ2h0KCk7XG4gICAgfSkpO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5sYXlvdXRTdG9yZS53aW5kb3dJbm5lckhlaWdodC5zdWJzY3JpYmUoKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgIHRoaXMud2luZG93SW5uZXJIZWlnaHQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0U2lkZWJhckhlaWdodCgpO1xuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuc2lkZWJhckxlZnRNZW51LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KSk7XG5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHRoaXMucmVuZGVyZXIyLmxpc3Rlbih0aGlzLnNpZGViYXJFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0TW91c2VPdmVyKHRydWUpO1xuICAgICAgfSkpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4odGhpcy5zaWRlYmFyRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5sYXlvdXRTdG9yZS5zaWRlYmFyTGVmdE1vdXNlT3ZlcihmYWxzZSk7XG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxheW91dFN0b3JlLndpbmRvd0lubmVyV2lkdGguc3Vic2NyaWJlKCh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICB0aGlzLndpbmRvd0lubmVyV2lkdGggPSB2YWx1ZTtcbiAgICAgIGlmICghdGhpcy5pc1NpZGViYXJMZWZ0Q29sbGFwc2VkICYmIHRoaXMud2luZG93SW5uZXJXaWR0aCA8PSA3NjcpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRTdG9yZS5zaWRlYmFyTGVmdENvbGxhcHNlZCh0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy53aW5kb3dJbm5lcldpZHRoID4gNzY3ICYmIHRoaXMuaXNTaWRlYmFyTGVmdENvbGxhcHNlZCAmJiAhdGhpcy5pc1NpZGViYXJMZWZ0RXhwYW5kT25PdmVyKSB7XG4gICAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2lkZWJhckxlZnRDb2xsYXBzZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuaXNTaWRlYmFyTGVmdE1vdXNlT3Zlci5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICB0aGlzLmlzU2lkZWJhckxlZnRNb3VzZU92ZXIgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLmlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXIpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRTdG9yZS5zaWRlYmFyTGVmdENvbGxhcHNlZCghdmFsdWUpO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuaXNTaWRlYmFyTGVmdEV4cGFuZE9uT3Zlci5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICB0aGlzLmlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXIgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLndpbmRvd0lubmVyV2lkdGggPiA3NjcgJiYgdGhpcy5pc1NpZGViYXJMZWZ0Q29sbGFwc2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRTdG9yZS5zaWRlYmFyTGVmdENvbGxhcHNlZCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5sYXlvdXRTdG9yZS5pc1NpZGViYXJMZWZ0Q29sbGFwc2VkLnN1YnNjcmliZSgodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIHRoaXMuaXNTaWRlYmFyTGVmdENvbGxhcHNlZCA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMud2luZG93SW5uZXJXaWR0aCA8PSA3NjcpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXIgJiYgIXRoaXMuaXNTaWRlYmFyTGVmdE1vdXNlT3ZlciAmJiAhdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmxheW91dFN0b3JlLnNpZGViYXJMZWZ0RXhwYW5kT25PdmVyKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLndyYXBwZXJTZXJ2aWNlLndyYXBwZXJFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdzaWRlYmFyLWNvbGxhcHNlJyk7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTaWRlYmFyTGVmdEV4cGFuZE9uT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLndyYXBwZXJTZXJ2aWNlLndyYXBwZXJFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdzaWRlYmFyLWNvbGxhcHNlJyk7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTaWRlYmFyTGVmdEV4cGFuZE9uT3Zlcikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuaXNTaWRlYmFyTGVmdE1pbmkuc3Vic2NyaWJlKCh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMud3JhcHBlclNlcnZpY2Uud3JhcHBlckVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3NpZGViYXItbWluaScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnc2lkZWJhci1taW5pJyk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRNZW51TGlzdGVuZXJzIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldE1lbnVMaXN0ZW5lcnNcbiAgICovXG4gIHNldE1lbnVMaXN0ZW5lcnModXJsKTogdm9pZCB7XG4gICAgaWYgKHVybCA9PT0gJy8nKSB7XG4gICAgICB0aGlzLmFjdGl2ZUl0ZW1zKHVybCk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJpbWFyeU91dGxldCA9IHRoaXMucm91dGVyLnBhcnNlVXJsKHVybCkucm9vdC5jaGlsZHJlbltQUklNQVJZX09VVExFVF07XG4gICAgICBpZiAocHJpbWFyeU91dGxldCkge1xuICAgICAgICB0aGlzLmFjdGl2ZUl0ZW1zKHByaW1hcnlPdXRsZXQudG9TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy53aW5kb3dJbm5lcldpZHRoIDw9IDc2NyB8fCB0aGlzLmlzU2lkZWJhckxlZnRFeHBhbmRPbk92ZXIpIHtcbiAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2lkZWJhckxlZnRDb2xsYXBzZWQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtnZXRJY29uQ2xhc3NlcyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBnZXRJY29uQ2xhc3Nlc1xuICAgKiBAcGFyYW0gaXRlbSBbZGVzY3JpcHRpb25dXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIGdldEljb25DbGFzc2VzKGl0ZW06IEl0ZW0pOiBzdHJpbmcge1xuICAgIGlmIChpdGVtLmljb25DbGFzc2VzIHx8IGl0ZW0uaWNvbkNsYXNzZXMgPT09ICcnKSB7XG4gICAgICByZXR1cm4gaXRlbS5pY29uQ2xhc3NlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdmYSBmYS1jaXJjbGUtbyc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFt2aXNpYmlsaXR5U3RhdGVTdGFydCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCB2aXNpYmlsaXR5U3RhdGVTdGFydFxuICAgKiBAcGFyYW0gZXZlbnQgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHZpc2liaWxpdHlTdGF0ZVN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIHRoaXMucnVubmluZ0FuaW1hdGlvbnMgKys7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMucnVubmluZ0FuaW1hdGlvbnMgLS07XG4gICAgICAgIGlmICghdGhpcy5ydW5uaW5nQW5pbWF0aW9ucykge1xuICAgICAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2V0U2lkZWJhckxlZnRFbGVtZW50SGVpZ2h0KHRoaXMuc2lkZWJhckVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICB9LCBldmVudC50b3RhbFRpbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFt1bmNvbGxhcHNlSXRlbVBhcmVudHMgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgdW5jb2xsYXBzZUl0ZW1QYXJlbnRzXG4gICAqIEBwYXJhbSBpdGVtICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBpc0FjdGl2ZSAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHVuY29sbGFwc2VJdGVtUGFyZW50cyhpdGVtOiBJdGVtLCBpc0FjdGl2ZSA9IGZhbHNlKTogdm9pZCB7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBpdGVtLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWN0aXZhdGVkSXRlbXMucHVzaChpdGVtKTtcbiAgICB9XG4gICAgaXRlbS5pc0NvbGxhcHNlZCA9IGZhbHNlO1xuICAgIHRoaXMuY29sbGFwc2VkSXRlbXMucHVzaChpdGVtKTtcbiAgICBpZiAoaXRlbS5wYXJlbnRJZCkge1xuICAgICAgdGhpcy51bmNvbGxhcHNlSXRlbVBhcmVudHModGhpcy5pdGVtc0J5SWRzW2l0ZW0ucGFyZW50SWRdLCBpc0FjdGl2ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtmaW5kSXRlbXNCeVVybCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBmaW5kSXRlbXNCeVVybFxuICAgKiBAcGFyYW0gdXJsICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gaXRlbXMgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmV0dXJuSXRlbXMgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgZmluZEl0ZW1zQnlVcmwodXJsOiBzdHJpbmcsIGl0ZW1zOiBJdGVtcywgcmV0dXJuSXRlbXM6IEl0ZW1zID0gW10pOiBJdGVtcyB7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbTogSXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0ucm91dGUgPT09IHVybCkge1xuICAgICAgICByZXR1cm5JdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuZmluZEl0ZW1zQnlVcmwodXJsLCBpdGVtLmNoaWxkcmVuLCByZXR1cm5JdGVtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVybkl0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIFthY3RpdmVJdGVtcyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBhY3RpdmVJdGVtc1xuICAgKiBAcGFyYW0gdXJsIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgYWN0aXZlSXRlbXModXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2YXRlZEl0ZW1zLmZvckVhY2goKGl0ZW06IEl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLmFjdGl2YXRlZEl0ZW1zID0gW107XG5cbiAgICB0aGlzLmNvbGxhcHNlZEl0ZW1zLmZvckVhY2goKGl0ZW06IEl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGl0ZW0uaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMuY29sbGFwc2VkSXRlbXMgPSBbXTtcblxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5maW5kSXRlbXNCeVVybCh1cmwsIHRoaXMubWVudSk7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy51bmNvbGxhcHNlSXRlbVBhcmVudHMoaXRlbSwgdHJ1ZSk7XG4gICAgICB0aGlzLmFjdGl2YXRlZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogW21vbmtleVBhdGNoTWVudSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBtb25rZXlQYXRjaE1lbnVcbiAgICogQHBhcmFtIGl0ZW1zICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIHBhcmVudElkIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgbW9ua2V5UGF0Y2hNZW51KGl0ZW1zOiBJdGVtcywgcGFyZW50SWQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBpdGVtLmlkID0gcGFyZW50SWQgPyBOdW1iZXIocGFyZW50SWQgKyAnJyArIChpbmRleCArIDEpKSA6IGluZGV4ICsgMTtcbiAgICAgIGlmIChwYXJlbnRJZCkge1xuICAgICAgICBpdGVtLnBhcmVudElkID0gcGFyZW50SWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0uZGlzYWJsZUNvbGxhcHNlKSB7XG4gICAgICAgIGl0ZW0uaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaXRlbS5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmVudElkIHx8IGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5pdGVtc0J5SWRzW2l0ZW0uaWRdID0gaXRlbTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMubW9ua2V5UGF0Y2hNZW51KGl0ZW0uY2hpbGRyZW4sIGl0ZW0uaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRNZW51VG9nZ2xlc0xpc3RlbmVycyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRNZW51VG9nZ2xlc0xpc3RlbmVyc1xuICAgKi9cbiAgcHJpdmF0ZSBzZXRNZW51VG9nZ2xlc0xpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLnRvZ2dsZUxpc3RlbmVycyA9IHJlbW92ZUxpc3RlbmVycyh0aGlzLnRvZ2dsZUxpc3RlbmVycyk7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5zaWRlYmFyTGVmdFRvZ2dsZURpcmVjdGl2ZXMuZm9yRWFjaCgobWVudVRvZ2dsZTogU2lkZWJhckxlZnRUb2dnbGVEaXJlY3RpdmUpID0+IHtcbiAgICAgICAgdGhpcy50b2dnbGVMaXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4obWVudVRvZ2dsZS5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKG1lbnVUb2dnbGUuaXRlbS5pc0NvbGxhcHNlZCkge1xuICAgICAgICAgICAgdGhpcy5jb2xsYXBzZWRJdGVtcy5mb3JFYWNoKChpdGVtOiBJdGVtKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghaXRlbS5kaXNhYmxlQ29sbGFwc2UpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmlzQ29sbGFwc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlZEl0ZW1zID0gW107XG4gICAgICAgICAgICB0aGlzLnVuY29sbGFwc2VJdGVtUGFyZW50cyhtZW51VG9nZ2xlLml0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZW51VG9nZ2xlLml0ZW0uaXNDb2xsYXBzZWQgPSAhbWVudVRvZ2dsZS5pdGVtLmlzQ29sbGFwc2VkO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogW2NoZWNrTWVudVdpdGhvdXRDaGlsZHJlbiBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjaGVja01lbnVXaXRob3V0Q2hpbGRyZW5cbiAgICovXG4gIHByaXZhdGUgY2hlY2tNZW51V2l0aG91dENoaWxkcmVuKCk6IHZvaWQge1xuICAgIGxldCBtZW51SGF2ZUNoaWxkcmVuO1xuICAgIHRoaXMubWVudS5mb3JFYWNoKChpdGVtOiBJdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gbWVudUhhdmVDaGlsZHJlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFtZW51SGF2ZUNoaWxkcmVuKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2V0U2lkZWJhckxlZnRFbGVtZW50SGVpZ2h0KHRoaXMuc2lkZWJhckVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbc2V0U2lkZWJhckhlaWdodCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRTaWRlYmFySGVpZ2h0XG4gICAqL1xuICBwcml2YXRlIHNldFNpZGViYXJIZWlnaHQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGF5b3V0ID09PSAnZml4ZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLndpbmRvd0lubmVySGVpZ2h0IC0gdGhpcy5oZWFkZXJTZXJ2aWNlLm9mZnNldEhlaWdodDtcbiAgICAgIGlmIChoZWlnaHQgJiYgaGVpZ2h0ICE9PSB0aGlzLnNpZGViYXJIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zaWRlYmFySGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnNpZGViYXJPdmVyZmxvdyA9ICdhdXRvJztcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnNpZGViYXJIZWlnaHQpIHtcbiAgICAgIHRoaXMuc2lkZWJhck92ZXJmbG93ID0gdGhpcy5zaWRlYmFySGVpZ2h0ID0gbnVsbDtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLm1vZHVsZSc7XG5cbmltcG9ydCB7IFNpZGViYXJMZWZ0VG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9zaWRlYmFyLWxlZnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNpZGViYXJMZWZ0Q29tcG9uZW50IH0gZnJvbSAnLi9zaWRlYmFyLWxlZnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGUsIEFuaW1hdGlvbnNNb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtTaWRlYmFyTGVmdENvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbU2lkZWJhckxlZnRUb2dnbGVEaXJlY3RpdmUsIFNpZGViYXJMZWZ0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBTaWRlYmFyTGVmdE1vZHVsZSB7fVxuIiwiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1dyYXBwZXJTZXJ2aWNlfSBmcm9tICcuLi93cmFwcGVyL3dyYXBwZXIuc2VydmljZSc7XG5pbXBvcnQge0xheW91dFN0b3JlfSBmcm9tICcuLi9sYXlvdXQuc3RvcmUnO1xuaW1wb3J0IHtTaWRlYmFyUmlnaHRTZXJ2aWNlfSBmcm9tICcuL3NpZGViYXItcmlnaHQuc2VydmljZSc7XG5pbXBvcnQge3JlbW92ZUxpc3RlbmVycywgcmVtb3ZlU3Vic2NyaXB0aW9uc30gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWxheW91dC1zaWRlYmFyLXJpZ2h0JyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICNzaWRlYmFyQ29udGVudEVsZW1lbnQgY2xhc3M9XCJjb250cm9sLXNpZGViYXItY29udGVudFwiPlxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJjb250cm9sLXNpZGViYXItYmdcIj48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2A6aG9zdHtkaXNwbGF5OmJsb2NrO2hlaWdodDoxMDAlfS5jb250cm9sLXNpZGViYXItYmd7ei1pbmRleDotMX0vZGVlcC8gLnRhYi1jb250ZW50e3BhZGRpbmc6MTBweCAxNXB4fWBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuXG59KVxuZXhwb3J0IGNsYXNzIFNpZGViYXJSaWdodENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHVibGljIGxheW91dDogc3RyaW5nO1xuXG4gIHByaXZhdGUgc2tpbjogc3RyaW5nO1xuICBwcml2YXRlIGlzU2lkZWJhclJpZ2h0T3ZlckNvbnRlbnQ6IGJvb2xlYW47XG4gIHByaXZhdGUgaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgbGlzdGVuZXJzID0gW107XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IFtdO1xuXG4gIEBWaWV3Q2hpbGQoJ3NpZGViYXJDb250ZW50RWxlbWVudCcpIHB1YmxpYyBzaWRlYmFyQ29udGVudEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBsYXlvdXRTdG9yZTogTGF5b3V0U3RvcmUsXG4gICAgcHJpdmF0ZSBzaWRlYmFyUmlnaHRTZXJ2aWNlOiBTaWRlYmFyUmlnaHRTZXJ2aWNlLFxuICAgIHByaXZhdGUgd3JhcHBlclNlcnZpY2U6IFdyYXBwZXJTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uSW5pdFxuICAgKi9cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjb250cm9sLXNpZGViYXInKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIHRoaXMuaXNTaWRlYmFyUmlnaHRDb2xsYXBzZWQgPSB2YWx1ZTtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgICBpZiAoIXRoaXMuaXNTaWRlYmFyUmlnaHRPdmVyQ29udGVudCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMud3JhcHBlclNlcnZpY2Uud3JhcHBlckVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbnRyb2wtc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29udHJvbC1zaWRlYmFyLW9wZW4nKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2lkZWJhclJpZ2h0T3ZlckNvbnRlbnQpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLndyYXBwZXJTZXJ2aWNlLndyYXBwZXJFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5sYXlvdXRTdG9yZS5pc1NpZGViYXJSaWdodE92ZXJDb250ZW50LnN1YnNjcmliZSgodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIHRoaXMuaXNTaWRlYmFyUmlnaHRPdmVyQ29udGVudCA9IHZhbHVlO1xuICAgICAgaWYgKCF0aGlzLmlzU2lkZWJhclJpZ2h0Q29sbGFwc2VkKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMud3JhcHBlclNlcnZpY2Uud3JhcHBlckVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbnRyb2wtc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy53cmFwcGVyU2VydmljZS53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29udHJvbC1zaWRlYmFyLW9wZW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuc2lkZWJhclJpZ2h0U2tpbi5zdWJzY3JpYmUoKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh0aGlzLnNraW4gIT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBgY29udHJvbC1zaWRlYmFyLSR7dGhpcy5za2lufWApO1xuICAgICAgfVxuICAgICAgdGhpcy5za2luID0gdmFsdWU7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgYGNvbnRyb2wtc2lkZWJhci0ke3ZhbHVlfWApO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2lkZWJhclJpZ2h0U2VydmljZS5lbGVtZW50UmVmID0gdGhpcy5zaWRlYmFyQ29udGVudEVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzdHJveVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSByZW1vdmVMaXN0ZW5lcnModGhpcy5saXN0ZW5lcnMpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IHJlbW92ZVN1YnNjcmlwdGlvbnModGhpcy5zdWJzY3JpcHRpb25zKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFNpZGViYXJSaWdodENvbXBvbmVudCB9IGZyb20gJy4vc2lkZWJhci1yaWdodC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtTaWRlYmFyUmlnaHRDb21wb25lbnRdLFxuICAgIGRlY2xhcmF0aW9uczogW1NpZGViYXJSaWdodENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU2lkZWJhclJpZ2h0TW9kdWxlIHt9XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB0aHJvdHRsZSwgcmVtb3ZlU3Vic2NyaXB0aW9ucywgcmVtb3ZlTGlzdGVuZXJzIH0gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5pbXBvcnQgeyBMYXlvdXRTdG9yZSB9IGZyb20gJy4uL2xheW91dC5zdG9yZSc7XG5pbXBvcnQgeyBXcmFwcGVyU2VydmljZSB9IGZyb20gJy4vd3JhcHBlci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstbGF5b3V0LXdyYXBwZXInLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJ3cmFwcGVyIG92ZXJmbG93XCIgW25nQ2xhc3NdPVwiY2xhc3Nlc1wiPlxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2Aud3JhcHBlci5vdmVyZmxvd3tvdmVyZmxvdzpoaWRkZW59Omhvc3R7ZGlzcGxheTpibG9ja306aG9zdCAvZGVlcC8gLnNpZGViYXItcmlnaHQtdG9nZ2xlPmF7Y29sb3I6I2ZmZn06aG9zdC5zaWRlYmFyLW1pbmkuc2lkZWJhci1jb2xsYXBzZSAvZGVlcC8gLnRyZWV2aWV3LW1lbnUuY29sbGFwc2luZ3toZWlnaHQ6YXV0byFpbXBvcnRhbnR9Omhvc3QgL2RlZXAvIC5zaWRlYmFyLXJpZ2h0LXRvZ2dsZT5hOmhvdmVye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMSl9Omhvc3Quc2tpbi1ibGFjayAvZGVlcC8gLnNpZGViYXItcmlnaHQtdG9nZ2xlPmEsOmhvc3Quc2tpbi1ibGFjay1saWdodCAvZGVlcC8gLnNpZGViYXItcmlnaHQtdG9nZ2xlPmF7Y29sb3I6IzMzMztib3JkZXItcmlnaHQtd2lkdGg6MH06aG9zdC5za2luLWJsYWNrIC9kZWVwLyAuc2lkZWJhci1yaWdodC10b2dnbGU+YTpob3Zlciw6aG9zdC5za2luLWJsYWNrLWxpZ2h0IC9kZWVwLyAuc2lkZWJhci1yaWdodC10b2dnbGU+YTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6Izk5OX06aG9zdC5za2luLWJsYWNrIC9kZWVwLyAuc2lkZWJhci1yaWdodC10b2dnbGU+YXtib3JkZXItbGVmdDoxcHggc29saWQgI2VlZX06aG9zdC5za2luLWJsYWNrLWxpZ2h0IC9kZWVwLyAuc2lkZWJhci1yaWdodC10b2dnbGU+YXtib3JkZXItbGVmdDoxcHggc29saWQgI2QyZDZkZX1gXVxufSlcbmV4cG9ydCBjbGFzcyBXcmFwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHNraW46IHN0cmluZztcbiAgcHJpdmF0ZSBsaXN0ZW5lcnMgPSBbXTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgcHVibGljIGNsYXNzZXM6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGxheW91dFN0b3JlOiBMYXlvdXRTdG9yZSxcbiAgICBwcml2YXRlIHdyYXBwZXJTZXJ2aWNlOiBXcmFwcGVyU2VydmljZSxcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkge31cblxuICAvKipcbiAgICogW25nT25Jbml0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmxheW91dFN0b3JlLnNldFdpbmRvd0lubmVySGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdGhpcy5sYXlvdXRTdG9yZS5zZXRXaW5kb3dJbm5lcldpZHRoKHdpbmRvdy5pbm5lcldpZHRoKTtcblxuICAgIHRoaXMud3JhcHBlclNlcnZpY2Uud3JhcHBlckVsZW1lbnRSZWYgPSB0aGlzLmVsZW1lbnRSZWY7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxheW91dFN0b3JlLndyYXBwZXJDbGFzc2VzLnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5jbGFzc2VzID0gdmFsdWUgPyB2YWx1ZSA6IG51bGw7XG4gICAgfSkpO1xuXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCB0aHJvdHRsZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubGF5b3V0U3RvcmUuc2V0V2luZG93SW5uZXJIZWlnaHQod2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgdGhpcy5sYXlvdXRTdG9yZS5zZXRXaW5kb3dJbm5lcldpZHRoKHdpbmRvdy5pbm5lcldpZHRoKTtcbiAgICAgIH0sIDI1MCkpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUubGF5b3V0LnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgdmFsdWUgPT09ICdmaXhlZCcgPyB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2ZpeGVkJykgOlxuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2ZpeGVkJyk7XG4gICAgICB2YWx1ZSA9PT0gJ2JveGVkJyA/IHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbGF5b3V0LWJveGVkJykgOlxuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2xheW91dC1ib3hlZCcpO1xuICAgIH0pKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMubGF5b3V0U3RvcmUuc2tpbi5zdWJzY3JpYmUoKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5za2luICYmIHRoaXMuc2tpbiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgYHNraW4tJHt0aGlzLnNraW59YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5za2luID0gdmFsdWU7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBgc2tpbi0ke3RoaXMuc2tpbn1gKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzdHJveVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICAgIHRoaXMubGlzdGVuZXJzID0gcmVtb3ZlTGlzdGVuZXJzKHRoaXMubGlzdGVuZXJzKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL3dyYXBwZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbV3JhcHBlckNvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbV3JhcHBlckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgV3JhcHBlck1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcm91dGluZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExheW91dFNlcnZpY2Uge1xuICBwdWJsaWMgaXNDdXN0b21MYXlvdXQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodHJ1ZSk7XG5cbiAgcHJpdmF0ZSBjdXN0b21MYXlvdXQ6IGJvb2xlYW47XG5cblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcm91dGluZ1NlcnZpY2UgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaW5pdFxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgaW5pdCgpIHtcbiAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLm9uQ2hhbmdlLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSkge1xuICAgICAgICBpZiAodGhpcy5jdXN0b21MYXlvdXQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmN1c3RvbUxheW91dCAhPT0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0uZGF0YVsnZGlzYWJsZUxheW91dCddKSB7XG4gICAgICAgICAgdGhpcy5pc0N1c3RvbUxheW91dC5uZXh0KCEhdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0uZGF0YVsnY3VzdG9tTGF5b3V0J10pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VzdG9tTGF5b3V0ID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0uZGF0YVsnY3VzdG9tTGF5b3V0J107XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExheW91dFN0b3JlIH0gZnJvbSAnLi9sYXlvdXQuc3RvcmUnO1xuaW1wb3J0IHsgTGF5b3V0U3RhdGUgfSBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG5cbi8qKlxuICogW0luamVjdGlvblRva2VuIGRlc2NyaXB0aW9uXVxuICovXG5leHBvcnQgY29uc3QgTGF5b3V0Q29uZmlnVG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ2xheW91dENvbmZpZycpO1xuXG4vKipcbiAqIFtsYXlvdXRTdG9yZUZhY3RvcnkgZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXlvdXRTdG9yZUZhY3RvcnkobGF5b3V0Q29uZmlnOiBMYXlvdXRTdGF0ZSk6IExheW91dFN0b3JlIHtcbiAgcmV0dXJuIG5ldyBMYXlvdXRTdG9yZShsYXlvdXRDb25maWcpO1xufVxuXG4vKipcbiAqIFtsYXlvdXRQcm92aWRlcnMgZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXlvdXRQcm92aWRlcihsYXlvdXRDb25maWc6IExheW91dFN0YXRlKSB7XG4gIHJldHVybiBbe1xuICAgICAgcHJvdmlkZTogTGF5b3V0U3RvcmUsXG4gICAgICB1c2VGYWN0b3J5OiBsYXlvdXRTdG9yZUZhY3RvcnksXG4gICAgICBkZXBzOiBbTGF5b3V0Q29uZmlnVG9rZW5dXG4gICAgfSwge1xuICAgICAgcHJvdmlkZTogTGF5b3V0Q29uZmlnVG9rZW4sXG4gICAgICB1c2VWYWx1ZTogbGF5b3V0Q29uZmlnXG4gICAgfVxuICBdO1xufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IENvbnRlbnRNb2R1bGUgfSBmcm9tICcuL2NvbnRlbnQvY29udGVudC5tb2R1bGUnO1xuaW1wb3J0IHsgRm9vdGVyTW9kdWxlIH0gZnJvbSAnLi9mb290ZXIvZm9vdGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBIZWFkZXJNb2R1bGUgfSBmcm9tICcuL2hlYWRlci9oZWFkZXIubW9kdWxlJztcbmltcG9ydCB7IFNpZGViYXJMZWZ0TW9kdWxlIH0gZnJvbSAnLi9zaWRlYmFyLWxlZnQvc2lkZWJhci1sZWZ0Lm1vZHVsZSc7XG5pbXBvcnQgeyBTaWRlYmFyUmlnaHRNb2R1bGUgfSBmcm9tICcuL3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5tb2R1bGUnO1xuaW1wb3J0IHsgV3JhcHBlck1vZHVsZSB9IGZyb20gJy4vd3JhcHBlci93cmFwcGVyLm1vZHVsZSc7XG5cbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL2xheW91dC5zZXJ2aWNlJztcbmltcG9ydCB7IExheW91dFN0YXRlIH0gZnJvbSAnLi9sYXlvdXQuc3RhdGUnO1xuaW1wb3J0IHsgbGF5b3V0UHJvdmlkZXIgfSBmcm9tICcuL2xheW91dC5wcm92aWRlcic7XG5cbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcm91dGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi93cmFwcGVyL3dyYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTaWRlYmFyUmlnaHRTZXJ2aWNlIH0gZnJvbSAnLi9zaWRlYmFyLXJpZ2h0L3NpZGViYXItcmlnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFkZXJTZXJ2aWNlIH0gZnJvbSAnLi9oZWFkZXIvaGVhZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9vdGVyU2VydmljZSB9IGZyb20gJy4vZm9vdGVyL2Zvb3Rlci5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUm91dGVyTW9kdWxlXSxcbiAgZXhwb3J0czogW0NvbnRlbnRNb2R1bGUsIEZvb3Rlck1vZHVsZSwgSGVhZGVyTW9kdWxlLCBTaWRlYmFyTGVmdE1vZHVsZSwgU2lkZWJhclJpZ2h0TW9kdWxlLCBXcmFwcGVyTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbUm91dGluZ1NlcnZpY2UsIFdyYXBwZXJTZXJ2aWNlLCBTaWRlYmFyUmlnaHRTZXJ2aWNlLCBIZWFkZXJTZXJ2aWNlLCBGb290ZXJTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBMYXlvdXRNb2R1bGUge1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJlbnRNb2R1bGUgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBMYXlvdXRNb2R1bGUpIHtcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xheW91dE1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seSEnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2ZvclJvb3QgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgZm9yUm9vdFxuICAgKiBAcGFyYW0gIGxheW91dENvbmZpZyBbZGVzY3JpcHRpb25dXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgc3RhdGljIGZvclJvb3QobGF5b3V0Q29uZmlnOiBMYXlvdXRTdGF0ZSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTGF5b3V0TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbLi4ubGF5b3V0UHJvdmlkZXIobGF5b3V0Q29uZmlnKSwgTGF5b3V0U2VydmljZV1cbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCAqIGZyb20gJy4vbGF5b3V0LnNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQuc3RvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQuc3RhdGUnO1xuIiwiZXhwb3J0IGNvbnN0IGNvbG9yc0FsaWFzZXMgPSBbXG4gICdkZWZhdWx0JyxcbiAgJ3ByaW1hcnknLFxuICAnZGFuZ2VyJyxcbiAgJ3dhcm5pbmcnLFxuICAnaW5mbycsXG4gICdzdWNjZXNzJ1xuXTtcblxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IHtcbiAgJ2FxdWEnOiAnIzAwYzBlZicsXG4gICdhcXVhLWFjdGl2ZSc6ICcjMDBhN2QwJyxcbiAgJ2JsYWNrJzogJyMxMTExMTEnLFxuICAnYmxhY2stYWN0aXZlJzogJyMwMDAwMDAnLFxuICAnYmx1ZSc6ICcjMDA3M2I3JyxcbiAgJ2JsdWUtYWN0aXZlJzogJyMwMDUzODQnLFxuICAnZnVjaHNpYSc6ICcjZjAxMmJlJyxcbiAgJ2Z1Y2hzaWEtYWN0aXZlJzogJyNkYjBlYWQnLFxuICAnZ3JlZW4nOiAnIzAwYTY1YScsXG4gICdncmVlbi1hY3RpdmUnOiAnIzAwOGQ0YycsXG4gICdncmF5JzogJyNkMmQ2ZGUnLFxuICAnZ3JheS1hY3RpdmUnOiAnI2I1YmJjOCcsXG4gICdncmF5LWxpZ2h0JzogJyNmN2Y3ZjcnLFxuICAnbGlnaHQtYmx1ZSc6ICcjM2M4ZGJjJyxcbiAgJ2xpZ2h0LWJsdWUtYWN0aXZlJzogJyMzNTdjYTUnLFxuICAnbGltZSc6ICcjMDFmZjcwJyxcbiAgJ2xpbWUtYWN0aXZlJzogJyMwMGU3NjUnLFxuICAnbWFyb29uJzogJyNkODFiNjAnLFxuICAnbWFyb29uLWFjdGl2ZSc6ICcjY2ExOTVhJyxcbiAgJ25hdnknOiAnIzAwMWYzZicsXG4gICduYXZ5LWFjdGl2ZSc6ICcjMDAxYTM1JyxcbiAgJ29saXZlJzogJyMzZDk5NzAnLFxuICAnb2xpdmUtYWN0aXZlJzogJyMzNjg3NjMnLFxuICAnb3JhbmdlJzogJyNmZjg1MWInLFxuICAnb3JhbmdlLWFjdGl2ZSc6ICcjZmY3NzAxJyxcbiAgJ3B1cnBsZSc6ICcjNjA1Y2E4JyxcbiAgJ3B1cnBsZS1hY3RpdmUnOiAnIzU1NTI5OScsXG4gICdyZWQnOiAnI2RkNGIzOScsXG4gICdyZWQtYWN0aXZlJzogJyNkMzM3MjQnLFxuICAndGVhbCc6ICcjMzljY2NjJyxcbiAgJ3RlYWwtYWN0aXZlJzogJyMzMGJiYmInLFxuICAneWVsbG93JzogJyNmMzljMTInLFxuICAneWVsbG93LWFjdGl2ZSc6ICcjZGI4YjBiJyxcbn07XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNBbGlhc2VzIH0gZnJvbSAnLi9jb2xvci5kZWZpbml0aW9uJztcblxuLypcbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2xvclNlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnRCYWNrZ3JvdW5kU3R5bGU6IGFueTtcbiAgcHJpdmF0ZSBjdXJyZW50QmFja2dyb3VuZENsYXNzOiBhbnk7XG4gIHByaXZhdGUgY3VycmVudEZvbnRTdHlsZTogYW55O1xuICBwcml2YXRlIGN1cnJlbnRGb250Q2xhc3M6IGFueTtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcmVuZGVyZXIyIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgKSB7XG4gICAgLy8gdGhpcy5pbml0KCk7XG4gICAgLy8gY29uc29sZS5sb2codGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogW3NldEJhY2tncm91bmRDb2xvciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRCYWNrZ3JvdW5kQ29sb3JcbiAgICogQHBhcmFtICBjb2xvciAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGNvbmRpdGlvbiAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgcHJvcGVydHkgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICBwcmVmaXggICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldEJhY2tncm91bmRDb2xvcihjb2xvcjogc3RyaW5nLCBjb25kaXRpb246IGJvb2xlYW4sIHByb3BlcnR5OiBzdHJpbmcsIHByZWZpeDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGNvbG9yICYmIGNvbmRpdGlvbikge1xuICAgICAgdGhpcy5yZXNldEJhY2tncm91bmRDb2xvcigpO1xuICAgICAgaWYgKGNvbG9yc1tjb2xvcl0pIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdiZy1jb2xvcicpO1xuICAgICAgICB0aGlzLmN1cnJlbnRCYWNrZ3JvdW5kU3R5bGUgPSB7cHJvcGVydHk6IHByb3BlcnR5LCBjb2xvcjogY29sb3JzW2NvbG9yXX07XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgY29sb3JzW2NvbG9yXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2JnLWNvbG9yJyk7XG4gICAgICAgIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDAgfHwgY29sb3IuaW5kZXhPZigncmdiJykgPT09IDApIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRCYWNrZ3JvdW5kU3R5bGUgPSB7cHJvcGVydHk6IHByb3BlcnR5LCBjb2xvcjogY29sb3J9O1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgY29sb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9yc0FsaWFzZXMuaW5kZXhPZihjb2xvcikgIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzID0gcHJlZml4ID8gYCR7cHJlZml4fS0ke2NvbG9yfWAgOiBjb2xvcjtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVzZXRCYWNrZ3JvdW5kQ29sb3IgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgcmVzZXRCYWNrZ3JvdW5kQ29sb3JcbiAgICovXG4gIHB1YmxpYyByZXNldEJhY2tncm91bmRDb2xvcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jdXJyZW50QmFja2dyb3VuZFN0eWxlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZFN0eWxlLnByb3BlcnR5LCB0aGlzLmN1cnJlbnRCYWNrZ3JvdW5kU3R5bGUuY29sb3IpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW3NldEZvbnRDb2xvciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRGb250Q29sb3JcbiAgICogQHBhcmFtICBjb2xvciAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHNldEZvbnRDb2xvcihjb2xvcjogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLnJlc2V0Rm9udENvbG9yKCk7XG4gICAgICBpZiAoY29sb3Iuc3RhcnRzV2l0aCgnIycpIHx8IGNvbG9yLnN0YXJ0c1dpdGgoJ3JnYicpKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbG9yJywgY29sb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udENsYXNzID0gYHRleHQtJHtjb2xvcn1gO1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50Rm9udENsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW3Jlc2V0Rm9udENvbG9yIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHJlc2V0Rm9udENvbG9yXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHJlc2V0Rm9udENvbG9yKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRGb250U3R5bGUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZVN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29sb3InLCB0aGlzLmN1cnJlbnRGb250U3R5bGUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50Rm9udENsYXNzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50Rm9udENsYXNzKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb2xvclNlcnZpY2UgfSBmcm9tICcuL2NvbG9yLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtDb2xvcl0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRDb2xvckRpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlXG4gICkge31cblxuICBASW5wdXQoJ21rQ29sb3JDb25kaXRpb24nKSBjb25kaXRpb24gPSB0cnVlO1xuICBASW5wdXQoJ21rQ29sb3JQcmVmaXgnKSBwcmVmaXg6IHN0cmluZztcbiAgQElucHV0KCdta0NvbG9yUHJvcGVydHknKSBwcm9wZXJ0eTogc3RyaW5nO1xuICBASW5wdXQoJ21rQ29sb3InKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcihjb2xvciwgdGhpcy5jb25kaXRpb24sIHRoaXMucHJvcGVydHksIHRoaXMucHJlZml4KTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtGb250Q29sb3JdJyxcbiAgcHJvdmlkZXJzOiBbQ29sb3JTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckRpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlXG4gICkge31cblxuICBASW5wdXQoJ21rRm9udENvbG9yJykgc2V0IGNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRGb250Q29sb3IoY29sb3IpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBCYWNrZ3JvdW5kQ29sb3JEaXJlY3RpdmUsIENvbG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2xvci5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGV4cG9ydHM6IFtCYWNrZ3JvdW5kQ29sb3JEaXJlY3RpdmUsIENvbG9yRGlyZWN0aXZlXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtCYWNrZ3JvdW5kQ29sb3JEaXJlY3RpdmUsIENvbG9yRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xvck1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKlxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rQWNjb3JkaW9uVG9nZ2xlXSdcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uVG9nZ2xlRGlyZWN0aXZlIHtcbiAgQElucHV0KCdta0FjY29yZGlvblRvZ2dsZScpIGFjY29yZGlvbkNvbXBvbmVudDtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gZWxlbWVudFJlZiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZlxuICApIHt9XG59XG4iLCJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q2hpbGRyZW5cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IEFjY29yZGlvblRvZ2dsZURpcmVjdGl2ZSB9IGZyb20gJy4vYWNjb3JkaW9uLmRpcmVjdGl2ZSc7XG5cbmltcG9ydCB7IHJlbW92ZUxpc3RlbmVycywgcmVtb3ZlU3Vic2NyaXB0aW9ucyB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1hY2NvcmRpb24taGVhZGVyJyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uSGVhZGVyQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG5cblxuLypcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWFjY29yZGlvbi1jb250ZW50JyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uQ29udGVudENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUmVmJykgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuXG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1hY2NvcmRpb24nLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwdWJsaWMgY29udGVudFRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxBY2NvcmRpb25Db250ZW50Q29tcG9uZW50PjtcbiAgcHVibGljIGhlYWRlclN0eWxlQ29sb3I6IHN0cmluZztcbiAgcHVibGljIGlzQ29sbGFwc2luZzogYm9vbGVhbjtcbiAgcHVibGljIGlzQ29sbGFwc2VkOiBib29sZWFuO1xuICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcblxuICBASW5wdXQoKSBwdWJsaWMgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGNvbnRlbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgY29udGVudFN0eWxlQ2xhc3MgPSAnYm94LWJvZHknO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXJDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyQ29sb3JIb3Zlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyU3R5bGVDbGFzcyA9ICdib3gtaGVhZGVyIHdpdGgtYm9yZGVyJztcblxuICBAQ29udGVudENoaWxkKEFjY29yZGlvbkhlYWRlckNvbXBvbmVudCkgcHVibGljIGFjY29yZGlvbkhlYWRlckNvbXBvbmVudDogQWNjb3JkaW9uSGVhZGVyQ29tcG9uZW50O1xuICBAQ29udGVudENoaWxkKEFjY29yZGlvbkNvbnRlbnRDb21wb25lbnQpIHB1YmxpYyBhY2NvcmRpb25Db250ZW50Q29tcG9uZW50OiBBY2NvcmRpb25Db250ZW50Q29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUmVmJykgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmhlYWRlclN0eWxlQ29sb3IgPSB0aGlzLmhlYWRlckNvbG9yO1xuXG4gICAgaWYgKCF0aGlzLmhlYWRlciAmJiAhdGhpcy5hY2NvcmRpb25IZWFkZXJDb21wb25lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXR0cmlidXRlIFwiaGVhZGVyXCIgT1IgQ29tcG9uZW50IFwibWstK2FjY29yZGlvbi1oZWFkZXJcIiBpcyByZXF1aXJlZCBmb3IgY29tcG9uZW50IFwibWstK2FjY29yZGlvblwiJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWNjb3JkaW9uQ29udGVudENvbXBvbmVudCkge1xuICAgICAgdGhpcy5jb250ZW50VGVtcGxhdGVSZWYgPSB0aGlzLmFjY29yZGlvbkNvbnRlbnRDb21wb25lbnQudGVtcGxhdGVSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udGVudFRlbXBsYXRlUmVmID0gdGhpcy50ZW1wbGF0ZVJlZjtcbiAgICB9XG4gIH1cbn1cblxuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstYWNjb3JkaW9uLWdyb3VwJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IFtuZ0NsYXNzXT1cInN0eWxlQ2xhc3NcIj5cbiAgPGRpdiAqbmdGb3I9XCJsZXQgYWNjb3JkaW9uIG9mIGFjY29yZGlvbkNvbXBvbmVudHNcIiBjbGFzcz1cInBhbmVsIGJveFwiIFtta0NvbG9yXT1cImFjY29yZGlvbi5ib3JkZXJDb2xvclwiIG1rQ29sb3JQcm9wZXJ0eT1cImJvcmRlci10b3AtY29sb3JcIiBta0NvbG9yUHJlZml4PVwiYm94XCI+XG4gICAgPGRpdiBbbmdDbGFzc109XCJhY2NvcmRpb24uaGVhZGVyU3R5bGVDbGFzc1wiIFtjbGFzcy5uby1ib3JkZXJdPVwiYWNjb3JkaW9uLmlzQ29sbGFwc2VkICYmICFhY2NvcmRpb24uaXNDb2xsYXBzaW5nXCI+XG4gICAgICA8aDQgY2xhc3M9XCJib3gtdGl0bGVcIj5cbiAgICAgICAgPGEgW21rQWNjb3JkaW9uVG9nZ2xlXT1cImFjY29yZGlvblwiIGhyZWY9XCIjXCIgW21rRm9udENvbG9yXT1cImFjY29yZGlvbi5oZWFkZXJTdHlsZUNvbG9yXCIgW2NsYXNzLmNvbGxhcHNlZF09XCJhY2NvcmRpb24uaXNDb2xsYXBzZWRcIj5cbiAgICAgICAgICB7e2FjY29yZGlvbi5oZWFkZXJ9fVxuICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cIiFhY2NvcmRpb24uaGVhZGVyXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiYWNjb3JkaW9uLmFjY29yZGlvbkhlYWRlckNvbXBvbmVudD8udGVtcGxhdGVSZWZcIj48L25nLXRlbXBsYXRlPlxuICAgICAgICA8L2E+XG4gICAgICA8L2g0PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJwYW5lbC1jb2xsYXBzZVwiIFtta0NvbGxhcHNlQW5pbWF0aW9uXT1cImFjY29yZGlvbi5pc0NvbGxhcHNlZFwiIChta0NvbGxhcHNlQW5pbWF0aW9uLnN0YXJ0KT1cImNvbGxhcHNlU3RhcnQoJGV2ZW50LCBhY2NvcmRpb24pXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uZG9uZSk9XCJjb2xsYXBzZURvbmUoJGV2ZW50LCBhY2NvcmRpb24pXCI+XG4gICAgICA8ZGl2IFtuZ0NsYXNzXT1cImFjY29yZGlvbi5jb250ZW50U3R5bGVDbGFzc1wiIFtta0ZvbnRDb2xvcl09XCJhY2NvcmRpb24uY29udGVudENvbG9yXCI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJhY2NvcmRpb24uY29udGVudFRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBhY3RpdmVJbmRleDogYW55ID0gWzBdO1xuICAvLyBAVE9ETyBjaGFuZ2UgdHlwZXMgZm9yIGxpc3RlbmVycyB0byBhbGwgZmlsZXNcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IEFycmF5PEZ1bmN0aW9uPiA9IFtdO1xuICAvLyBAVE9ETyBjaGFuZ2UgdHlwZXMgZm9yIHN1YnNjcmlwdGlvbnMgdG8gYWxsIGZpbGVzXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogQXJyYXk8U3Vic2NyaXB0aW9uPiA9IFtdO1xuXG5cbiAgQElucHV0KCdhY3RpdmVJbmRleCcpIHNldCBfYWN0aXZlSW5kZXgodmFsdWUpIHtcbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgfVxuICBASW5wdXQoKSBwdWJsaWMgaXNNdWx0aXBsZTogYm9vbGVhbjtcbiAgQElucHV0KCkgcHVibGljIHN0eWxlQ2xhc3MgPSAnYm94LWdyb3VwJztcblxuICBAT3V0cHV0KCkgcHVibGljIG9uQ29sbGFwc2VTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHB1YmxpYyBvbkNvbGxhcHNlRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAQ29udGVudENoaWxkcmVuKEFjY29yZGlvbkNvbXBvbmVudCkgcHVibGljIGFjY29yZGlvbkNvbXBvbmVudHM6IFF1ZXJ5TGlzdDxBY2NvcmRpb25Db21wb25lbnQ+O1xuXG4gIEBWaWV3Q2hpbGRyZW4oQWNjb3JkaW9uVG9nZ2xlRGlyZWN0aXZlKSBwcml2YXRlIGFjY29yZGlvblRvZ2dsZURpcmVjdGl2ZXM6IFF1ZXJ5TGlzdDxBY2NvcmRpb25Ub2dnbGVEaXJlY3RpdmU+O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBjaGFuZ2VEZXRlY3RvclJlZiBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBuZ1pvbmUgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBbaGVhZGVyTW91c2VMZWF2ZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBoZWFkZXJNb3VzZUxlYXZlXG4gICAqIEBwYXJhbSBhY2NvcmRpb24gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBoZWFkZXJNb3VzZUxlYXZlKGFjY29yZGlvbjogQWNjb3JkaW9uQ29tcG9uZW50KTogdm9pZCB7XG4gICAgYWNjb3JkaW9uLmhlYWRlclN0eWxlQ29sb3IgPSBhY2NvcmRpb24uaGVhZGVyQ29sb3I7XG4gIH1cblxuICAvKipcbiAgICogW2hlYWRlck1vdXNlRW50ZXIgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaGVhZGVyTW91c2VFbnRlclxuICAgKiBAcGFyYW0gYWNjb3JkaW9uIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaGVhZGVyTW91c2VFbnRlcihhY2NvcmRpb246IEFjY29yZGlvbkNvbXBvbmVudCk6IHZvaWQge1xuICAgIGlmIChhY2NvcmRpb24uaGVhZGVyQ29sb3JIb3Zlcikge1xuICAgICAgYWNjb3JkaW9uLmhlYWRlclN0eWxlQ29sb3IgPSBhY2NvcmRpb24uaGVhZGVyQ29sb3JIb3ZlcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ0FmdGVyVmlld0luaXRcbiAgICovXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnNldEFjY29yZGlvbnNJbmRleCgpO1xuICAgIHRoaXMudXBkYXRlQWNjb3JkaW9uSXNDb2xsYXBzZWQoKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuYWNjb3JkaW9uQ29tcG9uZW50cy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnNldEFjY29yZGlvbnNJbmRleCgpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QWNjb3JkaW9uc1RvZ2dsZSgpO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5hY2NvcmRpb25Ub2dnbGVEaXJlY3RpdmVzLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuc2V0QWNjb3JkaW9uc1RvZ2dsZSgpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbbmdPbkNoYW5nZXMgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgbmdPbkNoYW5nZXNcbiAgICogQHBhcmFtIGNoYW5nZXMgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5fYWN0aXZlSW5kZXguZmlyc3RDaGFuZ2UgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUFjY29yZGlvbklzQ29sbGFwc2VkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkRlc3Ryb3lcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHJlbW92ZUxpc3RlbmVycyh0aGlzLmxpc3RlbmVycyk7XG4gICAgcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFt0b2dnbGVBY2NvcmRpb24gZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgdG9nZ2xlQWNjb3JkaW9uXG4gICAqIEBwYXJhbSBldmVudCAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSB0b2dnbGVJbmRleCBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgdG9nZ2xlQWNjb3JkaW9uKGV2ZW50OiBFdmVudCwgdG9nZ2xlSW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBpbmRleE9mID0gdGhpcy5hY3RpdmVJbmRleFsnaW5kZXhPZiddKHRvZ2dsZUluZGV4KTtcbiAgICBpZiAoaW5kZXhPZiA9PT0gLTEpIHtcbiAgICAgIGlmICh0aGlzLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRleC5wdXNoKHRvZ2dsZUluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBbdG9nZ2xlSW5kZXhdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXguc3BsaWNlKGluZGV4T2YsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUFjY29yZGlvbklzQ29sbGFwc2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogW2NvbGxhcHNlU3RhcnQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgY29sbGFwc2VTdGFydFxuICAgKiBAcGFyYW0gZXZlbnQgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gYWNjb3JkaW9uIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZVN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCwgYWNjb3JkaW9uOiBBY2NvcmRpb25Db21wb25lbnQpOiB2b2lkIHtcbiAgICBhY2NvcmRpb24uaXNDb2xsYXBzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLm9uQ29sbGFwc2VTdGFydC5lbWl0KHthbmltYXRpb25FdmVudDogZXZlbnQsIGluZGV4OiBhY2NvcmRpb24uaW5kZXh9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbY29sbGFwc2VEb25lIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGNvbGxhcHNlRG9uZVxuICAgKiBAcGFyYW0gZXZlbnQgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gYWNjb3JkaW9uIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZURvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50LCBhY2NvcmRpb246IEFjY29yZGlvbkNvbXBvbmVudCk6IHZvaWQge1xuICAgIGFjY29yZGlvbi5pc0NvbGxhcHNpbmcgPSBmYWxzZTtcbiAgICB0aGlzLm9uQ29sbGFwc2VEb25lLmVtaXQoe2FuaW1hdGlvbkV2ZW50OiBldmVudCwgaW5kZXg6IGFjY29yZGlvbi5pbmRleH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRBY2NvcmRpb25zSW5kZXggZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgc2V0QWNjb3JkaW9uc0luZGV4XG4gICAqL1xuICBwcml2YXRlIHNldEFjY29yZGlvbnNJbmRleCgpOiB2b2lkIHtcbiAgICB0aGlzLmFjY29yZGlvbkNvbXBvbmVudHMuZm9yRWFjaCgoYWNjb3JkaW9uOiBBY2NvcmRpb25Db21wb25lbnQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGFjY29yZGlvbi5pbmRleCA9IGluZGV4O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRBY2NvcmRpb25zVG9nZ2xlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldEFjY29yZGlvbnNUb2dnbGVcbiAgICovXG4gIHByaXZhdGUgc2V0QWNjb3JkaW9uc1RvZ2dsZSgpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHJlbW92ZUxpc3RlbmVycyh0aGlzLmxpc3RlbmVycyk7XG5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLmFjY29yZGlvblRvZ2dsZURpcmVjdGl2ZXMuZm9yRWFjaCgoYWNjb3JkaW9uVG9nZ2xlOiBBY2NvcmRpb25Ub2dnbGVEaXJlY3RpdmUpID0+IHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4oYWNjb3JkaW9uVG9nZ2xlLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy50b2dnbGVBY2NvcmRpb24oZXZlbnQsIGFjY29yZGlvblRvZ2dsZS5hY2NvcmRpb25Db21wb25lbnQuaW5kZXgpO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy5yZW5kZXJlcjIubGlzdGVuKGFjY29yZGlvblRvZ2dsZS5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAgIEFjY29yZGlvbkdyb3VwQ29tcG9uZW50LmhlYWRlck1vdXNlRW50ZXIoYWNjb3JkaW9uVG9nZ2xlLmFjY29yZGlvbkNvbXBvbmVudCk7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4oYWNjb3JkaW9uVG9nZ2xlLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgQWNjb3JkaW9uR3JvdXBDb21wb25lbnQuaGVhZGVyTW91c2VMZWF2ZShhY2NvcmRpb25Ub2dnbGUuYWNjb3JkaW9uQ29tcG9uZW50KTtcbiAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogW3VwZGF0ZUFjY29yZGlvbklzQ29sbGFwc2VkIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHVwZGF0ZUFjY29yZGlvbklzQ29sbGFwc2VkXG4gICAqL1xuICBwcml2YXRlIHVwZGF0ZUFjY29yZGlvbklzQ29sbGFwc2VkKCk6IHZvaWQge1xuICAgIHRoaXMuYWNjb3JkaW9uQ29tcG9uZW50cy5mb3JFYWNoKChhY2NvcmRpb246IEFjY29yZGlvbkNvbXBvbmVudCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgYWNjb3JkaW9uLmlzQ29sbGFwc2VkID0gdGhpcy5hY3RpdmVJbmRleC5pbmRleE9mKGluZGV4KSA9PT0gLTE7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLm1vZHVsZSc7XG5pbXBvcnQgeyBDb2xvck1vZHVsZSB9IGZyb20gJy4uL2NvbG9yL2NvbG9yLm1vZHVsZSc7XG5cbmltcG9ydCB7IEFjY29yZGlvbkhlYWRlckNvbXBvbmVudCwgQWNjb3JkaW9uQ29udGVudENvbXBvbmVudCwgQWNjb3JkaW9uQ29tcG9uZW50LCBBY2NvcmRpb25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vYWNjb3JkaW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBY2NvcmRpb25Ub2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuL2FjY29yZGlvbi5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEFuaW1hdGlvbnNNb2R1bGUsIENvbG9yTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbQWNjb3JkaW9uSGVhZGVyQ29tcG9uZW50LCBBY2NvcmRpb25Db250ZW50Q29tcG9uZW50LCBBY2NvcmRpb25Db21wb25lbnQsIEFjY29yZGlvbkdyb3VwQ29tcG9uZW50XSxcbiAgICBkZWNsYXJhdGlvbnM6IFtBY2NvcmRpb25Ub2dnbGVEaXJlY3RpdmUsIEFjY29yZGlvbkhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgQWNjb3JkaW9uQ29udGVudENvbXBvbmVudCwgQWNjb3JkaW9uQ29tcG9uZW50LCBBY2NvcmRpb25Hcm91cENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uTW9kdWxlIHt9XG4iLCJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFZpZXdSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QW5pbWF0aW9uRXZlbnR9IGZyb20gJy4uL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5pbnRlcmZhY2UnO1xuXG5pbXBvcnQge3JlbW92ZUxpc3RlbmVyc30gZnJvbSAnLi4vaGVscGVycyc7XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1hbGVydCcsXG4gIHRlbXBsYXRlOiBgPGRpdiAqbmdJZj1cIiFyZW1vdmVkXCIgW21rQ29sbGFwc2VBbmltYXRpb25dPVwicmVtb3ZlXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uc3RhcnQpPVwiY29sbGFwc2VTdGFydCgkZXZlbnQpXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uZG9uZSk9XCJjb2xsYXBzZURvbmUoJGV2ZW50KVwiPlxuICA8ZGl2IFtta0NvbG9yXT1cImJhY2tncm91bmRDb2xvclwiIG1rQ29sb3JQcm9wZXJ0eT1cImJhY2tncm91bmQtY29sb3JcIiBbbWtDb2xvclByZWZpeF09XCJ0eXBlXCIgW21rRm9udENvbG9yXT1cImNvbG9yXCIgW25nQ2xhc3NdPVwiW3N0eWxlQ2xhc3MsIGRpc21pc3NpYmxlQ2xhc3MsIHR5cGVdXCI+XG4gICAgPGJ1dHRvbiAqbmdJZj1cImlzRGlzbWlzc2libGVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiICNyZW1vdmVCdXR0b25FbGVtZW50PiZ0aW1lczs8L2J1dHRvbj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIDwvZGl2PlxuPC9kaXY+XG5gLFxuICBzdHlsZXM6IFtgLmNhbGxvdXQtZGlzbWlzc2FibGUsLmNhbGxvdXQtZGlzbWlzc2libGV7cGFkZGluZy1yaWdodDozNXB4fS5jYWxsb3V0LWRpc21pc3NhYmxlIC5jbG9zZSwuY2FsbG91dC1kaXNtaXNzaWJsZSAuY2xvc2V7cG9zaXRpb246cmVsYXRpdmU7dG9wOi0ycHg7cmlnaHQ6LTIxcHg7Y29sb3I6aW5oZXJpdH0uY2FsbG91dCAuY2xvc2V7Y29sb3I6IzAwMDtvcGFjaXR5Oi4yfS5jYWxsb3V0IC5pY29ue21hcmdpbi1yaWdodDoxMHB4fWBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBBbGVydENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHB1YmxpYyBkaXNtaXNzaWJsZUNsYXNzID0gJ2FsZXJ0LWRpc21pc3NpYmxlJztcbiAgcHVibGljIGlzRGlzbWlzc2libGUgPSB0cnVlO1xuICBwdWJsaWMgcmVtb3ZlID0gZmFsc2U7XG4gIHB1YmxpYyByZW1vdmVkOiBib29sZWFuO1xuICBwdWJsaWMgdHlwZSA9ICdhbGVydCc7XG5cbiAgcHJpdmF0ZSBsaXN0ZW5lcnMgPSBbXTtcblxuICBASW5wdXQoKSBwdWJsaWMgYmFja2dyb3VuZENvbG9yID0gJ2Rhbmdlcic7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZXQgY2FsbG91dCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMudHlwZSA9IHZhbHVlID8gJ2NhbGxvdXQnIDogJ2FsZXJ0JztcbiAgfVxuICBASW5wdXQoKSBwdWJsaWMgY29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGRpc21pc3NPblRpbWVvdXQ6IG51bWJlcjtcbiAgQElucHV0KCdpc0Rpc21pc3NpYmxlJykgcHVibGljIHNldCBfaXNEaXNtaXNzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuaXNEaXNtaXNzaWJsZSA9IHZhbHVlO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5kaXNtaXNzaWJsZUNsYXNzID0gYCR7dGhpcy50eXBlfS1kaXNtaXNzaWJsZWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzbWlzc2libGVDbGFzcyA9ICcnO1xuICAgIH1cbiAgfVxuICBASW5wdXQoKSBwdWJsaWMgc3R5bGVDbGFzcyA9ICcnO1xuXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25Db2xsYXBzZVN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgcHVibGljIG9uQ29sbGFwc2VEb25lID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ3JlbW92ZUJ1dHRvbkVsZW1lbnQnKSBwcml2YXRlIHJlbW92ZUJ1dHRvbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lckVsZW1lbnRSZWYnLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgcHJpdmF0ZSBjb250YWluZXJFbGVtZW50UmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAgY2hhbmdlRGV0ZWN0b3JSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIG5nWm9uZSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICByZW5kZXJlcjIgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgdmlld0NvbnRhaW5lclJlZiAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkluaXRcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNtaXNzT25UaW1lb3V0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghKHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYgYXMgVmlld1JlZikuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuZGlzbWlzc09uVGltZW91dCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZW1vdmVCdXR0b25FbGVtZW50KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy5yZW5kZXJlcjIubGlzdGVuKHRoaXMucmVtb3ZlQnV0dG9uRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzcm95XG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICByZW1vdmVMaXN0ZW5lcnModGhpcy5saXN0ZW5lcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtjb2xsYXBzZVN0YXJ0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGNvbGxhcHNlU3RhcnRcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZVN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIHRoaXMub25Db2xsYXBzZVN0YXJ0LmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtjb2xsYXBzZURvbmUgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgY29sbGFwc2VEb25lXG4gICAqIEBwYXJhbSBldmVudCBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgY29sbGFwc2VEb25lKGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC50b1N0YXRlID09PSAnMScpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gcmVtb3ZlTGlzdGVuZXJzKHRoaXMubGlzdGVuZXJzKTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHRydWU7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICB0aGlzLm9uQ29sbGFwc2VEb25lLmVtaXQoZXZlbnQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJy4uL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5tb2R1bGUnO1xuaW1wb3J0IHsgQ29sb3JNb2R1bGUgfSBmcm9tICcuLi9jb2xvci9jb2xvci5tb2R1bGUnO1xuXG5pbXBvcnQgeyBBbGVydENvbXBvbmVudCB9IGZyb20gJy4vYWxlcnQuY29tcG9uZW50JztcblxuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEFuaW1hdGlvbnNNb2R1bGUsIENvbG9yTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbQWxlcnRDb21wb25lbnRdLFxuICAgIGRlY2xhcmF0aW9uczogW0FsZXJ0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBBbGVydE1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuICBzZWxlY3RvcjogJ21rLWJveC1jb250ZW50J1xufSlcbmV4cG9ydCBjbGFzcyBCb3hDb250ZW50RGlyZWN0aXZlIHt9XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LWZvb3Rlcidcbn0pXG5leHBvcnQgY2xhc3MgQm94Rm9vdGVyRGlyZWN0aXZlIHt9XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LXRvb2xzJ1xufSlcbmV4cG9ydCBjbGFzcyBCb3hUb29sc0RpcmVjdGl2ZSB7fVxuXG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuICBzZWxlY3RvcjogJ21rLWJveC1oZWFkZXInXG59KVxuZXhwb3J0IGNsYXNzIEJveEhlYWRlckRpcmVjdGl2ZSB7fVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QW5pbWF0aW9uRXZlbnR9IGZyb20gJy4uL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5pbnRlcmZhY2UnO1xuXG5pbXBvcnQge0JveENvbnRlbnREaXJlY3RpdmUsIEJveEZvb3RlckRpcmVjdGl2ZSwgQm94SGVhZGVyRGlyZWN0aXZlLCBCb3hUb29sc0RpcmVjdGl2ZX0gZnJvbSAnLi9ib3guZGlyZWN0aXZlJztcblxuaW1wb3J0IHtyZW1vdmVMaXN0ZW5lcnN9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstYm94JyxcbiAgdGVtcGxhdGU6IGA8ZGl2ICpuZ0lmPVwiIXJlbW92ZWRcIiBbbWtDb2xvcl09XCJib3hDb2xvclwiIG1rQ29sb3JQcm9wZXJ0eT1cImJvcmRlci1jb2xvclwiIG1rQ29sb3JQcmVmaXg9XCJib3hcIiBbbmdDbGFzc109XCJzdHlsZUNsYXNzXCIgW2NsYXNzLmNvbGxhcHNlZC1ib3hdPVwiaXNDb2xsYXBzZWQgJiYgIWlzQ29sbGFwaW5nXCIgW2NsYXNzLmJveC1zb2xpZF09XCJpc1NvbGlkXCIgW21rQ29sbGFwc2VBbmltYXRpb25dPVwicmVtb3ZlXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uZG9uZSk9XCJyZW1vdmVkRG9uZSgkZXZlbnQpXCI+XG4gIDxkaXYgKm5nSWY9XCJoZWFkZXIgfHwgYm94SGVhZGVyRGlyZWN0aXZlXCIgW25nQ2xhc3NdPVwiaGVhZGVyU3R5bGVDbGFzc1wiIFtta0NvbG9yXT1cImJveENvbG9yXCIgW21rQ29sb3JDb25kaXRpb25dPVwiaXNTb2xpZFwiIG1rQ29sb3JQcm9wZXJ0eT1cImJhY2tncm91bmQtY29sb3JcIiBbY2xhc3Mud2l0aC1ib3JkZXJdPVwiaGVhZGVyQm9yZGVyXCI+XG4gICAgPGgzIGNsYXNzPVwiYm94LXRpdGxlXCIgW21rRm9udENvbG9yXT1cImhlYWRlckNvbG9yXCI+XG4gICAgICB7e2hlYWRlcn19XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtaGVhZGVyXCI+PC9uZy1jb250ZW50PlxuICAgIDwvaDM+XG4gICAgPGRpdiBjbGFzcz1cImJveC10b29scyBwdWxsLXJpZ2h0XCI+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtdG9vbHNcIj48L25nLWNvbnRlbnQ+XG4gICAgICA8YnV0dG9uICpuZ0lmPVwiaXNDb2xsYXBzYWJsZVwiIHR5cGU9XCJidXR0b25cIiBbbmdDbGFzc109XCJidXR0b25zU3R5bGVDbGFzc1wiICN0b2dnbGVCdXR0b25FbGVtZW50PlxuICAgICAgICA8aSBjbGFzcz1cImZhXCIgW25nQ2xhc3NdPVwieydmYS1wbHVzJzogaXNDb2xsYXBzZWQsICdmYS1taW51cyc6ICFpc0NvbGxhcHNlZH1cIj48L2k+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gKm5nSWY9XCJpc1JlbW92YWJsZVwiIHR5cGU9XCJidXR0b25cIiBbbmdDbGFzc109XCJidXR0b25zU3R5bGVDbGFzc1wiICNyZW1vdmVCdXR0b25FbGVtZW50PlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXRpbWVzXCI+PC9pPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IFtuZ0NsYXNzXT1cImNvbnRlbnRTdHlsZUNsYXNzXCIgW21rRm9udENvbG9yXT1cImNvbnRlbnRDb2xvclwiIFtta0NvbGxhcHNlQW5pbWF0aW9uXT1cImlzQ29sbGFwc2VkXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uc3RhcnQpPVwiY29sbGFwc2VTdGFydCgkZXZlbnQpXCIgKG1rQ29sbGFwc2VBbmltYXRpb24uZG9uZSk9XCJjb2xsYXBzZURvbmUoJGV2ZW50KVwiPlxuICAgIDxkaXYgY2xhc3M9XCJib3gtYm9keVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImJveEhlYWRlckRpcmVjdGl2ZSB8fCBib3hDb250ZW50RGlyZWN0aXZlIHx8IGJveEZvb3RlckRpcmVjdGl2ZSB8fCBib3hUb29sc0RpcmVjdGl2ZTsgZWxzZSBub0RpcmVjdGl2ZVwiPlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtY29udGVudFwiPjwvbmctY29udGVudD5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLXRlbXBsYXRlICNub0RpcmVjdGl2ZT5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2ICpuZ0lmPVwiZm9vdGVyIHx8IGJveEZvb3RlckRpcmVjdGl2ZVwiIFtuZ0NsYXNzXT1cImZvb3RlclN0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwiZm9vdGVyQ29sb3JcIj5cbiAgICAgIHt7Zm9vdGVyfX1cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWJveC1mb290ZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2ICpuZ0lmPVwiaXNMb2FkaW5nXCIgY2xhc3M9XCJvdmVybGF5XCI+XG4gICAgPGkgW25nQ2xhc3NdPVwibG9hZGluZ1N0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwibG9hZGluZ0NvbG9yXCI+PC9pPlxuICA8L2Rpdj5cbjwvZGl2PlxuYCxcbiAgc3R5bGVzOiBbYC5ib3guY29sbGFwc2VkLWJveCAuYm94LWJvZHksLmJveC5jb2xsYXBzZWQtYm94IC5ib3gtZm9vdGVye2Rpc3BsYXk6aW5oZXJpdH0uYm94LXNvbGlke2JvcmRlcjoxcHggc29saWR9LmJveC1ib2R5e2JhY2tncm91bmQtY29sb3I6I2ZmZn0uYm94LmJveC1zb2xpZC5iZy1jb2xvcj4uYm94LWhlYWRlcntjb2xvcjojZmZmfWBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBCb3hDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgaXNDb2xsYXBpbmc6IGJvb2xlYW47XG4gIHB1YmxpYyByZW1vdmUgPSBmYWxzZTtcbiAgcHVibGljIHJlbW92ZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgbGlzdGVuZXJzID0gW107XG5cbiAgQElucHV0KCkgcHVibGljIGJveENvbG9yID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBwdWJsaWMgYnV0dG9uc1N0eWxlQ2xhc3MgPSAnYnRuIGJ0bi1ib3gtdG9vbCc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb250ZW50U3R5bGVDbGFzcyA9ICdib3gtY29udGVudC13cmFwcGVyJztcbiAgQElucHV0KCkgcHVibGljIGNvbnRlbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgZm9vdGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBmb290ZXJDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgZm9vdGVyU3R5bGVDbGFzcyA9ICdib3gtZm9vdGVyJztcbiAgQElucHV0KCkgcHVibGljIGhlYWRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyQm9yZGVyID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIGhlYWRlckNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXJTdHlsZUNsYXNzID0gJ2JveC1oZWFkZXInO1xuICBASW5wdXQoKSBwdWJsaWMgaXNDb2xsYXBzYWJsZSA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBpc0NvbGxhcHNlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgaXNMb2FkaW5nOiBib29sZWFuO1xuICBASW5wdXQoKSBwdWJsaWMgaXNSZW1vdmFibGUgPSB0cnVlO1xuICBASW5wdXQoKSBwdWJsaWMgaXNTb2xpZCA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgbG9hZGluZ0NvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBsb2FkaW5nU3R5bGVDbGFzcyA9ICdmYSBmYS1yZWZyZXNoIGZhLXNwaW4nO1xuICBASW5wdXQoKSBwdWJsaWMgc3R5bGVDbGFzcyA9ICdib3gnO1xuXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25Db2xsYXBzZURvbmUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBwdWJsaWMgb25Db2xsYXBzZVN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBDb250ZW50Q2hpbGQoQm94SGVhZGVyRGlyZWN0aXZlKSBwdWJsaWMgYm94SGVhZGVyRGlyZWN0aXZlOiBCb3hIZWFkZXJEaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoQm94Rm9vdGVyRGlyZWN0aXZlKSBwdWJsaWMgYm94Rm9vdGVyRGlyZWN0aXZlOiBCb3hGb290ZXJEaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoQm94Q29udGVudERpcmVjdGl2ZSkgcHVibGljIGJveENvbnRlbnREaXJlY3RpdmU6IEJveENvbnRlbnREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoQm94VG9vbHNEaXJlY3RpdmUpIHB1YmxpYyBib3hUb29sc0RpcmVjdGl2ZTogQm94VG9vbHNEaXJlY3RpdmU7XG5cbiAgQFZpZXdDaGlsZCgndG9nZ2xlQnV0dG9uRWxlbWVudCcpIHByaXZhdGUgdG9nZ2xlQnV0dG9uRWxlbWVudDtcbiAgQFZpZXdDaGlsZCgncmVtb3ZlQnV0dG9uRWxlbWVudCcpIHByaXZhdGUgcmVtb3ZlQnV0dG9uRWxlbWVudDtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY2hhbmdlRGV0ZWN0b3JSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gbmdab25lICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyXG4gICkge31cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ0FmdGVyVmlld0luaXRcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy50b2dnbGVCdXR0b25FbGVtZW50KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy5yZW5kZXJlcjIubGlzdGVuKHRoaXMudG9nZ2xlQnV0dG9uRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9ICF0aGlzLmlzQ29sbGFwc2VkO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZW1vdmVCdXR0b25FbGVtZW50KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy5yZW5kZXJlcjIubGlzdGVuKHRoaXMucmVtb3ZlQnV0dG9uRWxlbWVudC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzdHJveVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlTGlzdGVuZXJzKHRoaXMubGlzdGVuZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVtb3ZlZERvbmUgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgcmVtb3ZlZERvbmVcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyByZW1vdmVkRG9uZShldmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC50b1N0YXRlID09PSAnMScpIHtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtjb2xsYXBzZVN0YXJ0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGNvbGxhcHNlU3RhcnRcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZVN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5mcm9tU3RhdGUgIT09ICd2b2lkJykge1xuICAgICAgdGhpcy5pc0NvbGxhcGluZyA9IHRydWU7XG4gICAgICB0aGlzLm9uQ29sbGFwc2VTdGFydC5lbWl0KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2NvbGxhcHNlRG9uZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjb2xsYXBzZURvbmVcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZURvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LmZyb21TdGF0ZSAhPT0gJ3ZvaWQnKSB7XG4gICAgICB0aGlzLmlzQ29sbGFwaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLm9uQ29sbGFwc2VEb25lLmVtaXQoZXZlbnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICcuLi9hbmltYXRpb25zL2FuaW1hdGlvbnMubW9kdWxlJztcbmltcG9ydCB7IENvbG9yTW9kdWxlIH0gZnJvbSAnLi4vY29sb3IvY29sb3IubW9kdWxlJztcblxuaW1wb3J0IHsgQm94SGVhZGVyRGlyZWN0aXZlLCBCb3hDb250ZW50RGlyZWN0aXZlLCBCb3hGb290ZXJEaXJlY3RpdmUsIEJveFRvb2xzRGlyZWN0aXZlIH0gZnJvbSAnLi9ib3guZGlyZWN0aXZlJztcbmltcG9ydCB7IEJveENvbXBvbmVudCB9IGZyb20gJy4vYm94LmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCAgQW5pbWF0aW9uc01vZHVsZSwgQ29sb3JNb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtCb3hDb21wb25lbnQsIEJveEhlYWRlckRpcmVjdGl2ZSwgQm94Q29udGVudERpcmVjdGl2ZSwgQm94Rm9vdGVyRGlyZWN0aXZlLCBCb3hUb29sc0RpcmVjdGl2ZV0sXG4gICAgZGVjbGFyYXRpb25zOiBbQm94Q29tcG9uZW50LCBCb3hIZWFkZXJEaXJlY3RpdmUsIEJveENvbnRlbnREaXJlY3RpdmUsIEJveEZvb3RlckRpcmVjdGl2ZSwgQm94VG9vbHNEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIEJveE1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuICBzZWxlY3RvcjogJ21rLWJveC1pbmZvLWNvbnRlbnQnXG59KVxuZXhwb3J0IGNsYXNzIEJveEluZm9Db250ZW50RGlyZWN0aXZlIHt9XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LWluZm8tZm9vdGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBCb3hJbmZvRm9vdGVyRGlyZWN0aXZlIHt9XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LWluZm8taGVhZGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBCb3hJbmZvSGVhZGVyRGlyZWN0aXZlIHt9XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIENvbnRlbnRDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQm94SW5mb0NvbnRlbnREaXJlY3RpdmUsIEJveEluZm9Gb290ZXJEaXJlY3RpdmUsIEJveEluZm9IZWFkZXJEaXJlY3RpdmUgfSBmcm9tICcuL2JveC1pbmZvLmRpcmVjdGl2ZSc7XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1ib3gtaW5mbycsXG4gIHN0eWxlczogW2AuaW5mby1ib3guYmctY29sb3I+LmluZm8tYm94LWNvbnRlbnR7Y29sb3I6I2ZmZn1gXSxcbiAgdGVtcGxhdGU6IGA8ZGl2IFtuZ0NsYXNzXT1cInN0eWxlQ2xhc3NcIiBbbWtDb2xvcl09XCJiYWNrZ3JvdW5kQ29sb3JcIiBta0NvbG9yUHJvcGVydHk9XCJiYWNrZ3JvdW5kLWNvbG9yXCI+XG4gIDxzcGFuIGNsYXNzPVwiaW5mby1ib3gtaWNvblwiIFtta0NvbG9yXT1cImljb25CYWNrZ3JvdW5kQ29sb3JcIiBta0NvbG9yUHJvcGVydHk9XCJiYWNrZ3JvdW5kLWNvbG9yXCI+XG4gICAgPGkgW25nQ2xhc3NdPVwiaWNvblN0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwiaWNvbkNvbG9yXCI+PC9pPlxuICA8L3NwYW4+XG4gIDxkaXYgY2xhc3M9XCJpbmZvLWJveC1jb250ZW50XCI+XG4gICAgPHNwYW4gKm5nSWY9XCJoZWFkZXIgfHwgYm94SW5mb0hlYWRlckRpcmVjdGl2ZVwiIFtuZ0NsYXNzXT1cImhlYWRlclN0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwiaGVhZGVyQ29sb3JcIj5cbiAgICAgIHt7aGVhZGVyfX1cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWJveC1oZWFkZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICAgIDxzcGFuIFtuZ0NsYXNzXT1cImNvbnRlbnRTdHlsZUNsYXNzXCIgW21rRm9udENvbG9yXT1cImNvbnRlbnRDb2xvclwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImJveEluZm9IZWFkZXJEaXJlY3RpdmUgfHwgYm94SW5mb0NvbnRlbnREaXJlY3RpdmUgfHwgYm94SW5mb0Zvb3RlckRpcmVjdGl2ZTsgZWxzZSBub0RpcmVjdGl2ZVwiPlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtY29udGVudFwiPjwvbmctY29udGVudD5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLXRlbXBsYXRlICNub0RpcmVjdGl2ZT5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L3NwYW4+XG4gICAgPGRpdiAqbmdJZj1cInByb2dyZXNzV2lkdGhcIiBjbGFzcz1cInByb2dyZXNzXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgW21rQ29sb3JdPVwicHJvZ3Jlc3NCYXJCZ1wiIG1rQ29sb3JQcm9wZXJ0eT1cImJhY2tncm91bmQtY29sb3JcIiBbc3R5bGUud2lkdGguJV09XCJwcm9ncmVzc1dpZHRoXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHNwYW4gKm5nSWY9XCJmb290ZXIgfHwgYm94SW5mb0Zvb3RlckRpcmVjdGl2ZVwiIFtuZ0NsYXNzXT1cImZvb3RlclN0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwiZm9vdGVyQ29sb3JcIj5cbiAgICAgIHt7Zm9vdGVyfX1cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWJveC1mb290ZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICA8L2Rpdj5cbjwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBCb3hJbmZvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHVibGljIHByb2dyZXNzQmFyQmc6IHN0cmluZztcblxuICBASW5wdXQoKSBwdWJsaWMgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb250ZW50U3R5bGVDbGFzcyA9ICdpbmZvLWJveC1udW1iZXInO1xuICBASW5wdXQoKSBwdWJsaWMgY29udGVudENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBmb290ZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGZvb3RlckNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBmb290ZXJTdHlsZUNsYXNzID0gJ3Byb2dyZXNzLWRlc2NyaXB0aW9uJztcbiAgQElucHV0KCkgcHVibGljIGhlYWRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyQ29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGhlYWRlclN0eWxlQ2xhc3MgPSAnaW5mby1ib3gtdGV4dCc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uQmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uQ29sb3IgPSAnI2ZmZic7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uU3R5bGVDbGFzcyA9ICdpb24gaW9uLWJhZyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBwcm9ncmVzc1dpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdHlsZUNsYXNzID0gJ2luZm8tYm94JztcblxuICBAQ29udGVudENoaWxkKEJveEluZm9IZWFkZXJEaXJlY3RpdmUpIHB1YmxpYyBib3hJbmZvSGVhZGVyRGlyZWN0aXZlOiBCb3hJbmZvSGVhZGVyRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKEJveEluZm9Gb290ZXJEaXJlY3RpdmUpIHB1YmxpYyBib3hJbmZvRm9vdGVyRGlyZWN0aXZlOiBCb3hJbmZvRm9vdGVyRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKEJveEluZm9Db250ZW50RGlyZWN0aXZlKSBwdWJsaWMgYm94SW5mb0NvbnRlbnREaXJlY3RpdmU6IEJveEluZm9Db250ZW50RGlyZWN0aXZlO1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICB0aGlzLnByb2dyZXNzQmFyQmcgPSB0aGlzLmljb25CYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQ29sb3JNb2R1bGUgfSBmcm9tICcuLi9jb2xvci9jb2xvci5tb2R1bGUnO1xuXG5pbXBvcnQgeyBCb3hJbmZvSGVhZGVyRGlyZWN0aXZlLCBCb3hJbmZvQ29udGVudERpcmVjdGl2ZSwgQm94SW5mb0Zvb3RlckRpcmVjdGl2ZSB9IGZyb20gJy4vYm94LWluZm8uZGlyZWN0aXZlJztcbmltcG9ydCB7IEJveEluZm9Db21wb25lbnQgfSBmcm9tICcuL2JveC1pbmZvLmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBDb2xvck1vZHVsZV0sXG4gICAgZXhwb3J0czogW0JveEluZm9Db21wb25lbnQsIEJveEluZm9IZWFkZXJEaXJlY3RpdmUsIEJveEluZm9Db250ZW50RGlyZWN0aXZlLCBCb3hJbmZvRm9vdGVyRGlyZWN0aXZlXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtCb3hJbmZvQ29tcG9uZW50LCBCb3hJbmZvSGVhZGVyRGlyZWN0aXZlLCBCb3hJbmZvQ29udGVudERpcmVjdGl2ZSwgQm94SW5mb0Zvb3RlckRpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgQm94SW5mb01vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuICBzZWxlY3RvcjogJ21rLWJveC1zbWFsbC1mb290ZXInXG59KVxuZXhwb3J0IGNsYXNzIEJveFNtYWxsRm9vdGVyRGlyZWN0aXZlIHt9XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LXNtYWxsLWhlYWRlcidcbn0pXG5leHBvcnQgY2xhc3MgQm94U21hbGxIZWFkZXJEaXJlY3RpdmUge31cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstYm94LXNtYWxsLWNvbnRlbnQnXG59KVxuZXhwb3J0IGNsYXNzIEJveFNtYWxsQ29udGVudERpcmVjdGl2ZSB7fVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEJveFNtYWxsQ29udGVudERpcmVjdGl2ZSwgQm94U21hbGxGb290ZXJEaXJlY3RpdmUsIEJveFNtYWxsSGVhZGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9ib3gtc21hbGwuZGlyZWN0aXZlJztcblxuLypcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWJveC1zbWFsbCcsXG4gIHRlbXBsYXRlOiBgPGRpdiBbbmdDbGFzc109XCJzdHlsZUNsYXNzXCIgW21rQ29sb3JdPVwiYmFja2dyb3VuZENvbG9yXCIgbWtDb2xvclByb3BlcnR5PVwiYmFja2dyb3VuZC1jb2xvclwiPlxuICA8ZGl2IGNsYXNzPVwiaW5uZXJcIj5cbiAgICA8aDMgKm5nSWY9XCJoZWFkZXIgfHwgYm94U21hbGxIZWFkZXJEaXJlY3RpdmVcIiBbbmdDbGFzc109XCJoZWFkZXJTdHlsZUNsYXNzXCIgW21rRm9udENvbG9yXT1cImhlYWRlckNvbG9yXCI+XG4gICAgICB7e2hlYWRlcn19XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtc21hbGwtaGVhZGVyXCI+PC9uZy1jb250ZW50PlxuICAgIDwvaDM+XG4gICAgPHAgW25nQ2xhc3NdPVwiY29udGVudFN0eWxlQ2xhc3NcIiBbbWtGb250Q29sb3JdPVwiY29udGVudENvbG9yXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiYm94U21hbGxIZWFkZXJEaXJlY3RpdmUgfHwgYm94U21hbGxDb250ZW50RGlyZWN0aXZlIHx8IGJveFNtYWxsRm9vdGVyRGlyZWN0aXZlOyBlbHNlIG5vRGlyZWN0aXZlXCI+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWJveC1zbWFsbC1jb250ZW50XCI+PC9uZy1jb250ZW50PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctdGVtcGxhdGUgI25vRGlyZWN0aXZlPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvcD5cbiAgPC9kaXY+XG4gIDxkaXYgKm5nSWY9XCJpY29uU3R5bGVDbGFzc1wiIGNsYXNzPVwiaWNvblwiPlxuICAgIDxpIFtuZ0NsYXNzXT1cImljb25TdHlsZUNsYXNzXCIgW21rRm9udENvbG9yXT1cImljb25Db2xvclwiPjwvaT5cbiAgPC9kaXY+XG4gIDxzcGFuICpuZ0lmPVwiZm9vdGVyIHx8IGJveFNtYWxsRm9vdGVyRGlyZWN0aXZlXCIgW25nQ2xhc3NdPVwiZm9vdGVyU3R5bGVDbGFzc1wiIFtta0ZvbnRDb2xvcl09XCJmb290ZXJDb2xvclwiPlxuICAgIHt7Zm9vdGVyfX1cbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1ib3gtc21hbGwtZm9vdGVyXCI+PC9uZy1jb250ZW50PlxuICA8L3NwYW4+XG48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2Auc21hbGwtYm94LmJnLWNvbG9ye2NvbG9yOiNmZmZ9L2RlZXAvIC5zbWFsbC1ib3gtZm9vdGVyOmhvdmVye2N1cnNvcjpwb2ludGVyfS9kZWVwLyAuc21hbGwtYm94LWZvb3RlciBhe2NvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjgpfS9kZWVwLyAuc21hbGwtYm94LWZvb3Rlcjpob3ZlciBhe2NvbG9yOiNmZmZ9YF1cbn0pXG5leHBvcnQgY2xhc3MgQm94U21hbGxDb21wb25lbnQge1xuICBASW5wdXQoKSBwdWJsaWMgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb250ZW50Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGNvbnRlbnRTdHlsZUNsYXNzID0gJ3NtYWxsLWJveC1jb250ZW50JztcbiAgQElucHV0KCkgcHVibGljIGZvb3Rlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgZm9vdGVyQ29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGZvb3RlclN0eWxlQ2xhc3MgPSAnc21hbGwtYm94LWZvb3Rlcic7XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGhlYWRlckNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXJTdHlsZUNsYXNzID0gJ3NtYWxsLWJveC1oZWFkZXInO1xuICBASW5wdXQoKSBwdWJsaWMgaWNvbkNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uU3R5bGVDbGFzcyA9ICdpb24gaW9uLWJhZyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdHlsZUNsYXNzID0gJ3NtYWxsLWJveCc7XG5cbiAgQENvbnRlbnRDaGlsZChCb3hTbWFsbEhlYWRlckRpcmVjdGl2ZSkgcHVibGljIGJveFNtYWxsSGVhZGVyRGlyZWN0aXZlOiBCb3hTbWFsbEhlYWRlckRpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChCb3hTbWFsbEZvb3RlckRpcmVjdGl2ZSkgcHVibGljIGJveFNtYWxsRm9vdGVyRGlyZWN0aXZlOiBCb3hTbWFsbEZvb3RlckRpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChCb3hTbWFsbENvbnRlbnREaXJlY3RpdmUpIHB1YmxpYyBib3hTbWFsbENvbnRlbnREaXJlY3RpdmU6IEJveFNtYWxsQ29udGVudERpcmVjdGl2ZTtcbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBDb2xvck1vZHVsZSB9IGZyb20gJy4uL2NvbG9yL2NvbG9yLm1vZHVsZSc7XG5cbmltcG9ydCB7IEJveFNtYWxsSGVhZGVyRGlyZWN0aXZlLCBCb3hTbWFsbENvbnRlbnREaXJlY3RpdmUsIEJveFNtYWxsRm9vdGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9ib3gtc21hbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJveFNtYWxsQ29tcG9uZW50IH0gZnJvbSAnLi9ib3gtc21hbGwuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBDb2xvck1vZHVsZV0sXG4gICAgZXhwb3J0czogW0JveFNtYWxsQ29tcG9uZW50LCBCb3hTbWFsbEhlYWRlckRpcmVjdGl2ZSwgQm94U21hbGxDb250ZW50RGlyZWN0aXZlLCBCb3hTbWFsbEZvb3RlckRpcmVjdGl2ZV0sXG4gICAgZGVjbGFyYXRpb25zOiBbQm94U21hbGxDb21wb25lbnQsIEJveFNtYWxsSGVhZGVyRGlyZWN0aXZlLCBCb3hTbWFsbENvbnRlbnREaXJlY3RpdmUsIEJveFNtYWxsRm9vdGVyRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBCb3hTbWFsbE1vZHVsZSB7fVxuIiwiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0FuaW1hdGlvbkV2ZW50fSBmcm9tICcuLi9hbmltYXRpb25zL2FuaW1hdGlvbnMuaW50ZXJmYWNlJztcblxuaW1wb3J0IHtyZW1vdmVMaXN0ZW5lcnN9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstZHJvcGRvd24tdG9nZ2xlJyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duVG9nZ2xlQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBDb250ZW50Q2hpbGQoJ3RvZ2dsZUVsZW1lbnQnKSBwdWJsaWMgdG9nZ2xlRWxlbWVudDogRWxlbWVudFJlZjtcbn1cblxuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstZHJvcGRvd24tbWVudScsXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bk1lbnVDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVJlZicpIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pjtcbn1cblxuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstZHJvcGRvd24sIFttay1kcm9wZG93bl0nLFxuICB0ZW1wbGF0ZTogYDxuZy10ZW1wbGF0ZSAjaW5uZXJUZW1wbGF0ZT5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRoaXMuZHJvcGRvd25Ub2dnbGVDb21wb25lbnQgJiYgdGhpcy5kcm9wZG93blRvZ2dsZUNvbXBvbmVudC50b2dnbGVFbGVtZW50OyBlbHNlIG5vVG9nZ2xlRWxlbWVudFwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50LnRlbXBsYXRlUmVmXCI+PC9uZy1jb250YWluZXI+XG4gIDxuZy10ZW1wbGF0ZSAjbm9Ub2dnbGVFbGVtZW50PlxuICAgIDxidXR0b24gKm5nSWY9XCJ0b2dnbGVUZXh0IHx8IGRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50XCIgW21rQ29sb3JdPVwiYnV0dG9uQmFja2dyb3VkQ29sb3JcIiBta0NvbG9yUHJvcGVydHk9XCJiYWNrZ3JvdW5kLWNvbG9yXCIgbWtDb2xvclByZWZpeD1cImJ0blwiIFtuZ0NsYXNzXT1cImJ1dHRvblN0eWxlQ2xhc3NcIiAjdG9nZ2xlRWxlbWVudD5cbiAgICAgIHt7dG9nZ2xlVGV4dH19XG4gICAgICA8bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50Py50ZW1wbGF0ZVJlZlwiPjwvbmctY29udGFpbmVyPlxuICAgIDwvYnV0dG9uPlxuICA8L25nLXRlbXBsYXRlPlxuICA8dWwgW25nQ2xhc3NdPVwiY29udGVudFN0eWxlQ2xhc3NcIiBbbWtDb2xsYXBzZUFuaW1hdGlvbl09XCJpc0NvbGxhcHNlZFwiIChta0NvbGxhcHNlQW5pbWF0aW9uLnN0YXJ0KT1cImNvbGxhcHNlU3RhcnQoJGV2ZW50KVwiIChta0NvbGxhcHNlQW5pbWF0aW9uLmRvbmUpPVwiY29sbGFwc2VEb25lKCRldmVudClcIj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZHJvcGRvd25NZW51Q29tcG9uZW50OyBlbHNlIG5vRHJvcGRvd25NZW51Q29tcG9uZW50XCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiZHJvcGRvd25NZW51Q29tcG9uZW50LnRlbXBsYXRlUmVmXCI+PC9uZy1jb250YWluZXI+XG4gICAgPG5nLXRlbXBsYXRlICNub0Ryb3Bkb3duTWVudUNvbXBvbmVudD5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L3VsPlxuPC9uZy10ZW1wbGF0ZT5cblxuPGRpdiAqbmdJZj1cImlzV3JhcHBlcjsgZWxzZSBub1dyYXBwZXJcIiBbbmdDbGFzc109XCJzdHlsZUNsYXNzXCI+XG4gIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJpbm5lclRlbXBsYXRlXCI+PC9uZy1jb250YWluZXI+XG48L2Rpdj5cblxuPG5nLXRlbXBsYXRlICNub1dyYXBwZXI+XG4gIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJpbm5lclRlbXBsYXRlXCI+PC9uZy1jb250YWluZXI+XG48L25nLXRlbXBsYXRlPlxuYCxcbiAgc3R5bGVzOiBbYC5kcm9wZG93bi1tZW51e2Rpc3BsYXk6YmxvY2t9LmRyb3Bkb3duLW1lbnUuY29sbGFwc2luZzpub3QoLnVuLWNvbGxhcHNlKXt0cmFuc2l0aW9uLXByb3BlcnR5OmhlaWdodCxwYWRkaW5nLXRvcCxwYWRkaW5nLWJvdHRvbTtwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjB9YF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBkb2N1bWVudENsaWNrTGlzdGVuZXI6IEZ1bmN0aW9uO1xuICBwcml2YXRlIGxpc3RlbmVycyA9IFtdO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBidXR0b25TdHlsZUNsYXNzID0gJ2J0biBkcm9wZG93bi10b2dnbGUnO1xuICBASW5wdXQoKSBwdWJsaWMgYnV0dG9uQmFja2dyb3VkQ29sb3IgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb250ZW50U3R5bGVDbGFzcyA9ICdkcm9wZG93bi1tZW51JztcbiAgQElucHV0KCkgcHVibGljIGlzQ29sbGFwc2VkID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIGlzV3JhcHBlciA9IHRydWU7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdHlsZUNsYXNzID0gJ2Ryb3Bkb3duJztcbiAgQElucHV0KCkgcHVibGljIHRvZ2dsZUVsZW1lbnQ6IEVsZW1lbnQ7XG4gIEBJbnB1dCgpIHB1YmxpYyB0b2dnbGVUZXh0OiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpIHB1YmxpYyBvbkNvbGxhcHNlU3RhcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBwdWJsaWMgb25Db2xsYXBzZURvbmUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQENvbnRlbnRDaGlsZChEcm9wZG93blRvZ2dsZUNvbXBvbmVudCkgcHVibGljIGRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50OiBEcm9wZG93blRvZ2dsZUNvbXBvbmVudDtcbiAgQENvbnRlbnRDaGlsZChEcm9wZG93bk1lbnVDb21wb25lbnQpIHB1YmxpYyBkcm9wZG93bk1lbnVDb21wb25lbnQ6IERyb3Bkb3duTWVudUNvbXBvbmVudDtcblxuICBAVmlld0NoaWxkKCd0b2dnbGVFbGVtZW50JykgcHJpdmF0ZSBkZWZhdWx0VG9nZ2xlRWxlbWVudDogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY2hhbmdlRGV0ZWN0b3JSZWYgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gZWxlbWVudFJlZiBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBuZ1pvbmUgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcmVuZGVyZXIyIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IHRvZ2dsZU5hdGl2ZUVsZW1lbnQgPSB0aGlzLmRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50ICYmIHRoaXMuZHJvcGRvd25Ub2dnbGVDb21wb25lbnQudG9nZ2xlRWxlbWVudCA/XG4gICAgICB0aGlzLmRyb3Bkb3duVG9nZ2xlQ29tcG9uZW50LnRvZ2dsZUVsZW1lbnQubmF0aXZlRWxlbWVudCA6IHRoaXMudG9nZ2xlRWxlbWVudCA/XG4gICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCA6IHRoaXMuZGVmYXVsdFRvZ2dsZUVsZW1lbnQgP1xuICAgICAgICAgIHRoaXMuZGVmYXVsdFRvZ2dsZUVsZW1lbnQubmF0aXZlRWxlbWVudCA6IG51bGw7XG4gICAgaWYgKHRvZ2dsZU5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLnJlbmRlcmVyMi5saXN0ZW4odG9nZ2xlTmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgIHRoaXMudG9nZ2xlRHJvcGRvd24oZXZlbnQpO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBuZ09uRGVzdHJveVxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bkJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICByZW1vdmVMaXN0ZW5lcnModGhpcy5saXN0ZW5lcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFt0b2dnbGUgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgdG9nZ2xlXG4gICAqIEBwYXJhbSBldmVudCBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwdWJsaWMgdG9nZ2xlRHJvcGRvd24oZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXRoaXMuaXNDb2xsYXBzZWQ7XG4gICAgaWYgKCF0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQgKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51bkJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2NvbGxhcHNlU3RhcnQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgY29sbGFwc2VTdGFydFxuICAgKiBAcGFyYW0gZXZlbnQgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHVibGljIGNvbGxhcHNlU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5vbkNvbGxhcHNlU3RhcnQuZW1pdChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogW2NvbGxhcHNlRG9uZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjb2xsYXBzZURvbmVcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBjb2xsYXBzZURvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5vbkNvbGxhcHNlU3RhcnQuZW1pdChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogW2JpbmREb2N1bWVudENsaWNrTGlzdGVuZXIgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lclxuICAgKi9cbiAgcHJpdmF0ZSBiaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0xpc3RlbmVyID0gdGhpcy5yZW5kZXJlcjIubGlzdGVuKCdkb2N1bWVudCcsICdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy51bkJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogW3VuQmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCB1bkJpbmREb2N1bWVudENsaWNrTGlzdGVuZXJcbiAgICovXG4gIHByaXZhdGUgdW5CaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRvY3VtZW50Q2xpY2tMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLm1vZHVsZSc7XG5pbXBvcnQgeyBDb2xvck1vZHVsZSB9IGZyb20gJy4uL2NvbG9yL2NvbG9yLm1vZHVsZSc7XG5cbmltcG9ydCB7IERyb3Bkb3duQ29tcG9uZW50LCBEcm9wZG93blRvZ2dsZUNvbXBvbmVudCwgRHJvcGRvd25NZW51Q29tcG9uZW50IH0gZnJvbSAnLi9kcm9wZG93bi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEFuaW1hdGlvbnNNb2R1bGUsIENvbG9yTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbRHJvcGRvd25Db21wb25lbnQsIERyb3Bkb3duVG9nZ2xlQ29tcG9uZW50LCBEcm9wZG93bk1lbnVDb21wb25lbnRdLFxuICAgIGRlY2xhcmF0aW9uczogW0Ryb3Bkb3duQ29tcG9uZW50LCBEcm9wZG93blRvZ2dsZUNvbXBvbmVudCwgRHJvcGRvd25NZW51Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bk1vZHVsZSB7fVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cblxuLypcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnbWstaW5wdXQtZ3JvdXAtbGFiZWwnXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZSB7fVxuXG4vKlxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3IgKi9cbiAgc2VsZWN0b3I6ICdtay1pbnB1dC1ncm91cC1hZGRvbi1sZWZ0J1xufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlIHt9XG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuICBzZWxlY3RvcjogJ21rLWlucHV0LWdyb3VwLWFkZG9uLXJpZ2h0J1xufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZSB7fVxuXG4vKlxuICpcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3IgKi9cbiAgc2VsZWN0b3I6ICdtay1pbnB1dC1ncm91cC1jb250ZW50J1xufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSB7fVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2xhc3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjdXJyZW50Q2xhc3NlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyXG4gICkge31cblxuXG4gIHB1YmxpYyBhcHBseUNsYXNzZXMoY3NzQ2xhc3Nlczogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPik6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgY3NzQ2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNzc0NsYXNzZXMgPSBjc3NDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9ubHkgY2xhc3NlcyB0aGF0IGFyZSBub3QgaW4gY3NzQ2xhc3Nlc1xuICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IHRoaXMuY3VycmVudENsYXNzZXMuZmlsdGVyKHggPT4gY3NzQ2xhc3Nlcy5pbmRleE9mKHgpID09PSAtMSk7XG4gICAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goY3NzQ2xhc3NlID0+IHtcbiAgICAgIGlmIChjc3NDbGFzc2UpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNzc0NsYXNzZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgb25seSBjbGFzc2VzIHRoYXQgYXJlIG5vdCBpbiBjdXJyZW50Q2xhc3Nlc1xuICAgIGNvbnN0IGNsYXNzZXNUb0FkZCA9IGNzc0NsYXNzZXMuZmlsdGVyKHggPT4gdGhpcy5jdXJyZW50Q2xhc3Nlcy5pbmRleE9mKHgpID09PSAtMSk7XG4gICAgY2xhc3Nlc1RvQWRkLmZvckVhY2goY3NzQ2xhc3NlID0+IHtcbiAgICAgIGlmIChjc3NDbGFzc2UpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNzc0NsYXNzZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgY3VycmVudCBjbGFzc2VzIGZvciBmdXR1ciB1cGRhdGVzXG4gICAgdGhpcy5jdXJyZW50Q2xhc3NlcyA9IFsuLi4gY3NzQ2xhc3Nlc107XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25Jbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDb2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb2xvci9jb2xvci5zZXJ2aWNlJztcbmltcG9ydCB7IENsYXNzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UnO1xuXG4vLyBAVE9ETyBvbkZvY3VzIENvbG9yXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0lucHV0VGV4dF0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2UsIENsYXNzU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBkZWZhdWx0Q2xhc3MgPSAnZm9ybS1jb250cm9sJztcbiAgcHJpdmF0ZSBpc1NldENsYXNzOiBib29sZWFuO1xuICBwcml2YXRlIF9vbktleVVwID0gbmV3IFN1YmplY3Q8TmdDb250cm9sPigpO1xuXG4gIHB1YmxpYyBvbktleXVwOiBPYnNlcnZhYmxlPE5nQ29udHJvbD4gPSB0aGlzLl9vbktleVVwLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIEBJbnB1dCgpIHNldCBib3JkZXJDb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yLCB0cnVlLCAnYm9yZGVyLWNvbG9yJywgbnVsbCk7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pc1NldENsYXNzID0gdHJ1ZTtcbiAgICB0aGlzLmNsYXNzU2VydmljZS5hcHBseUNsYXNzZXMoY2xhc3NOYW1lKTtcbiAgfVxuICBASW5wdXQoKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEZvbnRDb2xvcihjb2xvcik7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgcmVuZGVyZXIyICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICBuZ0NvbnRyb2wgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGNvbG9yU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgY2xhc3NTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5nQ29udHJvbDogTmdDb250cm9sLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGFzc1NlcnZpY2U6IENsYXNzU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkluaXRcbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pc1NldENsYXNzKSB7XG4gICAgICB0aGlzLmNsYXNzU2VydmljZS5hcHBseUNsYXNzZXModGhpcy5kZWZhdWx0Q2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleXVwJykga2V5VXBMaXN0ZW5lcigpIHtcbiAgICB0aGlzLl9vbktleVVwLm5leHQodGhpcy5uZ0NvbnRyb2wpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyByZW1vdmVTdWJzY3JpcHRpb25zIH0gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5cbmltcG9ydCB7XG4gIElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlXG59IGZyb20gJy4vaW5wdXQtZ3JvdXAuZGlyZWN0aXZlJztcblxuaW1wb3J0IHsgSW5wdXRUZXh0RGlyZWN0aXZlIH0gZnJvbSAnLi4vaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstaW5wdXQtZ3JvdXAnLFxuICB0ZW1wbGF0ZTogYDxkaXYgW25nQ2xhc3NdPVwid3JhcHBlckNsYXNzZXNcIiBbbWtDb2xvcl09XCJjdXJyZW50Q29sb3IgfHwgaW5wdXRDb2xvclwiIG1rQ29sb3JQcmVmaXg9XCJoYXNcIj5cbiAgPGxhYmVsICpuZ0lmPVwibGFiZWwgfHwgaW5wdXRHcm91cExhYmVsRGlyZWN0aXZlXCI+XG4gICAge3tsYWJlbH19XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibWstaW5wdXQtZ3JvdXAtbGFiZWxcIj48L25nLWNvbnRlbnQ+XG4gIDwvbGFiZWw+XG4gIDxkaXYgKm5nSWY9XCJhZGRvbkxlZnQgfHwgaW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSB8fCBhZGRvblJpZ2h0IHx8IGlucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlOyBlbHNlIG5vQWRkb25cIiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgPHNwYW4gKm5nSWY9XCJhZGRvbkxlZnQgfHwgaW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZVwiIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj5cbiAgICAgIHt7YWRkb25MZWZ0fX1cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWlucHV0LWdyb3VwLWFkZG9uLWxlZnRcIj48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWlucHV0LWdyb3VwLWNvbnRlbnRcIj48L25nLWNvbnRlbnQ+XG4gICAgPHNwYW4gKm5nSWY9XCJhZGRvblJpZ2h0IHx8IGlucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlXCIgY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPlxuICAgICAge3thZGRvblJpZ2h0fX1cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWlucHV0LWdyb3VwLWFkZG9uLXJpZ2h0XCI+PC9uZy1jb250ZW50PlxuICAgIDwvc3Bhbj5cbiAgPC9kaXY+XG4gIDxuZy10ZW1wbGF0ZSAjbm9BZGRvbj48bmctY29udGVudCBzZWxlY3Q9XCJtay1pbnB1dC1ncm91cC1jb250ZW50XCI+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+XG48L2Rpdj5cbmBcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogQXJyYXk8U3Vic2NyaXB0aW9uPiA9IFtdO1xuXG4gIHB1YmxpYyBjdXJyZW50Q29sb3I6IHN0cmluZztcbiAgcHVibGljIGN1cnJlbnRGb250Q29sb3I6IHN0cmluZztcblxuICBASW5wdXQoKSBhZGRvbkxlZnQ6IHN0cmluZztcbiAgQElucHV0KCkgYWRkb25SaWdodDogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dENvbG9yID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBpbnB1dEZvbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dEVycm9yQ29sb3IgPSAnZGFuZ2VyJztcbiAgQElucHV0KCkgaW5wdXRFcnJvckZvbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dFZhbGlkQ29sb3IgPSAnc3VjY2Vzcyc7XG4gIEBJbnB1dCgpIGlucHV0VmFsaWRGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgd3JhcHBlckNsYXNzZXMgPSAnZm9ybS1ncm91cCc7XG5cbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmU6IElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZTogSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlOiBJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlOiBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dFRleHREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dFRleHREaXJlY3RpdmU6IElucHV0VGV4dERpcmVjdGl2ZTtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5pbnB1dFRleHREaXJlY3RpdmUub25LZXl1cC5zdWJzY3JpYmUoKHZhbHVlOiBOZ0NvbnRyb2wpID0+IHtcbiAgICAgIGlmICh2YWx1ZS5pbnZhbGlkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dEVycm9yQ29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRFcnJvckZvbnRDb2xvcjtcbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlLmludmFsaWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSB0aGlzLmlucHV0VmFsaWRDb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udENvbG9yID0gdGhpcy5pbnB1dFZhbGlkRm9udENvbG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSB0aGlzLmlucHV0Q29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRGb250Q29sb3I7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICB9XG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQge0NvbG9yTW9kdWxlfSBmcm9tICcuLi8uLi9jb2xvci9jb2xvci5tb2R1bGUnO1xuXG5pbXBvcnQge0lucHV0R3JvdXBDb21wb25lbnR9IGZyb20gJy4vaW5wdXQtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlXG59IGZyb20gJy4vaW5wdXQtZ3JvdXAuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBDb2xvck1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbSW5wdXRHcm91cENvbXBvbmVudCwgSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlLCBJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlLFxuICAgIElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlLCBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZV0sXG4gIGRlY2xhcmF0aW9uczogW0lucHV0R3JvdXBDb21wb25lbnQsIElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZSwgSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSxcbiAgICBJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZSwgSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBNb2R1bGUge31cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IENvbG9yTW9kdWxlIH0gZnJvbSAnLi4vLi4vY29sb3IvY29sb3IubW9kdWxlJztcblxuaW1wb3J0IHsgSW5wdXRUZXh0RGlyZWN0aXZlIH0gZnJvbSAnLi9pbnB1dC10ZXh0LmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQ29sb3JNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW0lucHV0VGV4dERpcmVjdGl2ZV0sXG4gIGRlY2xhcmF0aW9uczogW0lucHV0VGV4dERpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0TW9kdWxlIHt9XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtUYWJUb2dnbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUYWJUb2dnbGVEaXJlY3RpdmUge1xuICBASW5wdXQoJ21rVGFiVG9nZ2xlJykgdGFiQ29tcG9uZW50O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmXG4gICkge31cbn1cbiIsImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBTaW1wbGVDaGFuZ2UsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGFiVG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi90YWJzLmRpcmVjdGl2ZSc7XG5cbmltcG9ydCB7IHJlbW92ZUxpc3RlbmVycywgcmVtb3ZlU3Vic2NyaXB0aW9ucyB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG4vLyBAVE9ETyBWZXJ0aWNhbCB0YWJzXG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay10YWItaGVhZGVyJyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRhYkhlYWRlckNvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUmVmJykgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuXG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay10YWItY29udGVudCcsXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUYWJDb250ZW50Q29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay10YWInLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgVGFiQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHVibGljIGluZGV4OiBudW1iZXI7XG4gIHB1YmxpYyBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gIHByaXZhdGUgY29udGVudFRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHB1YmxpYyB0YWJDb2xvcjogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUmVmJykgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGQoVGFiSGVhZGVyQ29tcG9uZW50KSBwdWJsaWMgdGFiSGVhZGVyQ29tcG9uZW50OiBUYWJIZWFkZXJDb21wb25lbnQ7XG4gIEBDb250ZW50Q2hpbGQoVGFiQ29udGVudENvbXBvbmVudCkgcHVibGljIHRhYkNvbnRlbnRDb21wb25lbnQ6IFRhYkNvbnRlbnRDb21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkluaXRcbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnRhYkNvbnRlbnRDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY29udGVudFRlbXBsYXRlUmVmID0gdGhpcy50YWJDb250ZW50Q29tcG9uZW50LnRlbXBsYXRlUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRlbnRUZW1wbGF0ZVJlZiA9IHRoaXMudGVtcGxhdGVSZWY7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay10YWJzLWhlYWRlcicsXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUYWJzSGVhZGVyQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVSZWYnKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay10YWJzJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IFtuZ0NsYXNzXT1cInN0eWxlQ2xhc3NcIj5cbiAgPHVsIFtuZ0NsYXNzXT1cIm5hdlN0eWxlQ2xhc3NcIiBbY2xhc3MucHVsbC1yaWdodF09XCJoZWFkZXIgfHwgdGFic0hlYWRlckNvbXBvbmVudFwiPlxuICAgIDxsaSAqbmdGb3I9XCJsZXQgdGFiIG9mIHRhYnNcIiBbY2xhc3MuYWN0aXZlXT1cInRhYi5pc0FjdGl2ZVwiIFtta0NvbG9yXT1cInRhYi50YWJDb2xvciB8fCB0YWJzQ29sb3JcIiBta0NvbG9yUHJvcGVydHk9XCJib3JkZXItdG9wLWNvbG9yXCI+XG4gICAgICA8YSAqbmdJZj1cIiF0YWIuaXNEaXNhYmxlZFwiIFtta1RhYlRvZ2dsZV09XCJ0YWJcIiBocmVmPVwiI1wiPlxuICAgICAgICB7e3RhYi5oZWFkZXJ9fVxuICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCIhdGFiLmhlYWRlclwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRhYi50YWJIZWFkZXJDb21wb25lbnQ/LnRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvYT5cbiAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCJ0YWIuaXNEaXNhYmxlZFwiPlxuICAgICAgICB7e3RhYi5oZWFkZXJ9fVxuICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCIhdGFiLmhlYWRlclwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRhYi50YWJIZWFkZXJDb21wb25lbnQudGVtcGxhdGVSZWZcIj48L25nLXRlbXBsYXRlPlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2xpPlxuICAgIDxsaSAqbmdJZj1cInRhYnNIZWFkZXJDb21wb25lbnQgfHwgaGVhZGVyXCIgW25nQ2xhc3NdPVwiaGVhZGVyU3R5bGVDbGFzc1wiPlxuICAgICAge3toZWFkZXJ9fVxuICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiIWhlYWRlclwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRhYnNIZWFkZXJDb21wb25lbnQudGVtcGxhdGVSZWZcIj48L25nLXRlbXBsYXRlPlxuICAgIDwvbGk+XG4gIDwvdWw+XG4gIDxkaXYgW25nQ2xhc3NdPVwiY29udGVudFN0eWxlQ2xhc3NcIj5cbiAgICA8ZGl2ICpuZ0Zvcj1cImxldCB0YWIgb2YgdGFic1wiIGNsYXNzPVwidGFiLXBhbmVcIiBbY2xhc3MuYWN0aXZlXT1cInRhYi5pc0FjdGl2ZVwiPlxuICAgICAgPG5nLXRlbXBsYXRlIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRhYi5jb250ZW50VGVtcGxhdGVSZWZcIj48L25nLXRlbXBsYXRlPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuYCxcbiAgc3R5bGVzOiBbYC5uYXYtdGFicy1jdXN0b20+Lm5hdi10YWJzPmxpe2JvcmRlci10b3Atd2lkdGg6MH0ubmF2LXRhYnMtY3VzdG9tPi5uYXYtdGFicz5saS5hY3RpdmV7Ym9yZGVyLXRvcC13aWR0aDozcHh9YF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRhYnNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgYWN0aXZhdGVkVGFiSW5kZXg6IG51bWJlcjtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnMgPSBbXTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgQElucHV0KCkgcHVibGljIHNldCBhY3RpdmVUYWJJbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5hY3RpdmF0ZWRUYWJJbmRleCA9IGluZGV4O1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGhlYWRlclN0eWxlQ2xhc3MgPSAnaGVhZGVyIHB1bGwtbGVmdCc7XG4gIEBJbnB1dCgpIHB1YmxpYyBuYXZTdHlsZUNsYXNzID0gJ25hdiBuYXYtdGFicyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb250ZW50U3R5bGVDbGFzcyA9ICd0YWItY29udGVudCc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdHlsZUNsYXNzID0gJ25hdi10YWJzLWN1c3RvbSc7XG4gIEBJbnB1dCgpIHB1YmxpYyB0YWJzQ29sb3I6IHN0cmluZztcblxuICBAT3V0cHV0KCkgcHVibGljIG9uQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBwdWJsaWMgb25PcGVuID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBDb250ZW50Q2hpbGQoVGFic0hlYWRlckNvbXBvbmVudCkgcHVibGljIHRhYnNIZWFkZXJDb21wb25lbnQ6IFRhYnNIZWFkZXJDb21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihUYWJDb21wb25lbnQpIHB1YmxpYyB0YWJzOiBRdWVyeUxpc3Q8VGFiQ29tcG9uZW50PjtcblxuICBAVmlld0NoaWxkcmVuKFRhYlRvZ2dsZURpcmVjdGl2ZSkgcHVibGljIHRhYlRvZ2dsZURpcmVjdGl2ZXM6IFF1ZXJ5TGlzdDxUYWJUb2dnbGVEaXJlY3RpdmU+O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBjaGFuZ2VEZXRlY3RvclJlZiBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBuZ1pvbmUgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIFNldCB0YWIgaW5kZXggb24gbG9hZC5cbiAgICB0aGlzLnNldFRhYkluZGV4KCk7XG5cbiAgICAvLyBVcGRhdGUgdGFiIGluZGV4IGlmIHRhYnMgaXMgdXBkYXRlZC5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLnRhYnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUYWJJbmRleCgpO1xuICAgIH0pKTtcblxuICAgIC8vIE9wZW4gdGFiIG9uIGxvYWQuXG4gICAgdGhpcy5vcGVuVGFiSW5kZXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nQWZ0ZXJWaWV3SW5pdFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8vIFNldCB0YWIgdG9nZ2xlcyBvbiBsb2FkLlxuICAgIHRoaXMuc2V0VGFic1RvZ2dsZSgpO1xuXG4gICAgLy8gVXBkYXRlIHRhYiB0b2dnbGVzIGlmIHRhYnMgaXMgdXBkYXRlZC5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLnRhYlRvZ2dsZURpcmVjdGl2ZXMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUYWJzVG9nZ2xlKCk7XG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkNoYW5nZXNcbiAgICogQHBhcmFtIGNoYW5nZXMgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1twcm9wS2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2V9KSB7XG4gICAgaWYgKGNoYW5nZXMuYWN0aXZlVGFiSW5kZXgpIHtcbiAgICAgIHRoaXMub3BlblRhYkluZGV4KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbmdPbkRlc3Ryb3lcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHJlbW92ZUxpc3RlbmVycyh0aGlzLmxpc3RlbmVycyk7XG4gICAgcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFt0b2dnbGVUYWIgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgdG9nZ2xlVGFiXG4gICAqL1xuICBwdWJsaWMgb3BlblRhYkluZGV4KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRhYnMpIHtcbiAgICAgIHRoaXMudGFicy5mb3JFYWNoKCh0YWI6IFRhYkNvbXBvbmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmF0ZWRUYWJJbmRleCA9PT0gdGFiLmluZGV4IHx8ICh0aGlzLmFjdGl2YXRlZFRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgdGFiLmluZGV4ID09PSAwKSkge1xuICAgICAgICAgIHRhYi5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5vbk9wZW4uZW1pdCh7aW5kZXg6IHRhYi5pbmRleH0pO1xuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhYi5pc0FjdGl2ZSkge1xuICAgICAgICAgIHRhYi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMub25DbG9zZS5lbWl0KHtpbmRleDogdGFiLmluZGV4fSk7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbb3BlblRhYiBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvcGVuVGFiXG4gICAqIEBwYXJhbSBldmVudCAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gdGFiVG9PcGVuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHB1YmxpYyBvcGVuVGFiKGV2ZW50OiBFdmVudCwgdGFiVG9PcGVuOiBUYWJDb21wb25lbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRhYlRvT3Blbi5pc0FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5vbk9wZW4uZW1pdCh7ZXZlbnQsIGluZGV4OiB0YWJUb09wZW4uaW5kZXh9KTtcbiAgICB0aGlzLnRhYnMuZm9yRWFjaCgodGFiOiBUYWJDb21wb25lbnQpID0+IHtcbiAgICAgIGlmICh0YWIuaXNBY3RpdmUgJiYgdGFiVG9PcGVuICE9PSB0YWIpIHtcbiAgICAgICAgdGFiLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KHtldmVudCwgaW5kZXg6IHRhYi5pbmRleH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRUYWJJbmRleCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBzZXRUYWJJbmRleFxuICAgKi9cbiAgcHJpdmF0ZSBzZXRUYWJJbmRleCgpOiB2b2lkIHtcbiAgICB0aGlzLnRhYnMuZm9yRWFjaCgodGFiOiBUYWJDb21wb25lbnQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHRhYi5pbmRleCA9IGluZGV4O1xuICAgIH0pO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtzZXRUYWJzVG9nZ2xlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHNldFRhYnNUb2dnbGVcbiAgICovXG4gIHByaXZhdGUgc2V0VGFic1RvZ2dsZSgpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHJlbW92ZUxpc3RlbmVycyh0aGlzLmxpc3RlbmVycyk7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy50YWJUb2dnbGVEaXJlY3RpdmVzLmZvckVhY2goKHRhYlRvZ2dsZTogVGFiVG9nZ2xlRGlyZWN0aXZlKSA9PiB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy5yZW5kZXJlcjIubGlzdGVuKHRhYlRvZ2dsZS5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgIHRoaXMub3BlblRhYihldmVudCwgdGFiVG9nZ2xlLnRhYkNvbXBvbmVudCk7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQ29sb3JNb2R1bGUgfSBmcm9tICcuLi9jb2xvci9jb2xvci5tb2R1bGUnO1xuXG5pbXBvcnQgeyBUYWJUb2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuL3RhYnMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRhYnNDb21wb25lbnQsIFRhYnNIZWFkZXJDb21wb25lbnQsIFRhYkNvbXBvbmVudCwgVGFiSGVhZGVyQ29tcG9uZW50LCBUYWJDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi90YWJzLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQ29sb3JNb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtUYWJzQ29tcG9uZW50LCBUYWJzSGVhZGVyQ29tcG9uZW50LCBUYWJDb21wb25lbnQsIFRhYkhlYWRlckNvbXBvbmVudCwgVGFiQ29udGVudENvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbVGFiVG9nZ2xlRGlyZWN0aXZlLCBUYWJzQ29tcG9uZW50LCBUYWJzSGVhZGVyQ29tcG9uZW50LCBUYWJDb21wb25lbnQsIFRhYkhlYWRlckNvbXBvbmVudCwgVGFiQ29udGVudENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgVGFic01vZHVsZSB7fVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOzs7QUF3QkE7Ozs7O0lBUUUsWUFDVSxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVJqQixhQUFRLEdBQTJCLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FB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